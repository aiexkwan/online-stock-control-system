// SQL 優化器 - 確保查詢返回合適的數據結構
// 整合了查詢計劃分析和性能優化功能

import { createClient } from '@/app/utils/supabase/server';
import { queryLogger } from '@/lib/logger';

// Query plan analysis types (從 query-plan-analyzer.ts 整合)
export interface QueryPlan {
  planType:
    | 'Seq Scan'
    | 'Index Scan'
    | 'Bitmap Heap Scan'
    | 'Nested Loop'
    | 'Hash Join'
    | 'Merge Join'
    | 'Sort'
    | 'Aggregate';
  relationName?: string;
  indexName?: string;
  startupCost: number;
  totalCost: number;
  planRows: number;
  planWidth: number;
  actualRows?: number;
  actualTime?: number;
  buffers?: {
    shared: {
      hit: number;
      read: number;
    };
  };
  children?: QueryPlan[];
}

export interface Bottleneck {
  type:
    | 'full_table_scan'
    | 'missing_index'
    | 'expensive_join'
    | 'large_sort'
    | 'high_cost'
    | 'low_cache_hit';
  severity: 'low' | 'medium' | 'high' | 'critical';
  description: string;
  location: string;
  impact: number;
}

export interface Recommendation {
  type:
    | 'add_index'
    | 'rewrite_query'
    | 'add_filter'
    | 'change_join_type'
    | 'add_limit'
    | 'partition_table';
  priority: 'low' | 'medium' | 'high' | 'critical';
  description: string;
  implementation: string;
  estimatedGain: number;
}

export interface QueryAnalysisResult {
  originalQuery: string;
  optimizedQuery?: string;
  executionPlan?: QueryPlan;
  performanceScore?: number;
  bottlenecks?: Bottleneck[];
  recommendations?: Recommendation[];
  estimatedImprovement?: number;
}

export function optimizeSQL(sql: string, question: string): string {
  const startTime = Date.now();
  let optimizedSQL = sql.trim();

  queryLogger.debug(
    {
      operation: 'optimizeSQL',
      question,
      originalLength: sql.length,
    },
    'Starting SQL optimization'
  );

  // 1. 優化 JOIN 順序
  if (optimizedSQL.toLowerCase().includes('join')) {
    optimizedSQL = optimizeJoinOrder(optimizedSQL);
  }

  // 2. 檢測是否需要去重
  if (needsDeduplication(sql, question)) {
    optimizedSQL = addGroupByIfNeeded(optimizedSQL);
  }

  // 3. 添加適當索引提示
  optimizedSQL = addIndexHints(optimizedSQL);

  // 4. 確保有合理的 LIMIT
  if (!optimizedSQL.toUpperCase().includes('LIMIT')) {
    // 根據查詢類型決定 LIMIT
    const queryType = detectQueryType(question);
    const limit = getOptimalLimit(queryType, sql);
    optimizedSQL = optimizedSQL.replace(/;?\s*$/, ` LIMIT ${limit};`);
  }

  // 5. 優化子查詢
  if (optimizedSQL.toLowerCase().includes('select') && optimizedSQL.includes('(')) {
    optimizedSQL = optimizeSubqueries(optimizedSQL);
  }

  // 6. 優化 stock_level 查詢
  if (
    question.toLowerCase().includes('stock') &&
    question.toLowerCase().includes('level') &&
    !sql.includes('stock_level')
  ) {
    // 建議使用 stock_level 表
    queryLogger.info(
      {
        optimization: 'stockLevelHint',
        question,
        suggestion: 'Consider using stock_level table',
      },
      'Stock level optimization suggestion'
    );
  }

  // 7. 預估查詢成本
  const estimatedCost = estimateQueryCost(optimizedSQL);
  if (estimatedCost > 5000) {
    queryLogger.warn(
      {
        event: 'highCostQuery',
        estimatedCost,
        threshold: 5000,
        sql: optimizedSQL.substring(0, 200) + '...', // 限制日誌大小
      },
      'High cost query detected'
    );
  }

  const duration = Date.now() - startTime;
  queryLogger.info(
    {
      operation: 'optimizeSQL',
      duration,
      originalLength: sql.length,
      optimizedLength: optimizedSQL.length,
      reduction: sql.length - optimizedSQL.length,
      estimatedCost,
    },
    'SQL optimization completed'
  );

  return optimizedSQL;
}

function needsDeduplication(sql: string, question: string): boolean {
  const sqlLower = sql.toLowerCase();

  // 檢查是否已有 GROUP BY
  if (sqlLower.includes('group by')) {
    return false;
  }

  // 檢查是否需要去重的模式
  const deduplicationPatterns = [
    /top\s+\d+/i,
    /show.*products?/i,
    /list.*by.*product/i,
    /summary/i,
    /statistics/i,
    /report/i,
  ];

  return deduplicationPatterns.some(pattern => pattern.test(question));
}

function addGroupByIfNeeded(sql: string): string {
  const sqlLower = sql.toLowerCase();

  // 如果查詢包含產品信息但沒有 GROUP BY
  if (
    (sqlLower.includes('product_code') || sqlLower.includes('product_name')) &&
    !sqlLower.includes('group by')
  ) {
    // 嘗試智能添加 GROUP BY
    const selectMatch = sql.match(/SELECT\s+(.*?)\s+FROM/is);
    if (selectMatch) {
      const selectClause = selectMatch[1];

      // 查找非聚合欄位
      const nonAggregateColumns = extractNonAggregateColumns(selectClause);

      if (nonAggregateColumns.length > 0) {
        // 在 ORDER BY 之前或查詢末尾添加 GROUP BY
        const orderByIndex = sql.toUpperCase().lastIndexOf('ORDER BY');
        const limitIndex = sql.toUpperCase().lastIndexOf('LIMIT');

        let insertPosition = sql.length;
        if (orderByIndex > -1) {
          insertPosition = orderByIndex;
        } else if (limitIndex > -1) {
          insertPosition = limitIndex;
        }

        const groupByClause = ` GROUP BY ${nonAggregateColumns.join(', ')} `;
        sql = sql.slice(0, insertPosition) + groupByClause + sql.slice(insertPosition);

        queryLogger.info(
          {
            optimization: 'addGroupBy',
            columns: nonAggregateColumns,
            position: insertPosition,
          },
          'Added GROUP BY clause to prevent duplicates'
        );
      }
    }
  }

  return sql;
}

function extractNonAggregateColumns(selectClause: string): string[] {
  const columns: string[] = [];

  // 移除聚合函數
  const cleanedClause = selectClause
    .replace(/COUNT\s*\([^)]+\)/gi, '')
    .replace(/SUM\s*\([^)]+\)/gi, '')
    .replace(/AVG\s*\([^)]+\)/gi, '')
    .replace(/MAX\s*\([^)]+\)/gi, '')
    .replace(/MIN\s*\([^)]+\)/gi, '');

  // 提取欄位名
  const columnMatches = cleanedClause.match(/(\w+\.\w+|\w+)(?:\s+as\s+\w+)?/gi);

  if (columnMatches) {
    columnMatches.forEach(match => {
      const column = match.split(/\s+as\s+/i)[0].trim();
      if (column && !columns.includes(column)) {
        columns.push(column);
      }
    });
  }

  return columns;
}

function detectQueryType(question: string): 'detail' | 'summary' | 'aggregate' | 'search' {
  const patterns = {
    aggregate: [/count/i, /sum/i, /average/i, /total/i, /statistics/i],
    summary: [/summary/i, /report/i, /top\s+\d+/i, /overview/i, /distribution/i],
    search: [/find/i, /search/i, /where\s+is/i, /locate/i],
    detail: [],
  };

  for (const [type, patternList] of Object.entries(patterns)) {
    if (patternList.some(p => p.test(question))) {
      return type as 'detail' | 'summary' | 'aggregate' | 'search';
    }
  }

  return 'detail';
}

// 優化 JOIN 順序
function optimizeJoinOrder(sql: string): string {
  // 表格大小估算（基於實際數據庫知識）
  const tableSizes: Record<string, number> = {
    data_code: 1000, // 產品代碼表（小）
    data_id: 100, // 用戶表（小）
    data_supplier: 50, // 供應商表（小）
    record_history: 1000000, // 歷史記錄表（大）
    record_palletinfo: 100000, // 棧板信息表（中大）
    record_inventory: 100000, // 庫存表（中大）
    record_transfer: 500000, // 轉移記錄表（大）
    data_order: 50000, // 訂單表（中）
    record_grn: 50000, // 收貨記錄表（中）
  };

  try {
    // 解析 FROM 和 JOIN 子句
    const fromMatch = sql.match(/FROM\s+(\w+)(?:\s+(\w+))?/i);
    if (!fromMatch) return sql;

    const joinMatches = sql.matchAll(
      /(?:LEFT\s+|RIGHT\s+|INNER\s+|OUTER\s+)?JOIN\s+(\w+)(?:\s+(\w+))?\s+ON/gi
    );
    const joins: Array<{
      type: string;
      table: string;
      alias: string;
      condition: string;
      size: number;
    }> = [];

    let currentPos = 0;
    for (const match of joinMatches) {
      const fullMatch = match[0];
      const tableName = match[1];
      const alias = match[2] || tableName;
      const joinType = fullMatch.replace(/JOIN.*/, '').trim() || 'INNER';

      // 找到 ON 條件
      const startPos = sql.indexOf(fullMatch, currentPos);
      const endPos = sql.indexOf('JOIN', startPos + fullMatch.length);
      const condition =
        endPos > -1
          ? sql.substring(startPos + fullMatch.length, endPos).trim()
          : sql
              .substring(startPos + fullMatch.length)
              .match(/[^(ORDER|WHERE|GROUP|HAVING|LIMIT)]+/)?.[0] || '';

      joins.push({
        type: joinType,
        table: tableName,
        alias: alias,
        condition: condition,
        size: tableSizes[tableName] || 10000,
      });

      currentPos = startPos + fullMatch.length;
    }

    // 按表格大小排序（小表優先）
    joins.sort((a, b) => a.size - b.size);

    // 重構 SQL
    const fromTable = fromMatch[1];
    const fromAlias = fromMatch[2] || fromTable;
    let newSql = sql.substring(0, sql.indexOf('FROM')) + `FROM ${fromTable}`;
    if (fromAlias !== fromTable) {
      newSql += ` ${fromAlias}`;
    }

    // 添加排序後的 JOIN
    for (const join of joins) {
      newSql += `\n${join.type} JOIN ${join.table}`;
      if (join.alias !== join.table) {
        newSql += ` ${join.alias}`;
      }
      newSql += ` ON ${join.condition}`;
    }

    // 添加 WHERE 子句及後續內容
    const whereIndex = sql.toUpperCase().indexOf('WHERE');
    if (whereIndex > -1) {
      newSql += '\n' + sql.substring(whereIndex);
    } else {
      // 檢查其他子句
      const clauses = ['GROUP BY', 'ORDER BY', 'HAVING', 'LIMIT'];
      let remainingSql = '';
      let minIndex = sql.length;

      for (const clause of clauses) {
        const index = sql.toUpperCase().indexOf(clause);
        if (index > -1 && index < minIndex) {
          minIndex = index;
        }
      }

      if (minIndex < sql.length) {
        remainingSql = sql.substring(minIndex);
        newSql += '\n' + remainingSql;
      }
    }

    return newSql;
  } catch (error) {
    queryLogger.error(
      {
        operation: 'optimizeJoinOrder',
        error: error instanceof Error ? error.message : 'Unknown error',
        originalSql: sql.substring(0, 200) + '...',
      },
      'Error optimizing JOIN order'
    );
    return sql; // 返回原始 SQL
  }
}

// 添加索引提示
function addIndexHints(sql: string): string {
  // PostgreSQL 不支持直接的索引提示，但可以通過重寫查詢來引導優化器
  let optimized = sql;

  // 優化日期範圍查詢
  optimized = optimized.replace(
    /WHERE\s+DATE\((\w+\.?\w*)\)\s*=\s*CURRENT_DATE/gi,
    "WHERE $1 >= CURRENT_DATE AND $1 < CURRENT_DATE + INTERVAL '1 day'"
  );

  // 優化 LIKE 查詢
  optimized = optimized.replace(
    /WHERE\s+(\w+\.?\w*)\s+LIKE\s+'([^%]+)%'/gi,
    "WHERE $1 >= '$2' AND $1 < '$2\\uFFFF'"
  );

  return optimized;
}

// 獲取最佳 LIMIT 值
function getOptimalLimit(queryType: string, sql: string): number {
  const limits: Record<string, number> = {
    aggregate: 1, // 聚合查詢通常只返回一行
    summary: 20, // 摘要報告限制 20 行
    search: 50, // 搜索結果限制 50 行
    detail: 100, // 詳細查詢限制 100 行
  };

  // 如果有 GROUP BY，可能需要更多行
  if (sql.toLowerCase().includes('group by')) {
    return limits[queryType] * 2;
  }

  return limits[queryType] || 100;
}

// 優化子查詢
function optimizeSubqueries(sql: string): string {
  // 將 IN (SELECT ...) 轉換為 EXISTS
  const inSubqueryPattern = /(\w+\.?\w*)\s+IN\s*\((SELECT[^)]+)\)/gi;
  let optimized = sql.replace(inSubqueryPattern, (match, column, subquery) => {
    // 嘗試轉換為 EXISTS
    if (subquery.toLowerCase().includes('from')) {
      return `EXISTS (${subquery} AND ${column} = ${extractSubqueryColumn(subquery)})`;
    }
    return match;
  });

  // 將相關子查詢移到 JOIN
  const correlatedPattern =
    /SELECT\s+.*?\s*,\s*\((SELECT[^)]+WHERE[^)]+\w+\.\w+[^)]+)\)\s*(?:AS\s+\w+)?/gi;
  optimized = optimized.replace(correlatedPattern, (match, subquery) => {
    queryLogger.info(
      {
        optimization: 'correlatedSubquery',
        suggestion: 'Convert to JOIN for better performance',
        pattern: subquery.substring(0, 100) + '...',
      },
      'Correlated subquery detected'
    );
    return match; // 暫時保持原樣，避免破壞查詢
  });

  return optimized;
}

// 提取子查詢的列名
function extractSubqueryColumn(subquery: string): string {
  const match = subquery.match(/SELECT\s+(\w+\.?\w*)/i);
  return match ? match[1] : 'id';
}

// 預估查詢成本
export function estimateQueryCost(sql: string): number {
  let cost = 0;
  const sqlLower = sql.toLowerCase();

  // 基礎成本
  cost += 10;

  // JOIN 成本
  const joinCount = (sqlLower.match(/join/g) || []).length;
  cost += joinCount * 100;

  // 子查詢成本
  const subqueryCount = (sqlLower.match(/\(select/g) || []).length;
  cost += subqueryCount * 200;

  // 大表掃描成本
  if (sqlLower.includes('record_history') && !sqlLower.includes('limit')) {
    cost += 1000;
  }
  if (sqlLower.includes('record_transfer') && !sqlLower.includes('where')) {
    cost += 800;
  }

  // GROUP BY 成本
  if (sqlLower.includes('group by')) {
    cost += 150;
  }

  // ORDER BY 成本
  if (sqlLower.includes('order by')) {
    cost += 100;
  }

  // DISTINCT 成本
  if (sqlLower.includes('distinct')) {
    cost += 200;
  }

  // 沒有 WHERE 子句的懲罰
  if (!sqlLower.includes('where')) {
    cost *= 2;
  }

  // 有 LIMIT 的獎勵
  if (sqlLower.includes('limit')) {
    cost *= 0.7;
  }

  return Math.round(cost);
}

// ===== 從 query-plan-analyzer.ts 整合的功能 =====

// 主要查詢分析函數
export async function analyzeQueryWithPlan(
  sql: string,
  question?: string
): Promise<QueryAnalysisResult> {
  try {
    // 先進行 SQL 優化
    const optimizedQuery = question ? optimizeSQL(sql, question) : sql;

    // 創建 Supabase 客戶端
    const supabase = await createClient();

    // 獲取執行計劃
    const { data: planData, error } = await supabase.rpc('analyze_query_performance', {
      p_sql: optimizedQuery,
    });

    if (error) {
      queryLogger.error(
        {
          operation: 'analyzeQueryPlan',
          error: error.message,
          code: error.code,
          sql: optimizedQuery.substring(0, 200) + '...',
        },
        'Failed to get query plan'
      );
      return {
        originalQuery: sql,
        optimizedQuery,
        performanceScore: 50,
      };
    }

    // 解析執行計劃
    const executionPlan = parseExecutionPlan(planData || []);

    // 識別瓶頸
    const bottlenecks = identifyBottlenecks(executionPlan);

    // 生成建議
    const recommendations = generateOptimizationRecommendations(sql, executionPlan, bottlenecks);

    // 計算性能分數
    const performanceScore = calculatePerformanceScore(executionPlan, bottlenecks);

    // 估算改進幅度
    const estimatedImprovement =
      sql !== optimizedQuery
        ? Math.round((1 - estimateQueryCost(optimizedQuery) / estimateQueryCost(sql)) * 100)
        : 0;

    return {
      originalQuery: sql,
      optimizedQuery,
      executionPlan,
      performanceScore,
      bottlenecks,
      recommendations,
      estimatedImprovement,
    };
  } catch (error) {
    queryLogger.error(
      {
        operation: 'analyzeQueryWithPlan',
        error: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : undefined,
      },
      'Query analysis failed'
    );
    return {
      originalQuery: sql,
      optimizedQuery: sql,
      performanceScore: 0,
    };
  }
}

// 解析執行計劃
function parseExecutionPlan(planText: string[]): QueryPlan {
  const plan: QueryPlan = {
    planType: 'Seq Scan',
    startupCost: 0,
    totalCost: 1000,
    planRows: 1000,
    planWidth: 100,
  };

  for (const line of planText) {
    if (line.includes('Seq Scan')) {
      plan.planType = 'Seq Scan';
      const tableMatch = line.match(/on (\w+)/);
      if (tableMatch) plan.relationName = tableMatch[1];
    } else if (line.includes('Index Scan')) {
      plan.planType = 'Index Scan';
      const indexMatch = line.match(/using (\w+)/);
      if (indexMatch) plan.indexName = indexMatch[1];
    }

    const costMatch = line.match(/cost=(\d+\.?\d*)\.\.(\d+\.?\d*)/);
    if (costMatch) {
      plan.startupCost = parseFloat(costMatch[1]);
      plan.totalCost = parseFloat(costMatch[2]);
    }

    const rowsMatch = line.match(/rows=(\d+)/);
    if (rowsMatch) plan.planRows = parseInt(rowsMatch[1]);
  }

  return plan;
}

// 識別性能瓶頸
function identifyBottlenecks(plan: QueryPlan): Bottleneck[] {
  const bottlenecks: Bottleneck[] = [];

  // 檢查全表掃描
  if (plan.planType === 'Seq Scan' && plan.planRows > 10000) {
    bottlenecks.push({
      type: 'full_table_scan',
      severity: plan.planRows > 100000 ? 'critical' : 'high',
      description: `Full table scan on ${plan.relationName || 'unknown table'} with ${plan.planRows} rows`,
      location: plan.relationName || 'unknown',
      impact: Math.min(90, Math.floor(plan.planRows / 1000)),
    });
  }

  // 檢查高成本操作
  if (plan.totalCost > 10000) {
    bottlenecks.push({
      type: 'high_cost',
      severity: plan.totalCost > 50000 ? 'critical' : 'high',
      description: `High cost operation: ${plan.totalCost.toFixed(2)}`,
      location: plan.planType,
      impact: Math.min(80, Math.floor(plan.totalCost / 1000)),
    });
  }

  // 檢查緩存命中率
  if (plan.buffers && plan.buffers.shared.read > plan.buffers.shared.hit) {
    bottlenecks.push({
      type: 'low_cache_hit',
      severity: 'medium',
      description: 'Low buffer cache hit rate',
      location: 'Buffer Cache',
      impact: 40,
    });
  }

  return bottlenecks;
}

// 生成優化建議
function generateOptimizationRecommendations(
  sql: string,
  plan: QueryPlan,
  bottlenecks: Bottleneck[]
): Recommendation[] {
  const recommendations: Recommendation[] = [];

  for (const bottleneck of bottlenecks) {
    switch (bottleneck.type) {
      case 'full_table_scan':
        const whereMatch = sql.match(/WHERE\s+(\w+)\s*=|WHERE\s+(\w+)\s+LIKE/i);
        if (whereMatch) {
          const column = whereMatch[1] || whereMatch[2];
          recommendations.push({
            type: 'add_index',
            priority: 'high',
            description: `Create index on ${bottleneck.location}.${column}`,
            implementation: `CREATE INDEX idx_${bottleneck.location}_${column} ON ${bottleneck.location} (${column});`,
            estimatedGain: 70,
          });
        }
        break;

      case 'high_cost':
        if (!sql.toLowerCase().includes('limit')) {
          recommendations.push({
            type: 'add_limit',
            priority: 'medium',
            description: 'Add LIMIT clause to reduce result set',
            implementation: 'Add "LIMIT 100" to your query',
            estimatedGain: 50,
          });
        }
        break;
    }
  }

  // 檢查 SELECT *
  if (sql.match(/SELECT\s+\*/i)) {
    recommendations.push({
      type: 'rewrite_query',
      priority: 'low',
      description: 'Select only required columns instead of SELECT *',
      implementation: 'Replace SELECT * with specific column names',
      estimatedGain: 20,
    });
  }

  return recommendations;
}

// 計算性能分數
function calculatePerformanceScore(plan: QueryPlan, bottlenecks: Bottleneck[]): number {
  let score = 100;

  // 基於成本扣分
  if (plan.totalCost > 1000) score -= 10;
  if (plan.totalCost > 5000) score -= 20;
  if (plan.totalCost > 10000) score -= 30;

  // 基於瓶頸嚴重程度扣分
  for (const bottleneck of bottlenecks) {
    switch (bottleneck.severity) {
      case 'critical':
        score -= 25;
        break;
      case 'high':
        score -= 15;
        break;
      case 'medium':
        score -= 10;
        break;
      case 'low':
        score -= 5;
        break;
    }
  }

  return Math.max(0, Math.min(100, score));
}

// 格式化建議為用戶友好的文本
export function formatRecommendations(recommendations: Recommendation[]): string {
  if (recommendations.length === 0) {
    return 'Your query is well optimized!';
  }

  const sorted = recommendations.sort((a, b) => {
    const priorityOrder = { critical: 0, high: 1, medium: 2, low: 3 };
    return priorityOrder[a.priority] - priorityOrder[b.priority];
  });

  let text = 'Query Optimization Recommendations:\n\n';

  sorted.forEach((rec, index) => {
    text += `${index + 1}. [${rec.priority.toUpperCase()}] ${rec.description}\n`;
    text += `   Implementation: ${rec.implementation}\n`;
    text += `   Estimated Performance Gain: ${rec.estimatedGain}%\n\n`;
  });

  return text;
}

// 生成性能報告
export function generatePerformanceReport(analysis: QueryAnalysisResult): string {
  let report = '=== Query Performance Analysis Report ===\n\n';

  report += `Performance Score: ${analysis.performanceScore || 0}/100\n`;
  report += `Estimated Improvement Potential: ${analysis.estimatedImprovement || 0}%\n\n`;

  if (analysis.bottlenecks && analysis.bottlenecks.length > 0) {
    report += 'Identified Bottlenecks:\n';
    analysis.bottlenecks.forEach(bottleneck => {
      report += `- [${bottleneck.severity.toUpperCase()}] ${bottleneck.description}\n`;
    });
    report += '\n';
  }

  if (analysis.recommendations) {
    report += formatRecommendations(analysis.recommendations);
  }

  if (analysis.optimizedQuery && analysis.optimizedQuery !== analysis.originalQuery) {
    report += '\nOptimized Query:\n```sql\n' + analysis.optimizedQuery + '\n```\n';
  }

  return report;
}
