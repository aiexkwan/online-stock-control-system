/**
 * 增強版用戶行為追蹤器
 * 支援混合儲存方案：內存 + localStorage + Supabase
 */

import { createClient } from '@/app/utils/supabase/client';

interface StoredBehavior {
  currentPath: string;
  visitHistory: string[];
  lastVisitTime: number;
  frequency: Record<string, number>;
  patterns: Record<string, Record<string, number>>; // from_path -> to_path -> count
}

interface PredictedPath {
  path: string;
  probability: number;
  visitCount: number;
}

export class EnhancedUserBehaviorTracker {
  private supabase = createClient();
  private memoryCache = new Map<string, StoredBehavior>();
  private readonly STORAGE_KEY_PREFIX = 'nav_behavior_';
  private readonly HISTORY_LIMIT = 100;
  private readonly LOCAL_STORAGE_LIMIT = 50; // localStorage 只保留最近 50 條
  private sessionId = this.generateSessionId();
  private syncQueue: Array<() => Promise<void>> = [];
  private isSyncing = false;

  constructor() {
    // 從 localStorage 加載數據
    this.loadFromLocalStorage();

    // 定期同步到數據庫（每 30 秒）
    setInterval(() => this.syncToDatabase(), 30000);

    // 頁面卸載時同步
    if (typeof window !== 'undefined') {
      window.addEventListener('beforeunload', () => {
        this.syncToDatabase(true); // 強制同步
      });
    }
  }

  /**
   * 追蹤用戶導航
   */
  async trackNavigation(userId: string, path: string, timeSpent?: number): Promise<void> {
    const previousPath = this.getCurrentPath(userId);

    // 1. 更新內存緩存（立即生效）
    this.updateMemoryCache(userId, path);

    // 2. 更新 localStorage（快速持久化）
    this.updateLocalStorage(userId);

    // 3. 加入同步隊列（異步同步到數據庫）
    this.queueDatabaseSync(async () => {
      // 記錄導航歷史
      await this.supabase.from('user_navigation_history').insert({
        user_id: userId,
        path,
        session_id: this.sessionId,
        device_type: this.getDeviceType(),
      });

      // 更新統計
      await this.supabase.rpc('increment_navigation_stats', {
        p_user_id: userId,
        p_path: path,
        p_time_spent: timeSpent,
      });

      // 記錄轉換模式
      if (previousPath && previousPath !== path) {
        await this.supabase.rpc('track_navigation_transition', {
          p_user_id: userId,
          p_from_path: previousPath,
          p_to_path: path,
        });
      }
    });
  }

  /**
   * 預測下一步導航
   */
  async predictNextPaths(userId: string): Promise<PredictedPath[]> {
    const currentPath = this.getCurrentPath(userId);
    if (!currentPath) return [];

    // 1. 從內存緩存獲取快速預測
    const memoryPredictions = this.getMemoryPredictions(userId, currentPath);

    // 2. 如果需要更準確的預測，從數據庫獲取
    if (memoryPredictions.length < 3) {
      try {
        const { data } = await this.supabase.rpc('get_predicted_next_paths', {
          p_user_id: userId,
          p_current_path: currentPath,
          p_limit: 5,
        });

        if (data && data.length > 0) {
          return data.map((item: any) => ({
            path: item.path,
            probability: item.probability,
            visitCount: item.visit_count || item.visitCount || 0
          }));
        }
      } catch (error) {
        console.error('Failed to get predictions from database:', error);
      }
    }

    return memoryPredictions;
  }

  /**
   * 從 localStorage 加載數據
   */
  private loadFromLocalStorage(): void {
    if (typeof window === 'undefined') return;

    try {
      const keys = Object.keys(localStorage).filter(k => k.startsWith(this.STORAGE_KEY_PREFIX));

      keys.forEach(key => {
        const userId = key.replace(this.STORAGE_KEY_PREFIX, '');
        const stored = localStorage.getItem(key);

        if (stored) {
          const data = JSON.parse(stored) as StoredBehavior;
          this.memoryCache.set(userId, data);
        }
      });
    } catch (error) {
      console.error('Failed to load from localStorage:', error);
    }
  }

  /**
   * 更新 localStorage
   */
  private updateLocalStorage(userId: string): void {
    if (typeof window === 'undefined') return;

    try {
      const behavior = this.memoryCache.get(userId);
      if (!behavior) return;

      // 限制歷史記錄長度
      const limitedBehavior: StoredBehavior = {
        ...behavior,
        visitHistory: behavior.visitHistory.slice(-this.LOCAL_STORAGE_LIMIT),
        frequency: this.limitObject(behavior.frequency, 20),
        patterns: this.limitNestedObject(behavior.patterns, 10),
      };

      localStorage.setItem(this.STORAGE_KEY_PREFIX + userId, JSON.stringify(limitedBehavior));
    } catch (error) {
      console.error('Failed to save to localStorage:', error);
      // 如果 localStorage 滿了，清理舊數據
      this.cleanupLocalStorage();
    }
  }

  /**
   * 更新內存緩存
   */
  private updateMemoryCache(userId: string, path: string): void {
    const behavior = this.memoryCache.get(userId) || {
      currentPath: path,
      visitHistory: [],
      lastVisitTime: Date.now(),
      frequency: {},
      patterns: {},
    };

    // 更新歷史
    behavior.visitHistory.push(path);
    if (behavior.visitHistory.length > this.HISTORY_LIMIT) {
      behavior.visitHistory.shift();
    }

    // 更新頻率
    behavior.frequency[path] = (behavior.frequency[path] || 0) + 1;

    // 更新轉換模式
    if (behavior.currentPath && behavior.currentPath !== path) {
      if (!behavior.patterns[behavior.currentPath]) {
        behavior.patterns[behavior.currentPath] = {};
      }
      behavior.patterns[behavior.currentPath][path] =
        (behavior.patterns[behavior.currentPath][path] || 0) + 1;
    }

    behavior.currentPath = path;
    behavior.lastVisitTime = Date.now();

    this.memoryCache.set(userId, behavior);
  }

  /**
   * 從內存獲取預測
   */
  private getMemoryPredictions(userId: string, currentPath: string): PredictedPath[] {
    const behavior = this.memoryCache.get(userId);
    if (!behavior) return [];

    const predictions: PredictedPath[] = [];

    // 基於轉換模式
    const patterns = behavior.patterns[currentPath] || {};
    const totalTransitions = Object.values(patterns).reduce((sum, count) => sum + count, 0);

    Object.entries(patterns).forEach(([path, count]) => {
      predictions.push({
        path,
        probability: count / totalTransitions,
        visitCount: behavior.frequency[path] || 0,
      });
    });

    // 如果沒有轉換模式，使用頻率
    if (predictions.length === 0) {
      const totalVisits = Object.values(behavior.frequency).reduce((sum, count) => sum + count, 0);

      Object.entries(behavior.frequency)
        .filter(([path]) => path !== currentPath)
        .forEach(([path, count]) => {
          predictions.push({
            path,
            probability: (count / totalVisits) * 0.5, // 降低權重
            visitCount: count,
          });
        });
    }

    // 排序並返回前 5 個
    return predictions.sort((a, b) => b.probability - a.probability).slice(0, 5);
  }

  /**
   * 加入數據庫同步隊列
   */
  private queueDatabaseSync(syncFn: () => Promise<void>): void {
    this.syncQueue.push(syncFn);
    this.processSyncQueue();
  }

  /**
   * 處理同步隊列
   */
  private async processSyncQueue(): Promise<void> {
    if (this.isSyncing || this.syncQueue.length === 0) return;

    this.isSyncing = true;

    while (this.syncQueue.length > 0) {
      const syncFn = this.syncQueue.shift();
      if (syncFn) {
        try {
          await syncFn();
        } catch (error) {
          console.error('Sync error:', error);
          // 失敗的操作可以選擇重新加入隊列或丟棄
        }
      }
    }

    this.isSyncing = false;
  }

  /**
   * 同步到數據庫
   */
  private async syncToDatabase(force = false): Promise<void> {
    if (!force && this.syncQueue.length === 0) return;

    await this.processSyncQueue();
  }

  /**
   * 獲取當前路徑
   */
  private getCurrentPath(userId: string): string | null {
    const behavior = this.memoryCache.get(userId);
    return behavior?.currentPath || null;
  }

  /**
   * 獲取設備類型
   */
  private getDeviceType(): string {
    if (typeof window === 'undefined') return 'unknown';

    const width = window.innerWidth;
    if (width < 768) return 'mobile';
    if (width < 1024) return 'tablet';
    return 'desktop';
  }

  /**
   * 生成會話 ID
   */
  private generateSessionId(): string {
    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
  }

  /**
   * 清理 localStorage
   */
  private cleanupLocalStorage(): void {
    try {
      const keys = Object.keys(localStorage)
        .filter(k => k.startsWith(this.STORAGE_KEY_PREFIX))
        .sort((a, b) => {
          const timeA = JSON.parse(localStorage.getItem(a) || '{}').lastVisitTime || 0;
          const timeB = JSON.parse(localStorage.getItem(b) || '{}').lastVisitTime || 0;
          return timeA - timeB;
        });

      // 刪除最舊的一半
      const toRemove = keys.slice(0, Math.floor(keys.length / 2));
      toRemove.forEach(key => localStorage.removeItem(key));
    } catch (error) {
      console.error('Failed to cleanup localStorage:', error);
    }
  }

  /**
   * 限制對象大小
   */
  private limitObject(obj: Record<string, number>, limit: number): Record<string, number> {
    const entries = Object.entries(obj)
      .sort(([, a], [, b]) => b - a)
      .slice(0, limit);

    return Object.fromEntries(entries);
  }

  /**
   * 限制嵌套對象大小
   */
  private limitNestedObject(
    obj: Record<string, Record<string, number>>,
    limit: number
  ): Record<string, Record<string, number>> {
    const result: Record<string, Record<string, number>> = {};

    Object.entries(obj).forEach(([key, value]) => {
      result[key] = this.limitObject(value, limit);
    });

    return result;
  }

  /**
   * 預加載用戶歷史數據
   */
  async preloadUserHistory(userId: string): Promise<void> {
    try {
      // 從數據庫加載最近 30 天的數據
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

      const [historyResult, statsResult] = await Promise.all([
        this.supabase
          .from('user_navigation_history')
          .select('path, visited_at')
          .eq('user_id', userId)
          .gte('visited_at', thirtyDaysAgo.toISOString())
          .order('visited_at', { ascending: false })
          .limit(200),

        this.supabase
          .from('user_navigation_stats')
          .select('path, visit_count')
          .eq('user_id', userId)
          .order('visit_count', { ascending: false })
          .limit(50),
      ]);

      if (historyResult.data && statsResult.data) {
        // 合併數據到內存緩存
        this.mergeHistoryData(userId, historyResult.data, statsResult.data);
      }
    } catch (error) {
      console.error('Failed to preload user history:', error);
    }
  }

  /**
   * 合併歷史數據
   */
  private mergeHistoryData(
    userId: string,
    history: Record<string, unknown>[],
    stats: Record<string, unknown>[]
  ): void {
    const behavior = this.memoryCache.get(userId) || {
      currentPath: '',
      visitHistory: [],
      lastVisitTime: Date.now(),
      frequency: {},
      patterns: {},
    };

    // 合併頻率數據
    stats.forEach(stat => {
      // Strategy 4: unknown + type narrowing - 安全屬性訪問
      const path = typeof stat.path === 'string' ? stat.path : '';
      const visitCount = typeof stat.visit_count === 'number' ? stat.visit_count : 0;
      if (path) {
        behavior.frequency[path] = visitCount;
      }
    });

    // 分析歷史記錄建立模式
    for (let i = 1; i < history.length; i++) {
      // Strategy 4: unknown + type narrowing - 安全歷史記錄訪問
      const fromRecord = history[i];
      const toRecord = history[i - 1];
      const from = typeof fromRecord?.path === 'string' ? fromRecord.path : '';
      const to = typeof toRecord?.path === 'string' ? toRecord.path : '';

      if (from && to && from !== to) {
        if (!behavior.patterns[from]) {
          behavior.patterns[from] = {};
        }
        const currentCount =
          typeof behavior.patterns[from][to] === 'number' ? behavior.patterns[from][to] : 0;
        behavior.patterns[from][to] = currentCount + 1;
      }
    }

    this.memoryCache.set(userId, behavior);
  }

  /**
   * 獲取統計信息
   */
  getStats(): {
    cacheSize: number;
    queueLength: number;
    sessionId: string;
  } {
    return {
      cacheSize: this.memoryCache.size,
      queueLength: this.syncQueue.length,
      sessionId: this.sessionId,
    };
  }

  /**
   * 獲取用戶最常訪問的路徑
   */
  async getFrequentPaths(userId: string, limit: number = 3): Promise<string[]> {
    // 先從內存緩存獲取
    const behavior = this.memoryCache.get(userId);
    if (behavior && Object.keys(behavior.frequency).length >= limit) {
      const sorted = Object.entries(behavior.frequency)
        .sort(([, a], [, b]) => b - a)
        .slice(0, limit)
        .map(([path]) => path);

      if (sorted.length >= limit) {
        return sorted;
      }
    }

    // 如果內存數據不足，從數據庫獲取
    try {
      const { data } = await this.supabase
        .from('user_navigation_stats')
        .select('path')
        .eq('user_id', userId)
        .order('visit_count', { ascending: false })
        .limit(limit);

      return data?.map(item => item.path) || [];
    } catch (error) {
      console.error('Failed to get frequent paths:', error);
      return [];
    }
  }

  /**
   * 獲取用戶在特定時間段的使用模式
   */
  async getTimeBasedPatterns(userId: string): Promise<{
    hourlyPatterns: Record<number, string[]>;
    mostActiveHours: number[];
  }> {
    try {
      // 從數據庫獲取最近 30 天的歷史
      const { data } = await this.supabase
        .from('user_navigation_history')
        .select('path, visited_at')
        .eq('user_id', userId)
        .gte('visited_at', new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString())
        .order('visited_at', { ascending: false });

      if (!data || data.length === 0) {
        return { hourlyPatterns: {}, mostActiveHours: [] };
      }

      // 分析每個小時的訪問模式
      const hourlyPatterns: Record<number, Record<string, number>> = {};
      const hourCounts: Record<number, number> = {};

      data.forEach(record => {
        const hour = new Date(record.visited_at || new Date()).getHours();

        if (!hourlyPatterns[hour]) {
          hourlyPatterns[hour] = {};
        }
        if (!hourCounts[hour]) {
          hourCounts[hour] = 0;
        }

        hourlyPatterns[hour][record.path] = (hourlyPatterns[hour][record.path] || 0) + 1;
        hourCounts[hour]++;
      });

      // 轉換為最常訪問的路徑
      const result: Record<number, string[]> = {};
      Object.entries(hourlyPatterns).forEach(([hour, paths]) => {
        result[Number(hour)] = Object.entries(paths)
          .sort(([, a], [, b]) => b - a)
          .slice(0, 3)
          .map(([path]) => path);
      });

      // 找出最活躍的時間
      const mostActiveHours = Object.entries(hourCounts)
        .sort(([, a], [, b]) => b - a)
        .slice(0, 3)
        .map(([hour]) => Number(hour));

      return { hourlyPatterns: result, mostActiveHours };
    } catch (error) {
      console.error('Failed to get time-based patterns:', error);
      return { hourlyPatterns: {}, mostActiveHours: [] };
    }
  }
}

// 創建單例實例
export const enhancedBehaviorTracker = new EnhancedUserBehaviorTracker();
