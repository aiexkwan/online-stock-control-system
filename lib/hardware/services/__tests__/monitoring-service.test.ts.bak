/**
 * Tests for HardwareMonitoringService
 */

import { HardwareMonitoringService } from '../monitoring-service';
import {
  DeviceStatus,
  HardwareEvent,
  AlertThresholds
} from '../../types';

describe('HardwareMonitoringService', () => {
  let service: HardwareMonitoringService;
  let mockDevice: DeviceStatus;

  beforeEach(() => {
    service = new HardwareMonitoringService();

    mockDevice = {
      deviceId: 'printer-001',
      deviceName: 'Test Printer',
      type: 'printer',
      deviceType: 'printer',
      status: 'online',
      isConnected: true,
      lastSeen: new Date().toISOString(),
      capabilities: {
        canPrint: true,
        canScan: false,
        hasQueue: true
      }
    } as DeviceStatus;

    // Mock timers
    jest.useFakeTimers();
  });

  afterEach(() => {
    service.stopMonitoring();
    jest.clearAllTimers();
    jest.useRealTimers();
  });

  describe('Device Registration', () => {
    it('should register a device successfully', () => {
      const eventSpy = jest.fn();
      service.on('device.registered', eventSpy);

      service.registerDevice(mockDevice);

      expect(service.getDeviceStatus('printer-001')).toEqual(mockDevice);
      expect(eventSpy).toHaveBeenCalledWith(mockDevice);
    });

    it('should initialize metrics when registering device', () => {
      service.registerDevice(mockDevice);

      const stats = service.getUsageStats('printer-001');
      // Now successCount is properly returned by calculateMetrics
      expect(stats).toEqual({
        totalUsage: 0,
        successCount: 0,
        errorCount: 0,
        averageResponseTime: 0,
        lastUsed: 'Never'
      });
    });

    it('should unregister a device', () => {
      const eventSpy = jest.fn();
      service.on('device.unregistered', eventSpy);

      service.registerDevice(mockDevice);
      service.unregisterDevice('printer-001');

      expect(service.getDeviceStatus('printer-001')).toBeUndefined();
      expect(eventSpy).toHaveBeenCalledWith({ deviceId: 'printer-001' });
    });

    it('should return all devices status', () => {
      const device2: DeviceStatus = {
        ...mockDevice,
        deviceId: 'scanner-001',
        deviceType: 'scanner'
      };

      service.registerDevice(mockDevice);
      service.registerDevice(device2);

      const allDevices = service.getAllDevicesStatus();
      expect(allDevices.size).toBe(2);
      expect(allDevices.get('printer-001')).toEqual(mockDevice);
      expect(allDevices.get('scanner-001')).toEqual(device2);
    });
  });

  describe('Event Recording', () => {
    beforeEach(() => {
      service.registerDevice(mockDevice);
    });

    it('should record hardware events', () => {
      const event: HardwareEvent = {
        type: 'job.completed',
        deviceId: 'printer-001',
        timestamp: new Date().toISOString(),
        data: { jobId: 'job-123' }
      };

      const eventSpy = jest.fn();
      service.on('job.completed', eventSpy);

      service.recordEvent(event);

      expect(eventSpy).toHaveBeenCalledWith(event);
    });

    it('should update metrics after recording events', () => {
      // Record some successful events
      service.recordEvent({
        type: 'job.completed',
        deviceId: 'printer-001',
        timestamp: new Date().toISOString()
      });
      service.recordEvent({
        type: 'scan.success',
        deviceId: 'printer-001',
        timestamp: new Date().toISOString()
      });

      // Record an error event
      service.recordEvent({
        type: 'job.failed',
        deviceId: 'printer-001',
        timestamp: new Date().toISOString()
      });

      const stats = service.getUsageStats('printer-001');
      expect(stats?.totalUsage).toBe(3);
      expect(stats?.successCount).toBe(2); // 2 success events (job.completed + scan.success)
      expect(stats?.errorCount).toBe(1);
    });

    it('should calculate average response time', () => {
      const startTime = new Date();
      const endTime = new Date(startTime.getTime() + 1000); // 1 second later

      service.recordEvent({
        type: 'job.started',
        deviceId: 'printer-001',
        timestamp: startTime.toISOString()
      });

      service.recordEvent({
        type: 'job.completed',
        deviceId: 'printer-001',
        timestamp: endTime.toISOString()
      });

      const stats = service.getUsageStats('printer-001');
      expect(stats?.averageResponseTime).toBe(1000);
    });

    it('should limit history to 1000 events per device', () => {
      // Record 1001 events
      for (let i = 0; i < 1001; i++) {
        service.recordEvent({
          type: 'job.completed',
          deviceId: 'printer-001',
          timestamp: new Date().toISOString(),
          data: { index: i }
        });
      }

      const stats = service.getUsageStats('printer-001');
      // getUsageStats returns metrics for all 1000 events in history,
      // but calculateMetrics only processes the last 100 events
      expect(stats?.totalUsage).toBe(1000);
    });

    it('should ignore events for unregistered devices', () => {
      const alertSpy = jest.fn();
      service.on('alert', alertSpy);

      service.recordEvent({
        type: 'job.completed',
        deviceId: 'unknown-device',
        timestamp: new Date().toISOString()
      });

      expect(alertSpy).not.toHaveBeenCalled();
    });
  });

  describe('Usage Statistics', () => {
    beforeEach(() => {
      service.registerDevice(mockDevice);
    });

    it('should return null for unknown device', () => {
      const stats = service.getUsageStats('unknown-device');
      expect(stats).toBeNull();
    });

    it('should filter statistics by time period', () => {
      const now = new Date();
      const hourAgo = new Date(now.getTime() - 60 * 60 * 1000);
      const twoHoursAgo = new Date(now.getTime() - 2 * 60 * 60 * 1000);

      // Old event
      service.recordEvent({
        type: 'job.completed',
        deviceId: 'printer-001',
        timestamp: twoHoursAgo.toISOString()
      });

      // Recent event
      service.recordEvent({
        type: 'job.completed',
        deviceId: 'printer-001',
        timestamp: now.toISOString()
      });

      const stats = service.getUsageStats('printer-001', {
        start: hourAgo,
        end: now
      });

      expect(stats?.totalUsage).toBe(1); // Only recent event
    });

    it('should handle empty history', () => {
      const stats = service.getUsageStats('printer-001');
      expect(stats).toBeDefined();
      expect(stats?.totalUsage).toBe(0);
      expect(stats?.lastUsed).toBe('Never');
    });
  });

  describe('Monitoring', () => {
    beforeEach(() => {
      service.registerDevice(mockDevice);
    });

    it('should start and stop monitoring', () => {
      service.startMonitoring(1000);
      expect(service['isMonitoring']).toBe(true);

      service.stopMonitoring();
      expect(service['isMonitoring']).toBe(false);
    });

    it('should not start monitoring twice', () => {
      service.startMonitoring(1000);
      service.startMonitoring(1000);

      // Should only set one interval
      expect(jest.getTimerCount()).toBe(1);
    });

    it('should perform health checks', () => {
      const alertSpy = jest.fn();
      service.on('alert', alertSpy);

      // Record an event
      service.recordEvent({
        type: 'job.completed',
        deviceId: 'printer-001',
        timestamp: new Date().toISOString()
      });

      // Start monitoring
      service.startMonitoring(1000);

      // Fast forward 6 minutes
      jest.advanceTimersByTime(6 * 60 * 1000);

      // Device should be marked as offline
      const device = service.getDeviceStatus('printer-001');
      expect(device?.status).toBe('offline');
      expect(alertSpy).toHaveBeenCalledWith(
        expect.objectContaining({
          level: 'warning',
          message: 'Device appears to be offline'
        })
      );
    });

    it('should update last seen during health check', () => {
      service.startMonitoring(1000);

      const beforeTime = service.getDeviceStatus('printer-001')?.lastSeen;

      jest.advanceTimersByTime(1000);

      const afterTime = service.getDeviceStatus('printer-001')?.lastSeen;
      expect(afterTime).not.toBe(beforeTime);
    });
  });

  describe('Alerts', () => {
    beforeEach(() => {
      service.registerDevice(mockDevice);
    });

    it('should emit alert for high error rate', () => {
      const alertSpy = jest.fn();
      service.on('alert', alertSpy);

      // Set low error threshold
      service.setAlertThresholds({ errorRate: 10 });

      // Record mostly errors
      for (let i = 0; i < 8; i++) {
        service.recordEvent({
          type: 'job.failed',
          deviceId: 'printer-001',
          timestamp: new Date().toISOString()
        });
      }

      // Record 2 successes (20% success rate = 80% error rate)
      for (let i = 0; i < 2; i++) {
        service.recordEvent({
          type: 'job.completed',
          deviceId: 'printer-001',
          timestamp: new Date().toISOString()
        });
      }

      expect(alertSpy).toHaveBeenCalledWith(
        expect.objectContaining({
          level: 'error',
          deviceId: 'printer-001',
          message: expect.stringContaining('High error rate detected')
        })
      );
    });

    it('should emit alert for slow response time', () => {
      const alertSpy = jest.fn();
      service.on('alert', alertSpy);

      // Set response time threshold
      service.setAlertThresholds({ responseTime: 1000 });

      // Record slow job
      const startTime = new Date();
      const endTime = new Date(startTime.getTime() + 2000); // 2 seconds

      service.recordEvent({
        type: 'job.started',
        deviceId: 'printer-001',
        timestamp: startTime.toISOString()
      });

      service.recordEvent({
        type: 'job.completed',
        deviceId: 'printer-001',
        timestamp: endTime.toISOString()
      });

      expect(alertSpy).toHaveBeenCalledWith(
        expect.objectContaining({
          level: 'warning',
          message: expect.stringContaining('Slow response time')
        })
      );
    });

    it('should handle alert subscription and unsubscription', () => {
      const callback = jest.fn();
      const unsubscribe = service.onAlert(callback);

      service.recordEvent({
        type: 'device.disconnected',
        deviceId: 'printer-001',
        timestamp: new Date().toISOString()
      });

      // Alert emitted manually for testing
      service['emitAlert']('error', 'printer-001', 'Test alert');

      expect(callback).toHaveBeenCalledWith(
        expect.objectContaining({
          level: 'error',
          message: 'Test alert'
        })
      );

      // Unsubscribe
      unsubscribe();
      callback.mockClear();

      service['emitAlert']('error', 'printer-001', 'Another alert');
      expect(callback).not.toHaveBeenCalled();
    });

    it('should merge alert thresholds', () => {
      const initial: AlertThresholds = {
        errorRate: 10,
        responseTime: 5000,
        queueSize: 50
      };

      service.setAlertThresholds(initial);

      // Partial update
      service.setAlertThresholds({ errorRate: 5 });

      const current = service['alertThresholds'];
      expect(current.errorRate).toBe(5);
      expect(current.responseTime).toBe(5000);
      expect(current.queueSize).toBe(50);
    });
  });

  describe('Dashboard Data', () => {
    it('should provide dashboard summary', () => {
      // Register multiple devices
      service.registerDevice(mockDevice);
      service.registerDevice({
        ...mockDevice,
        deviceId: 'printer-002',
        deviceType: 'printer',
        status: 'error'
      } as DeviceStatus);
      service.registerDevice({
        ...mockDevice,
        deviceId: 'scanner-001',
        deviceType: 'scanner',
        status: 'offline'
      } as DeviceStatus);

      // Record some events
      service.recordEvent({
        type: 'job.completed',
        deviceId: 'printer-001',
        timestamp: new Date().toISOString()
      });

      const dashboard = service.getDashboardData();

      expect(dashboard.totalDevices).toBe(3);
      expect(dashboard.onlineDevices).toBe(1);
      expect(dashboard.errorDevices).toBe(1);
      expect(dashboard.devices).toHaveLength(3);
      expect(dashboard.overallMetrics.totalUsage).toBeGreaterThan(0);
    });

    it('should handle empty dashboard', () => {
      const dashboard = service.getDashboardData();

      expect(dashboard.totalDevices).toBe(0);
      expect(dashboard.onlineDevices).toBe(0);
      expect(dashboard.errorDevices).toBe(0);
      expect(dashboard.devices).toHaveLength(0);
      expect(dashboard.overallMetrics.averageSuccessRate).toBe(0);
    });

    it('should calculate average success rate correctly', () => {
      // Register two devices
      service.registerDevice(mockDevice);
      service.registerDevice({
        ...mockDevice,
        deviceId: 'printer-002',
        deviceType: 'printer'
      } as DeviceStatus);

      // Device 1: 80% success
      for (let i = 0; i < 8; i++) {
        service.recordEvent({
          type: 'job.completed',
          deviceId: 'printer-001',
          timestamp: new Date().toISOString()
        });
      }
      for (let i = 0; i < 2; i++) {
        service.recordEvent({
          type: 'job.failed',
          deviceId: 'printer-001',
          timestamp: new Date().toISOString()
        });
      }

      // Device 2: 60% success
      for (let i = 0; i < 6; i++) {
        service.recordEvent({
          type: 'job.completed',
          deviceId: 'printer-002',
          timestamp: new Date().toISOString()
        });
      }
      for (let i = 0; i < 4; i++) {
        service.recordEvent({
          type: 'job.failed',
          deviceId: 'printer-002',
          timestamp: new Date().toISOString()
        });
      }

      const dashboard = service.getDashboardData();
      // Average of 80% and 60% = 70%
      expect(dashboard.overallMetrics.averageSuccessRate).toBe(70);
    });
  });
});
