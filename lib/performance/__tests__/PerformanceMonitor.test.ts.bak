/**
 * Simple Performance Monitor Tests
 * Testing simplified performance monitoring functionality
 */

import { SimplePerformanceMonitor } from '../SimplePerformanceMonitor';

describe('SimplePerformanceMonitor', () => {
  let monitor: SimplePerformanceMonitor;

  beforeEach(() => {
    monitor = SimplePerformanceMonitor.getInstance();
    // Reset internal state for clean tests
    monitor['metrics'].clear();
    monitor['alerts'] = [];
  });

  afterEach(() => {
    // Clean up
    monitor['metrics'].clear();
    monitor['alerts'] = [];
  });

  describe('Basic Functionality', () => {
    it('should be a singleton', () => {
      const monitor1 = SimplePerformanceMonitor.getInstance();
      const monitor2 = SimplePerformanceMonitor.getInstance();
      expect(monitor1).toBe(monitor2);
    });

    it('should record basic metrics', () => {
      monitor.recordMetric('test_metric', 100, 'test');

      const stats = monitor.getBasicStats('test_metric');
      expect(stats).not.toBeNull();
      expect(stats!.avg).toBe(100);
      expect(stats!.count).toBe(1);
      expect(stats!.total).toBe(100);
      expect(stats!.min).toBe(100);
      expect(stats!.max).toBe(100);
    });

    it('should calculate correct statistics for multiple metrics', () => {
      monitor.recordMetric('api_time', 100);
      monitor.recordMetric('api_time', 200);
      monitor.recordMetric('api_time', 300);

      const stats = monitor.getBasicStats('api_time');
      expect(stats).not.toBeNull();
      expect(stats!.count).toBe(3);
      expect(stats!.total).toBe(600);
      expect(stats!.avg).toBe(200);
      expect(stats!.min).toBe(100);
      expect(stats!.max).toBe(300);
    });

    it('should return null for non-existent metrics', () => {
      const stats = monitor.getBasicStats('non_existent');
      expect(stats).toBeNull();
    });
  });

  describe('Alert System', () => {
    it('should generate alerts when thresholds are exceeded', () => {
      // Record a high value that should trigger warning threshold
      monitor.recordMetric('response_time', 800, 'api'); // Default warning is 500ms

      const alerts = monitor.getAlerts();
      expect(alerts.length).toBeGreaterThan(0);

      const warningAlert = alerts.find(a => a.type === 'warning');
      expect(warningAlert).toBeDefined();
      expect(warningAlert!.message).toContain('response_time');
    });

    it('should generate critical alerts for very high values', () => {
      // Record a very high value that should trigger critical threshold
      monitor.recordMetric('response_time', 1500, 'api'); // Default critical is 1000ms

      const alerts = monitor.getAlerts();
      expect(alerts.length).toBeGreaterThan(0);

      const criticalAlert = alerts.find(a => a.type === 'critical');
      expect(criticalAlert).toBeDefined();
      expect(criticalAlert!.message).toContain('response_time');
    });

    it('should clear old alerts after specified duration', () => {
      monitor.recordMetric('test_metric', 1500, 'test');

      let alerts = monitor.getAlerts();
      expect(alerts.length).toBeGreaterThan(0);

      // Simulate time passing by manually clearing alerts
      monitor['alerts'] = [];

      alerts = monitor.getAlerts();
      expect(alerts.length).toBe(0);
    });
  });

  describe('Memory Management', () => {
    it('should limit metrics to prevent memory leaks', () => {
      const maxMetrics = monitor['config'].maxMetrics;

      // Add more metrics than the limit
      for (let i = 0; i < maxMetrics + 10; i++) {
        monitor.recordMetric('memory_test', i);
      }

      const metrics = monitor['metrics'].get('memory_test');
      expect(metrics!.length).toBeLessThanOrEqual(maxMetrics);
    });

    it('should maintain correct statistics after pruning', () => {
      const maxMetrics = monitor['config'].maxMetrics;

      // Add metrics beyond the limit
      for (let i = 1; i <= maxMetrics + 5; i++) {
        monitor.recordMetric('pruning_test', i * 10);
      }

      const stats = monitor.getBasicStats('pruning_test');
      expect(stats).not.toBeNull();
      expect(stats!.count).toBeLessThanOrEqual(maxMetrics);
    });
  });

  describe('Categories', () => {
    it('should handle different metric categories', () => {
      monitor.recordMetric('api_call', 100, 'network');
      monitor.recordMetric('render_time', 50, 'ui');
      monitor.recordMetric('db_query', 200, 'database');

      const apiStats = monitor.getBasicStats('api_call');
      const renderStats = monitor.getBasicStats('render_time');
      const dbStats = monitor.getBasicStats('db_query');

      expect(apiStats!.avg).toBe(100);
      expect(renderStats!.avg).toBe(50);
      expect(dbStats!.avg).toBe(200);
    });
  });

  describe('Summary and Export', () => {
    it('should generate performance summary', () => {
      monitor.recordMetric('test1', 100, 'category1');
      monitor.recordMetric('test2', 200, 'category2');
      monitor.recordMetric('test1', 150, 'category1');

      const summary = monitor.getSummary();

      expect(summary.totalMetrics).toBe(3);
      expect(summary.categories).toContain('category1');
      expect(summary.categories).toContain('category2');
      expect(summary.alertCount).toBe(monitor.getAlerts().length);
    });

    it('should export data correctly', () => {
      monitor.recordMetric('export_test', 100, 'test');
      monitor.recordMetric('export_test', 200, 'test');

      const exportData = monitor.exportData();

      expect(exportData.metrics).toHaveProperty('export_test');
      expect(exportData.summary).toBeDefined();
      expect(exportData.summary.totalMetrics).toBe(2);
    });
  });

  describe('Configuration', () => {
    it('should respect log level configuration', () => {
      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();

      // Test logging (this depends on the log level)
      monitor.recordMetric('log_test', 100);

      // Clean up
      consoleSpy.mockRestore();
    });
  });

  describe('Edge Cases', () => {
    it('should handle zero and negative values', () => {
      monitor.recordMetric('zero_test', 0);
      monitor.recordMetric('negative_test', -10);

      const zeroStats = monitor.getBasicStats('zero_test');
      const negativeStats = monitor.getBasicStats('negative_test');

      expect(zeroStats!.avg).toBe(0);
      expect(negativeStats!.avg).toBe(-10);
    });

    it('should handle very large values', () => {
      const largeValue = Number.MAX_SAFE_INTEGER;
      monitor.recordMetric('large_test', largeValue);

      const stats = monitor.getBasicStats('large_test');
      expect(stats!.avg).toBe(largeValue);
    });

    it('should handle special metric names', () => {
      monitor.recordMetric('metric.with.dots', 100);
      monitor.recordMetric('metric-with-dashes', 200);
      monitor.recordMetric('metric_with_underscores', 300);

      expect(monitor.getBasicStats('metric.with.dots')!.avg).toBe(100);
      expect(monitor.getBasicStats('metric-with-dashes')!.avg).toBe(200);
      expect(monitor.getBasicStats('metric_with_underscores')!.avg).toBe(300);
    });
  });
});
