# Inventory GraphQL Schema
# 庫存和棧板相關類型定義

# 棧板類型 (from record_palletinfo)
type Pallet {
  # 基本資料
  pltNum: ID!
  productCode: String!
  product: Product!
  quantity: Int!
  location: Location
  status: PalletStatus!
  
  # 關聯數據
  transfers(
    filter: TransferFilterInput
    pagination: PaginationInput
  ): TransferConnection!
  
  history(
    pagination: PaginationInput
  ): [HistoryRecord!]!
  
  # GRN 資料
  grnNumber: String
  grn: GRN
  
  # 批次資料
  batchNumber: String
  expiryDate: DateTime
  manufactureDate: DateTime
  
  # 元數據
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User!
  lastModifiedBy: User
}

enum PalletStatus {
  ACTIVE
  VOID
  TRANSFERRED
  SHIPPED
  DAMAGED
}

# 庫存類型 (from record_inventory)
type Inventory {
  # 基本資料
  id: ID!
  productCode: String!
  product: Product!
  
  # 位置庫存
  locationQuantities: LocationInventory!
  totalQuantity: Int!
  
  # 統計
  awaitQuantity: Int!
  availableQuantity: Int!
  reservedQuantity: Int!
  
  # 元數據
  lastUpdate: DateTime!
  lastMovement: DateTime
  lastStocktake: DateTime
}

# 各位置庫存
type LocationInventory {
  injection: Int!
  pipeline: Int!
  prebook: Int!
  await: Int!
  fold: Int!
  bulk: Int!
  backcarpark: Int!
  damage: Int!
}

# 庫存摘要
type InventorySummary {
  totalQuantity: Int!
  availableQuantity: Int!
  reservedQuantity: Int!
  locationBreakdown: LocationInventory!
  lastUpdate: DateTime!
}

# 位置類型
type Location {
  id: ID!
  code: String!
  name: String!
  type: LocationType!
  warehouse: Warehouse!
  capacity: Int
  currentOccupancy: Int
  isActive: Boolean!
}

# 倉庫類型
type Warehouse {
  id: ID!
  code: String!
  name: String!
  locations: [Location!]!
  totalCapacity: Int!
  currentOccupancy: Int!
  occupancyRate: Float!
}

# GRN 類型 (from record_grn)
type GRN {
  id: ID!
  grnNumber: String!
  supplierCode: String!
  supplier: Supplier!
  
  # 詳細資料
  items: [GRNItem!]!
  totalItems: Int!
  totalQuantity: Int!
  
  # 狀態
  status: GRNStatus!
  receivedDate: DateTime!
  completedDate: DateTime
  
  # 質檢
  qcStatus: QCStatus
  qcCompletedDate: DateTime
  qcBy: User
  
  # 元數據
  createdAt: DateTime!
  createdBy: User!
}

type GRNItem {
  productCode: String!
  product: Product!
  quantity: Int!
  palletNumbers: [String!]!
  qcPassed: Boolean
  remarks: String
}

enum GRNStatus {
  PENDING
  RECEIVING
  QC_PENDING
  QC_IN_PROGRESS
  COMPLETED
  REJECTED
}

enum QCStatus {
  PENDING
  PASSED
  FAILED
  PARTIAL_PASS
}

# 連接類型（分頁）
type PalletConnection {
  edges: [PalletEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PalletEdge {
  cursor: String!
  node: Pallet!
}

type GRNConnection {
  edges: [GRNEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type GRNEdge {
  cursor: String!
  node: GRN!
}

# 過濾輸入
input PalletFilterInput {
  pltNum: String
  productCode: String
  location: String
  status: PalletStatus
  grnNumber: String
  dateRange: DateRangeInput
}

input InventoryFilterInput {
  productCode: String
  minQuantity: Int
  maxQuantity: Int
  hasAwaitQuantity: Boolean
  location: LocationType
}

input GRNFilterInput {
  grnNumber: String
  supplierCode: String
  status: GRNStatus
  qcStatus: QCStatus
  dateRange: DateRangeInput
}

# 庫存調整輸入
input StockAdjustmentInput {
  productCode: String!
  location: LocationType!
  quantity: Int!
  reason: String!
  reference: String
}

# 查詢
extend type Query {
  # 棧板查詢
  pallet(pltNum: ID!): Pallet
  pallets(
    filter: PalletFilterInput
    pagination: PaginationInput
    sort: SortInput
  ): PalletConnection!
  
  # 庫存查詢
  inventory(productCode: ID!): Inventory
  inventories(
    filter: InventoryFilterInput
    pagination: PaginationInput
  ): [Inventory!]!
  
  # 庫存統計
  inventoryStatistics(
    warehouse: String
    dateRange: DateRangeInput
  ): InventoryStatistics!
  
  # 位置查詢
  location(id: ID!): Location
  locations(
    warehouse: String
    type: LocationType
  ): [Location!]!
  
  # GRN 查詢
  grn(grnNumber: String!): GRN
  grns(
    filter: GRNFilterInput
    pagination: PaginationInput
  ): GRNConnection!
  
  # 庫存水平（GraphQL POC）
  stockLevels(
    warehouse: String
    dateRange: DateRangeInput
  ): StockLevelData!
}

# 變更
extend type Mutation {
  # 棧板管理
  createPallet(input: CreatePalletInput!): Pallet!
  voidPallet(pltNum: ID!, reason: String!): Pallet!
  updatePalletLocation(
    pltNum: ID!
    location: String!
  ): Pallet!
  
  # 庫存調整
  adjustStock(input: StockAdjustmentInput!): Inventory!
  performStocktake(
    productCode: String!
    counts: LocationInventoryInput!
  ): Inventory!
  
  # GRN 管理
  createGRN(input: CreateGRNInput!): GRN!
  updateGRNStatus(
    grnNumber: String!
    status: GRNStatus!
  ): GRN!
  completeQC(
    grnNumber: String!
    qcResults: [QCResultInput!]!
  ): GRN!
}

# 輸入類型
input CreatePalletInput {
  productCode: String!
  quantity: Int!
  location: String
  grnNumber: String
  batchNumber: String
  expiryDate: DateTime
  manufactureDate: DateTime
}

input LocationInventoryInput {
  injection: Int
  pipeline: Int
  prebook: Int
  await: Int
  fold: Int
  bulk: Int
  backcarpark: Int
  damage: Int
}

input CreateGRNInput {
  supplierCode: String!
  items: [GRNItemInput!]!
  receivedDate: DateTime!
}

input GRNItemInput {
  productCode: String!
  quantity: Int!
  palletCount: Int!
}

input QCResultInput {
  productCode: String!
  qcPassed: Boolean!
  failureReason: String
  remarks: String
}

# 庫存統計類型
type InventoryStatistics {
  totalProducts: Int!
  totalQuantity: Int!
  totalValue: Float
  averageStockLevel: Float!
  stockTurnoverRate: Float
  topProducts: [Product!]!
  lowStockProducts: [Product!]!
  expiringProducts: [Product!]!
}

# Stock Level POC 類型
type StockLevelData implements WidgetData {
  items: [StockLevelItem!]!
  totalItems: Int!
  totalQuantity: Int!
  lastUpdated: DateTime!
  refreshInterval: Int
  dataSource: String!
}

type StockLevelItem {
  productCode: String!
  productName: String!
  quantity: Int!
  location: String!
  lastUpdated: DateTime!
}