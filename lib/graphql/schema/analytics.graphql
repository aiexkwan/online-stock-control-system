# Analytics GraphQL Schema
# 分析、報表和高級統計類型定義

# 質量指標類型
type QualityMetrics implements WidgetData {
  # 整體質量分數
  overallScore: Float!
  defectRate: Float!
  firstPassYield: Float!

  # 詳細指標
  defectsByType: [DefectTypeMetric!]!
  defectsByProduct: [ProductDefectMetric!]!
  defectTrends: [TrendPoint!]!

  # 質檢統計
  totalInspections: Int!
  passedInspections: Int!
  failedInspections: Int!
  pendingInspections: Int!

  # Widget 元數據
  lastUpdated: DateTime!
  refreshInterval: Int
  dataSource: String!
}

type DefectTypeMetric {
  type: String!
  count: Int!
  percentage: Float!
  severity: DefectSeverity!
}

type ProductDefectMetric {
  productCode: String!
  product: Product!
  defectCount: Int!
  defectRate: Float!
}

enum DefectSeverity {
  MINOR
  MAJOR
  CRITICAL
}

# 效率指標類型
type EfficiencyMetrics implements WidgetData {
  # 整體效率
  overallEfficiency: Float!
  productivityIndex: Float!
  utilizationRate: Float!

  # 詳細分解
  efficiencyByDepartment: [DepartmentEfficiency!]!
  efficiencyByShift: [ShiftEfficiency!]!
  efficiencyTrends: [TrendPoint!]!

  # 績效指標
  averageTaskTime: Float!
  tasksPerHour: Float!
  idleTimePercentage: Float!

  # Widget 元數據
  lastUpdated: DateTime!
  refreshInterval: Int
  dataSource: String!
}

type DepartmentEfficiency {
  department: String!
  efficiency: Float!
  headcount: Int!
  outputPerPerson: Float!
}

type ShiftEfficiency {
  shift: String!
  efficiency: Float!
  startTime: String!
  endTime: String!
}

# 趨勢分析類型
type TrendAnalysis implements WidgetData {
  # 趨勢數據
  metricName: String!
  trendData: [TrendPoint!]!

  # 統計分析
  average: Float!
  median: Float!
  standardDeviation: Float!
  trendDirection: TrendDirection!
  trendStrength: Float!

  # 預測
  forecast: [ForecastPoint!]
  confidenceInterval: ConfidenceInterval

  # Widget 元數據
  lastUpdated: DateTime!
  refreshInterval: Int
  dataSource: String!
}

type TrendPoint {
  timestamp: DateTime!
  value: Float!
  label: String
}

type ForecastPoint {
  timestamp: DateTime!
  predictedValue: Float!
  upperBound: Float!
  lowerBound: Float!
}

type ConfidenceInterval {
  level: Float!
  upperBound: Float!
  lowerBound: Float!
}

enum TrendDirection {
  INCREASING
  DECREASING
  STABLE
  VOLATILE
}

# 分佈分析類型
type DistributionAnalysis implements WidgetData {
  # 分佈數據
  metricName: String!
  distributionData: [DistributionBin!]!

  # 統計特徵
  mean: Float!
  median: Float!
  mode: Float!
  skewness: Float!
  kurtosis: Float!

  # 百分位數
  percentiles: Percentiles!
  outliers: [Outlier!]

  # Widget 元數據
  lastUpdated: DateTime!
  refreshInterval: Int
  dataSource: String!
}

type DistributionBin {
  rangeStart: Float!
  rangeEnd: Float!
  count: Int!
  percentage: Float!
}

type Percentiles {
  p10: Float!
  p25: Float!
  p50: Float!
  p75: Float!
  p90: Float!
  p95: Float!
  p99: Float!
}

type Outlier {
  value: Float!
  zScore: Float!
  entity: String
}

# 預測分析類型
type PredictiveAnalysis implements WidgetData {
  # 預測模型資訊
  modelName: String!
  modelType: ModelType!
  accuracy: Float!
  lastTrainedAt: DateTime!

  # 預測結果
  predictions: [Prediction!]!
  featureImportance: [FeatureImportance!]

  # 模型性能
  metrics: ModelMetrics!

  # Widget 元數據
  lastUpdated: DateTime!
  refreshInterval: Int
  dataSource: String!
}

type Prediction {
  targetVariable: String!
  predictedValue: Float!
  confidence: Float!
  contributingFactors: [Factor!]
}

type Factor {
  name: String!
  value: Float!
  impact: Float!
}

type FeatureImportance {
  feature: String!
  importance: Float!
  correlation: Float!
}

type ModelMetrics {
  rmse: Float
  mae: Float
  r2Score: Float
  precision: Float
  recall: Float
  f1Score: Float
}

enum ModelType {
  LINEAR_REGRESSION
  LOGISTIC_REGRESSION
  RANDOM_FOREST
  NEURAL_NETWORK
  TIME_SERIES
  CLUSTERING
}

# 系統性能類型
type SystemPerformance implements WidgetData {
  # 響應時間
  averageResponseTime: Float!
  p95ResponseTime: Float!
  p99ResponseTime: Float!

  # 吞吐量
  requestsPerSecond: Float!
  transactionsPerMinute: Float!

  # 錯誤率
  errorRate: Float!
  errorsByType: [ErrorTypeMetric!]!

  # 資源使用
  cpuUsage: Float!
  memoryUsage: Float!
  diskUsage: Float!
  networkUsage: Float!

  # 服務健康
  servicesHealth: [ServiceHealth!]!

  # Widget 元數據
  lastUpdated: DateTime!
  refreshInterval: Int
  dataSource: String!
}

type ErrorTypeMetric {
  errorType: String!
  count: Int!
  percentage: Float!
  lastOccurrence: DateTime!
}

type ServiceHealth {
  serviceName: String!
  status: ServiceStatus!
  uptime: Float!
  lastError: DateTime
  responseTime: Float!
}

enum ServiceStatus {
  HEALTHY
  DEGRADED
  UNHEALTHY
  OFFLINE
}

# 上傳統計類型
type UploadStatistics implements WidgetData {
  # 今日統計
  todayUploads: Int!
  successRate: Float!
  failureRate: Float!
  averageProcessingTime: Float!

  # 詳細分解
  uploadsByType: [UploadTypeMetric!]!
  uploadsByUser: [UserUploadMetric!]!
  errorReasons: [ErrorReason!]!

  # 趨勢
  uploadTrends: [TrendPoint!]!

  # Widget 元數據
  lastUpdated: DateTime!
  refreshInterval: Int
  dataSource: String!
}

type UploadTypeMetric {
  type: String!
  count: Int!
  successCount: Int!
  failureCount: Int!
  averageSize: Float!
}

type UserUploadMetric {
  user: User!
  uploadCount: Int!
  successRate: Float!
  lastUpload: DateTime!
}

type ErrorReason {
  reason: String!
  count: Int!
  percentage: Float!
}

# 更新統計類型
type UpdateStatistics implements WidgetData {
  # 待處理統計
  pendingCount: Int!
  completedToday: Int!
  inProgress: Int!
  failed: Int!

  # 詳細分解
  updatesByType: [UpdateTypeMetric!]!
  updatesByStatus: [UpdateStatusMetric!]!
  averageCompletionTime: Float!

  # 積壓分析
  backlogTrend: [TrendPoint!]!
  estimatedClearTime: Float!

  # Widget 元數據
  lastUpdated: DateTime!
  refreshInterval: Int
  dataSource: String!
}

type UpdateTypeMetric {
  type: String!
  count: Int!
  averageTime: Float!
  successRate: Float!
}

type UpdateStatusMetric {
  status: String!
  count: Int!
  percentage: Float!
}

# 分析擴展卡片類型
type AnalysisExpandableCard {
  id: ID!
  title: String!
  category: AnalysisCategory!

  # 卡片內容
  summary: CardSummary!
  details: CardDetails!
  charts: [ChartConfig!]

  # 交互設置
  isExpandable: Boolean!
  defaultExpanded: Boolean!
  refreshable: Boolean!
}

type CardSummary {
  mainMetric: StatMetric!
  subMetrics: [StatMetric!]
  trend: TrendDirection!
}

type CardDetails {
  description: String
  insights: [String!]
  recommendations: [String!]
  relatedCards: [ID!]
}

type ChartConfig {
  type: ChartType!
  data: JSON!
  options: JSON
}

enum AnalysisCategory {
  INVENTORY
  OPERATIONS
  QUALITY
  EFFICIENCY
  FINANCIAL
  PREDICTIVE
}

enum ChartType {
  LINE
  BAR
  PIE
  DONUT
  AREA
  SCATTER
  HEATMAP
  GAUGE
  TREEMAP
}

# 查詢
extend type Query {
  # 質量指標
  qualityMetrics(dateRange: DateRangeInput, productCodes: [String!]): QualityMetrics!

  # 效率指標
  efficiencyMetrics(dateRange: DateRangeInput, departments: [String!]): EfficiencyMetrics!

  # 趨勢分析
  trendAnalysis(
    metric: String!
    dateRange: DateRangeInput
    granularity: TimeGranularity
  ): TrendAnalysis!

  # 分佈分析
  distributionAnalysis(
    metric: String!
    dateRange: DateRangeInput
    binCount: Int
  ): DistributionAnalysis!

  # 預測分析
  predictiveAnalysis(targetVariable: String!, horizon: Int): PredictiveAnalysis!

  # 系統性能
  systemPerformance(timeWindow: TimeWindow): SystemPerformance!

  # 上傳統計
  uploadStatistics(dateRange: DateRangeInput): UploadStatistics!

  # 更新統計
  updateStatistics(dateRange: DateRangeInput): UpdateStatistics!

  # 分析卡片
  analysisCards(category: AnalysisCategory): [AnalysisExpandableCard!]!
}

# 時間相關枚舉
enum TimeGranularity {
  MINUTE
  HOUR
  DAY
  WEEK
  MONTH
  QUARTER
  YEAR
}

enum TimeWindow {
  LAST_5_MINUTES
  LAST_15_MINUTES
  LAST_HOUR
  LAST_24_HOURS
  LAST_7_DAYS
  LAST_30_DAYS
}
