# Unified Data Layer GraphQL Schema
# Combined core entities and operations definitions

# Query root type - provides entry points for all read-only data operations
type Query {
  # Product queries
  product(id: ID!): Product
  products(filter: ProductFilter, pagination: PaginationInput, sort: SortInput): ProductConnection!

  # Pallet queries
  pallet(id: ID!): Pallet
  pallets(filter: PalletFilter, pagination: PaginationInput, sort: SortInput): PalletConnection!

  # Inventory queries
  inventory(id: ID!): InventoryRecord
  inventories(
    filter: InventoryFilter
    pagination: PaginationInput
    sort: SortInput
  ): InventoryConnection!

  # Movement record queries
  movement(id: ID!): Movement
  movements(
    filter: MovementFilter
    pagination: PaginationInput
    sort: SortInput
  ): MovementConnection!

  # Business logic queries (using Connection pagination mode)
  getLowStockProducts(
    threshold: Int = 10
    pagination: PaginationInput
    sort: SortInput
  ): ProductConnection!

  getPendingOrders(
    status: OrderStatus
    pagination: PaginationInput
    sort: SortInput
  ): OrderConnection!

  getActiveTransfers(
    dateRange: DateRangeInput
    pagination: PaginationInput
    sort: SortInput
  ): MovementConnection!
}

"""
Mutation root type - provides entry points for all data modification operations
"""
type Mutation {
  # Product operations
  createProduct(input: CreateProductInput!): ProductResult!
  updateProduct(id: ID!, input: UpdateProductInput!): ProductResult!
  deleteProduct(id: ID!): DeleteResult!

  # Pallet operations
  createPallet(input: CreatePalletInput!): PalletResult!
  updatePallet(id: ID!, input: UpdatePalletInput!): PalletResult!
  voidPallet(id: ID!, reason: String): VoidResult!

  # Inventory operations
  adjustInventory(input: StockAdjustmentInput!): AdjustInventoryResult!
  transferStock(input: TransferStockInput!): TransferResult!

  # Business logic operations
  processStocktake(input: ProcessStocktakeInput!): StocktakeResult!
  generateGrnLabel(input: GenerateGrnLabelInput!): GrnLabelResult!
}

"""
Subscription operations - provides real-time data update functionality using WebSocket connections
"""
type Subscription {
  # Real-time inventory updates
  inventoryUpdated(locationId: ID): InventoryRecord!

  # Pallet movement tracking
  palletMoved(warehouseId: ID): Movement!

  # Order status changes
  orderStatusChanged(orderId: ID): Order!

  # System alerts
  lowStockAlert(threshold: Int = 10): Product!
  systemAlert: SystemAlert!
}

# Common pagination interfaces
interface Connection {
  edges: [Edge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

interface Edge {
  node: Node!
  cursor: String!
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

# Common input types
input PaginationInput {
  first: Int
  after: String
  last: Int
  before: String
}

input SortInput {
  field: String!
  direction: SortDirection!
}

input DateRangeInput {
  startDate: DateTime!
  endDate: DateTime!
}

enum SortDirection {
  ASC
  DESC
}

# Unified error handling
interface BaseError {
  message: String!
  code: String!
}

type UserError implements BaseError {
  message: String!
  code: String!
  field: String
}

type SystemError implements BaseError {
  message: String!
  code: String!
  details: String
}

"""
產品實體 - 代表系統中的產品資訊
包括產品代碼、描述、颜色、標準數量等
"""
type Product implements Node {
  id: ID! # data_code.code
  code: String! # product sku
  description: String!
  colour: String!
  standardQty: Int! # standard qty per pallet
  type: String!
  remark: String
  # Relations (using Connection pagination for performance optimization)
  pallets(first: Int = 20, after: String, filter: PalletFilter, sort: SortInput): PalletConnection

  inventory(
    first: Int = 50
    after: String
    filter: InventoryFilter
    sort: SortInput
  ): InventoryConnection

  movements(
    first: Int = 10
    after: String
    filter: MovementFilter
    sort: SortInput
  ): MovementConnection
}

input ProductFilter {
  code: String
  description: String
  colour: String
  type: String
  search: String # Full text search
}

"""
托盤實體 - 代表倉庫中的托盤
是庫存管理的基本單位，包含產品、數量和位置資訊
"""
type Pallet implements Node {
  id: ID! # record_palletinfo.plt_num
  palletNumber: String! # plt_num
  productCode: String!
  series: String!
  generateTime: DateTime!
  quantity: Int! # product_qty
  remark: String
  pdfUrl: String
  # Relations
  product: Product!
  location: Location
  status: PalletStatus!

  # Related lists (using Connection pagination)
  movements(
    first: Int = 10
    after: String
    filter: MovementFilter
    sort: SortInput
  ): MovementConnection

  grnRecords(first: Int = 20, after: String, sort: SortInput): GRNConnection

  inventoryRecords(
    first: Int = 30
    after: String
    filter: InventoryFilter
    sort: SortInput
  ): InventoryConnection
}

enum PalletStatus {
  ACTIVE
  LOADED
  DAMAGED
  VOID
}

input PalletFilter {
  palletNumber: String
  productCode: String
  status: PalletStatus
  location: String
  dateRange: DateRangeInput
}

"""
Inventory Record - tracks product quantities at various warehouse locations
Tracks real-time inventory across injection, pipeline, prebook, and other locations
"""
type InventoryRecord implements Node {
  id: ID! # record_inventory.uuid
  productCode: String!
  palletNumber: String!
  # Inventory quantities at various locations
  injection: Int!
  pipeline: Int!
  prebook: Int!
  await: Int!
  fold: Int!
  bulk: Int!
  backcarpark: Int!
  damage: Int!
  awaitGrn: Int
  latestUpdate: DateTime!
  # Relations
  product: Product!
  pallet: Pallet!
  totalQuantity: Int! # Calculated field
}

type Location {
  name: String!
  capacity: Int
  currentStock: Int!
  occupancyRate: Float! # 計算欄位
}

input InventoryFilter {
  productCode: String
  location: LocationType
  minQuantity: Int
  maxQuantity: Int
  lastUpdated: DateRangeInput
}

enum LocationType {
  INJECTION
  PIPELINE
  PREBOOK
  AWAIT
  FOLD
  BULK
  BACKCARPARK
  DAMAGE
  AWAIT_GRN
}

"""
移動記錄 - 記錄托盤在倉庫間的移動歷史
包含操作員、時間、起點和終點等資訊
"""
type Movement implements Node {
  id: ID! # record_transfer.uuid
  palletNumber: String!
  fromLocation: String!
  toLocation: String!
  operatorId: Int!
  transferDate: DateTime!
  # Relations
  pallet: Pallet!
  operator: User!
}

input MovementFilter {
  palletNumber: String
  fromLocation: String
  toLocation: String
  operatorId: Int
  dateRange: DateRangeInput
}

"""
GRN 記錄 - 收貨記錄 (Goods Receipt Note)
記錄供應商收貨的詳細資訊，包括重量、包裝等
"""
type GRNRecord implements Node {
  id: ID! # record_grn.uuid
  grnRef: Int!
  palletNumber: String!
  supplierCode: String!
  materialCode: String!
  grossWeight: Int!
  netWeight: Int!
  palletType: String!
  packageType: String!
  palletCount: Float!
  packageCount: Float!
  createTime: DateTime!
  # Relations
  pallet: Pallet!
  supplier: Supplier!
  product: Product!
}

type Supplier implements Node {
  id: ID! # data_supplier.supplier_code
  supplierCode: String!
  supplierName: String!
  # Relations (using Connection pagination)
  grnRecords(first: Int = 20, after: String, filter: GRNFilter, sort: SortInput): GRNConnection
}

input GRNFilter {
  grnRef: Int
  supplierCode: String
  materialCode: String
  dateRange: DateRangeInput
}

# User Management Schema
type User implements Node {
  id: ID! # data_id.id
  name: String!
  email: String
  department: String!
  position: String!
  iconUrl: String
  uuid: String!
  # Relations (using Connection pagination)
  movements(
    first: Int = 10
    after: String
    filter: MovementFilter
    sort: SortInput
  ): MovementConnection
  workLevel: WorkLevel
}

type WorkLevel implements Node {
  id: ID! # work_level.uuid
  operatorId: Int!
  qcCount: Int!
  moveCount: Int!
  grnCount: Int!
  loadingCount: Int!
  latestUpdate: DateTime!
  # Relations
  user: User!
}

input UserFilter {
  name: String
  department: String
  position: String
  search: String
}

"""
訂單實體 - 代表客戶訂單
追蹤訂單狀態、裝載進度和相關托盤資訊
"""
type Order implements Node {
  id: ID! # record_aco.uuid
  orderRef: Int!
  productCode: String!
  requiredQty: Int!
  remainQty: Int!
  latestUpdate: DateTime!
  status: OrderStatus! # 計算欄位
  # Relations
  product: Product!
  # Related lists (using Connection pagination)
  orderDetails(first: Int = 50, after: String, sort: SortInput): OrderDetailConnection

  loadingHistory(
    first: Int = 20
    after: String
    filter: LoadingHistoryFilter
    sort: SortInput
  ): LoadingHistoryConnection
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

type OrderDetail implements Node {
  id: ID! # record_aco_detail.uuid
  palletNumber: String!
  weight: Int
  length: Int
  width: Int
  height: Int
  createdAt: Time!
  # Relations
  pallet: Pallet!
}

type LoadingHistory implements Node {
  id: ID! # order_loading_history.uuid
  orderRef: String!
  palletNumber: String!
  productCode: String!
  quantity: Int!
  actionType: String!
  actionBy: String!
  actionTime: DateTime!
  remark: String
}

input OrderFilter {
  orderRef: Int
  productCode: String
  status: OrderStatus
  dateRange: DateRangeInput
}

# Stocktake Schema
type StocktakeRecord implements Node {
  id: ID! # record_stocktake.uuid
  productCode: String!
  palletNumber: String
  productDesc: String!
  remainQty: Int
  countedQty: Int!
  countedBy: User
  countedName: String
  createdAt: DateTime!
  variance: Int! # 計算欄位
  variancePercentage: Float! # 計算欄位
}

type StocktakeSession implements Node {
  id: ID! # stocktake_session.uuid
  sessionDate: Date!
  startTime: DateTime!
  endTime: DateTime
  userId: Int
  userName: String
  totalScans: Int!
  successScans: Int!
  errorScans: Int!
  sessionStatus: StocktakeSessionStatus!
  # Relations
  user: User
  # Related lists (using Connection pagination)
  scans(
    first: Int = 50
    after: String
    filter: ScanFilter
    sort: SortInput
  ): StocktakeBatchScanConnection
}

enum StocktakeSessionStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

type StocktakeBatchScan implements Node {
  id: ID! # stocktake_batch_scan.uuid
  batchId: String!
  palletNumber: String
  productCode: String!
  productDesc: String
  countedQty: Int!
  scanTimestamp: DateTime!
  status: ScanStatus!
  errorMessage: String
  userId: Int
  userName: String
  # Relations
  pallet: Pallet
  session: StocktakeSession
}

enum ScanStatus {
  SUCCESS
  ERROR
  PENDING
}

input StocktakeFilter {
  productCode: String
  countedBy: Int
  sessionDate: DateRangeInput
  status: StocktakeSessionStatus
}

input LoadingHistoryFilter {
  orderRef: String
  palletNumber: String
  productCode: String
  actionType: String
  actionBy: String
  dateRange: DateRangeInput
}

input ScanFilter {
  batchId: String
  palletNumber: String
  productCode: String
  status: ScanStatus
  userId: Int
  dateRange: DateRangeInput
}

# Common input types (已經在上面定義了)

# Custom scalar types
scalar DateTime
scalar Date
scalar Time
scalar UUID
scalar JSON

# Unified result types
union ProductResult = Product | UserError | SystemError
union PalletResult = Pallet | UserError | SystemError
union InventoryResult = InventoryRecord | UserError | SystemError
union MovementResult = Movement | UserError | SystemError
union OrderResult = Order | UserError | SystemError
union UserResult = User | UserError | SystemError
union StocktakeResult = StocktakeRecord | UserError | SystemError
union GRNResult = GRNRecord | UserError | SystemError
union StocktakeSessionResult = StocktakeSession | UserError | SystemError

# Connection types
type ProductConnection implements Connection {
  edges: [ProductEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ProductEdge implements Edge {
  node: Product!
  cursor: String!
}

type PalletConnection implements Connection {
  edges: [PalletEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PalletEdge implements Edge {
  node: Pallet!
  cursor: String!
}

type InventoryConnection implements Connection {
  edges: [InventoryEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type InventoryEdge implements Edge {
  node: InventoryRecord!
  cursor: String!
}

type MovementConnection implements Connection {
  edges: [MovementEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type MovementEdge implements Edge {
  node: Movement!
  cursor: String!
}

type OrderConnection implements Connection {
  edges: [OrderEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type OrderEdge implements Edge {
  node: Order!
  cursor: String!
}

type UserConnection implements Connection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserEdge implements Edge {
  node: User!
  cursor: String!
}

type StocktakeConnection implements Connection {
  edges: [StocktakeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type StocktakeEdge implements Edge {
  node: StocktakeRecord!
  cursor: String!
}

# 這部分已移至上面的 Query 定義中

# 額外的 Mutation 已整合到主要 Mutation 類型中

# Subscription operations (real-time updates)
# 額外的 Subscription 方法
type SubscriptionExtensions {
  # Inventory changes
  inventoryUpdated(productCode: String): InventoryRecord!
  stockLevelChanged: InventoryRecord!

  # Pallet movement
  palletMoved: Movement!
  palletStatusChanged(palletNumber: String): Pallet!

  # Order status
  orderStatusChanged(orderRef: Int): Order!
  orderCompleted: Order!

  # Stocktake
  stocktakeCountRecorded(sessionId: ID): StocktakeRecord!
  stocktakeSessionStatusChanged: StocktakeSession!

  # System notifications
  systemAlert: SystemAlert!
  lowStockAlert: LowStockAlert!
}

# Input type definitions
input CreateProductInput {
  code: String!
  description: String!
  colour: String!
  standardQty: Int!
  type: String!
  remark: String
}

input UpdateProductInput {
  description: String
  colour: String
  standardQty: Int
  type: String
  remark: String
}

input CreatePalletInput {
  palletNumber: String!
  productCode: String!
  series: String!
  quantity: Int!
  remark: String
}

input UpdatePalletInput {
  productCode: String
  series: String
  quantity: Int
  remark: String
  status: PalletStatus
}

input MovePalletInput {
  palletNumber: String!
  fromLocation: String!
  toLocation: String!
  operatorId: Int!
  remark: String
}

input UpdateInventoryInput {
  productCode: String!
  palletNumber: String!
  injection: Int
  pipeline: Int
  prebook: Int
  await: Int
  fold: Int
  bulk: Int
  backcarpark: Int
  damage: Int
  awaitGrn: Int
}

input StockAdjustmentInput {
  productCode: String!
  location: LocationType!
  adjustmentQty: Int! # Positive to increase, negative to decrease
  reason: String!
  operatorId: Int!
}

input StockTransferInput {
  productCode: String!
  fromLocation: LocationType!
  toLocation: LocationType!
  quantity: Int!
  operatorId: Int!
  remark: String
}

input CreateOrderInput {
  orderRef: Int!
  productCode: String!
  requiredQty: Int!
}

input UpdateOrderInput {
  requiredQty: Int
  remainQty: Int
}

input LoadPalletInput {
  orderRef: Int!
  palletNumber: String!
  operatorId: Int!
}

input UnloadPalletInput {
  orderRef: Int!
  palletNumber: String!
  operatorId: Int!
  reason: String
}

input StartStocktakeSessionInput {
  userId: Int!
  userName: String!
  sessionDate: Date
}

input RecordStocktakeInput {
  sessionId: ID!
  productCode: String!
  palletNumber: String
  countedQty: Int!
  batchId: String
}

input CreateGRNInput {
  grnRef: Int!
  palletNumber: String!
  supplierCode: String!
  materialCode: String!
  grossWeight: Int!
  netWeight: Int!
  palletType: String!
  packageType: String!
  palletCount: Float!
  packageCount: Float!
}

input UpdateGRNInput {
  grossWeight: Int
  netWeight: Int
  palletType: String
  packageType: String
  palletCount: Float
  packageCount: Float
}

# Notification types
type SystemAlert {
  id: ID!
  type: AlertType!
  message: String!
  severity: AlertSeverity!
  timestamp: DateTime!
  metadata: JSON
}

type LowStockAlert {
  productCode: String!
  currentQty: Int!
  threshold: Int!
  location: LocationType!
  timestamp: DateTime!
}

enum AlertType {
  LOW_STOCK
  SYSTEM_ERROR
  PALLET_MOVED
  ORDER_COMPLETED
  STOCKTAKE_VARIANCE
}

enum AlertSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL
}

# Additional Connection type definitions (non-duplicate)

type GRNConnection implements Connection {
  edges: [GRNEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type GRNEdge implements Edge {
  node: GRNRecord!
  cursor: String!
}

type StocktakeSessionConnection implements Connection {
  edges: [StocktakeSessionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type StocktakeSessionEdge implements Edge {
  node: StocktakeSession!
  cursor: String!
}

type OrderDetailConnection implements Connection {
  edges: [OrderDetailEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type OrderDetailEdge implements Edge {
  node: OrderDetail!
  cursor: String!
}

type LoadingHistoryConnection implements Connection {
  edges: [LoadingHistoryEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type LoadingHistoryEdge implements Edge {
  node: LoadingHistory!
  cursor: String!
}

type StocktakeBatchScanConnection implements Connection {
  edges: [StocktakeBatchScanEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type StocktakeBatchScanEdge implements Edge {
  node: StocktakeBatchScan!
  cursor: String!
}

# Additional Result union types (non-duplicate)
union DeleteResult = DeleteSuccess | UserError | SystemError
union VoidResult = VoidSuccess | UserError | SystemError
union TransferResult = TransferSuccess | UserError | SystemError
# GRN Label type
type GrnLabel {
  id: ID!
  grnRef: Int!
  palletNumber: String!
  supplierCode: String!
  materialCode: String!
  generatedAt: DateTime!
  pdfUrl: String
}

union GrnLabelResult = GrnLabel | UserError | SystemError
union AdjustInventoryResult = InventoryRecord | UserError | SystemError
union BulkInventoryResult = BulkInventorySuccess | UserError | SystemError
union BulkPalletResult = BulkPalletSuccess | UserError | SystemError

# Success operation types
type DeleteSuccess {
  id: ID!
  message: String!
}

type VoidSuccess {
  palletNumber: String!
  message: String!
}

type TransferSuccess {
  transferId: ID!
  message: String!
}

type BulkInventorySuccess {
  successfulUpdates: Int!
  failedUpdates: Int!
  message: String!
}

type BulkPalletSuccess {
  successfulCreations: Int!
  failedCreations: Int!
  message: String!
}

# Missing input types
input TransferStockInput {
  productCode: String!
  fromLocation: LocationType!
  toLocation: LocationType!
  quantity: Int!
  operatorId: Int!
  remark: String
}

input ProcessStocktakeInput {
  sessionId: ID!
  productCode: String!
  palletNumber: String
  countedQty: Int!
  batchId: String
}

input GenerateGrnLabelInput {
  grnRef: Int!
  palletNumber: String!
  supplierCode: String!
  materialCode: String!
}

# Additional scalar types
scalar PositiveInt
