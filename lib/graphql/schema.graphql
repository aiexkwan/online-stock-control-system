# 統一數據層 GraphQL Schema
# 合併核心實體和操作定義

# 根類型定義
type Query {
  # 產品查詢
  product(id: ID!): Product
  products(
    filter: ProductFilter
    pagination: PaginationInput
    sort: SortInput
  ): ProductConnection!
  
  # 托盤查詢
  pallet(id: ID!): Pallet
  pallets(
    filter: PalletFilter
    pagination: PaginationInput
    sort: SortInput
  ): PalletConnection!
  
  # 庫存查詢
  inventory(id: ID!): InventoryRecord
  inventories(
    filter: InventoryFilter
    pagination: PaginationInput
    sort: SortInput
  ): InventoryConnection!
  
  # 移動記錄查詢
  movement(id: ID!): Movement
  movements(
    filter: MovementFilter
    pagination: PaginationInput
    sort: SortInput
  ): MovementConnection!
  
  # 業務邏輯查詢 (使用 Connection 分頁模式)
  getLowStockProducts(
    threshold: Int = 10
    pagination: PaginationInput
    sort: SortInput
  ): ProductConnection!
  
  getPendingOrders(
    status: OrderStatus
    pagination: PaginationInput
    sort: SortInput
  ): OrderConnection!
  
  getActiveTransfers(
    dateRange: DateRangeInput
    pagination: PaginationInput
    sort: SortInput
  ): MovementConnection!
}

type Mutation {
  # 產品操作
  createProduct(input: CreateProductInput!): ProductResult!
  updateProduct(id: ID!, input: UpdateProductInput!): ProductResult!
  deleteProduct(id: ID!): DeleteResult!
  
  # 托盤操作
  createPallet(input: CreatePalletInput!): PalletResult!
  updatePallet(id: ID!, input: UpdatePalletInput!): PalletResult!
  voidPallet(id: ID!, reason: String): VoidResult!
  
  # 庫存操作
  adjustInventory(input: StockAdjustmentInput!): AdjustInventoryResult!
  transferStock(input: TransferStockInput!): TransferResult!
  
  # 業務邏輯操作
  processStocktake(input: ProcessStocktakeInput!): StocktakeResult!
  generateGrnLabel(input: GenerateGrnLabelInput!): GrnLabelResult!
}

type Subscription {
  # 實時庫存更新
  inventoryUpdated(locationId: ID): InventoryRecord!
  
  # 托盤移動追蹤
  palletMoved(warehouseId: ID): Movement!
  
  # 訂單狀態變更
  orderStatusChanged(orderId: ID): Order!
  
  # 系統警報
  lowStockAlert(threshold: Int = 10): Product!
  systemAlert: SystemAlert!
}

# 通用分頁接口
interface Connection {
  edges: [Edge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

interface Edge {
  node: Node!
  cursor: String!
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

# 通用輸入類型
input PaginationInput {
  first: Int
  after: String
  last: Int
  before: String
}

input SortInput {
  field: String!
  direction: SortDirection!
}

input DateRangeInput {
  startDate: DateTime!
  endDate: DateTime!
}

enum SortDirection {
  ASC
  DESC
}

# 統一錯誤處理
interface BaseError {
  message: String!
  code: String!
}

type UserError implements BaseError {
  message: String!
  code: String!
  field: String
}

type SystemError implements BaseError {
  message: String!
  code: String!
  details: String
}

# 產品管理 Schema
type Product implements Node {
  id: ID! # data_code.code
  code: String! # product sku
  description: String!
  colour: String!
  standardQty: Int! # standard qty per pallet
  type: String!
  remark: String
  # 關聯 (使用 Connection 分頁優化性能)
  pallets(
    first: Int = 20
    after: String
    filter: PalletFilter
    sort: SortInput
  ): PalletConnection
  
  inventory(
    first: Int = 50
    after: String
    filter: InventoryFilter
    sort: SortInput
  ): InventoryConnection
  
  movements(
    first: Int = 10
    after: String
    filter: MovementFilter
    sort: SortInput
  ): MovementConnection
}

input ProductFilter {
  code: String
  description: String
  colour: String
  type: String
  search: String # 全文搜索
}

# 托盤管理 Schema
type Pallet implements Node {
  id: ID! # record_palletinfo.plt_num
  palletNumber: String! # plt_num
  productCode: String!
  series: String!
  generateTime: DateTime!
  quantity: Int! # product_qty
  remark: String
  pdfUrl: String
  # 關聯
  product: Product!
  location: Location
  status: PalletStatus!
  
  # 關聯列表 (使用 Connection 分頁)
  movements(
    first: Int = 10
    after: String
    filter: MovementFilter
    sort: SortInput
  ): MovementConnection
  
  grnRecords(
    first: Int = 20
    after: String
    sort: SortInput
  ): GRNConnection
  
  inventoryRecords(
    first: Int = 30
    after: String
    filter: InventoryFilter
    sort: SortInput
  ): InventoryConnection
}

enum PalletStatus {
  ACTIVE
  LOADED
  DAMAGED
  VOID
}

input PalletFilter {
  palletNumber: String
  productCode: String
  status: PalletStatus
  location: String
  dateRange: DateRangeInput
}

# 庫存管理 Schema
type InventoryRecord implements Node {
  id: ID! # record_inventory.uuid
  productCode: String!
  palletNumber: String!
  # 各地點庫存數量
  injection: Int!
  pipeline: Int!
  prebook: Int!
  await: Int!
  fold: Int!
  bulk: Int!
  backcarpark: Int!
  damage: Int!
  awaitGrn: Int
  latestUpdate: DateTime!
  # 關聯
  product: Product!
  pallet: Pallet!
  totalQuantity: Int! # 計算欄位
}

type Location {
  name: String!
  capacity: Int
  currentStock: Int!
  occupancyRate: Float! # 計算欄位
}

input InventoryFilter {
  productCode: String
  location: LocationType
  minQuantity: Int
  maxQuantity: Int
  lastUpdated: DateRangeInput
}

enum LocationType {
  INJECTION
  PIPELINE
  PREBOOK
  AWAIT
  FOLD
  BULK
  BACKCARPARK
  DAMAGE
  AWAIT_GRN
}

# 移動記錄 Schema
type Movement implements Node {
  id: ID! # record_transfer.uuid
  palletNumber: String!
  fromLocation: String!
  toLocation: String!
  operatorId: Int!
  transferDate: DateTime!
  # 關聯
  pallet: Pallet!
  operator: User!
}

input MovementFilter {
  palletNumber: String
  fromLocation: String
  toLocation: String
  operatorId: Int
  dateRange: DateRangeInput
}

# GRN (Goods Receipt Note) Schema
type GRNRecord implements Node {
  id: ID! # record_grn.uuid
  grnRef: Int!
  palletNumber: String!
  supplierCode: String!
  materialCode: String!
  grossWeight: Int!
  netWeight: Int!
  palletType: String!
  packageType: String!
  palletCount: Float!
  packageCount: Float!
  createTime: DateTime!
  # 關聯
  pallet: Pallet!
  supplier: Supplier!
  product: Product!
}

type Supplier implements Node {
  id: ID! # data_supplier.supplier_code
  supplierCode: String!
  supplierName: String!
  # 關聯
  grnRecords: [GRNRecord!]!
}

input GRNFilter {
  grnRef: Int
  supplierCode: String
  materialCode: String
  dateRange: DateRangeInput
}

# 用戶管理 Schema
type User implements Node {
  id: ID! # data_id.id
  name: String!
  email: String
  department: String!
  position: String!
  iconUrl: String
  uuid: String!
  # 關聯
  movements: [Movement!]!
  workLevel: WorkLevel
}

type WorkLevel implements Node {
  id: ID! # work_level.uuid
  operatorId: Int!
  qcCount: Int!
  moveCount: Int!
  grnCount: Int!
  loadingCount: Int!
  latestUpdate: DateTime!
  # 關聯
  user: User!
}

input UserFilter {
  name: String
  department: String
  position: String
  search: String
}

# 訂單管理 Schema
type Order implements Node {
  id: ID! # record_aco.uuid
  orderRef: Int!
  productCode: String!
  requiredQty: Int!
  remainQty: Int!
  latestUpdate: DateTime!
  status: OrderStatus! # 計算欄位
  # 關聯
  product: Product!
  orderDetails: [OrderDetail!]!
  loadingHistory: [LoadingHistory!]!
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

type OrderDetail implements Node {
  id: ID! # record_aco_detail.uuid
  palletNumber: String!
  weight: Int
  length: Int
  width: Int
  height: Int
  createdAt: Time!
  # 關聯
  pallet: Pallet!
}

type LoadingHistory implements Node {
  id: ID! # order_loading_history.uuid
  orderRef: String!
  palletNumber: String!
  productCode: String!
  quantity: Int!
  actionType: String!
  actionBy: String!
  actionTime: DateTime!
  remark: String
}

input OrderFilter {
  orderRef: Int
  productCode: String
  status: OrderStatus
  dateRange: DateRangeInput
}

# 庫存盤點 Schema
type StocktakeRecord implements Node {
  id: ID! # record_stocktake.uuid
  productCode: String!
  palletNumber: String
  productDesc: String!
  remainQty: Int
  countedQty: Int!
  countedBy: User
  countedName: String
  createdAt: DateTime!
  variance: Int! # 計算欄位
  variancePercentage: Float! # 計算欄位
}

type StocktakeSession implements Node {
  id: ID! # stocktake_session.uuid
  sessionDate: Date!
  startTime: DateTime!
  endTime: DateTime
  userId: Int
  userName: String
  totalScans: Int!
  successScans: Int!
  errorScans: Int!
  sessionStatus: StocktakeSessionStatus!
  # 關聯
  user: User
  scans: [StocktakeBatchScan!]!
}

enum StocktakeSessionStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

type StocktakeBatchScan implements Node {
  id: ID! # stocktake_batch_scan.uuid
  batchId: String!
  palletNumber: String
  productCode: String!
  productDesc: String
  countedQty: Int!
  scanTimestamp: DateTime!
  status: ScanStatus!
  errorMessage: String
  userId: Int
  userName: String
  # 關聯
  pallet: Pallet
  session: StocktakeSession
}

enum ScanStatus {
  SUCCESS
  ERROR
  PENDING
}

input StocktakeFilter {
  productCode: String
  countedBy: Int
  sessionDate: DateRangeInput
  status: StocktakeSessionStatus
}

# 通用輸入類型
input DateRangeInput {
  from: Date
  to: Date
}

# 自定義標量類型
scalar DateTime
scalar Date
scalar Time
scalar UUID
scalar JSON

# 統一結果類型
union ProductResult = Product | UserError | SystemError
union PalletResult = Pallet | UserError | SystemError
union InventoryResult = InventoryRecord | UserError | SystemError
union MovementResult = Movement | UserError | SystemError
union OrderResult = Order | UserError | SystemError
union UserResult = User | UserError | SystemError
union StocktakeResult = StocktakeRecord | UserError | SystemError
union GRNResult = GRNRecord | UserError | SystemError
union StocktakeSessionResult = StocktakeSession | UserError | SystemError

# Connection 類型
type ProductConnection implements Connection {
  edges: [ProductEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ProductEdge implements Edge {
  node: Product!
  cursor: String!
}

type PalletConnection implements Connection {
  edges: [PalletEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PalletEdge implements Edge {
  node: Pallet!
  cursor: String!
}

type InventoryConnection implements Connection {
  edges: [InventoryEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type InventoryEdge implements Edge {
  node: InventoryRecord!
  cursor: String!
}

type MovementConnection implements Connection {
  edges: [MovementEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type MovementEdge implements Edge {
  node: Movement!
  cursor: String!
}

type OrderConnection implements Connection {
  edges: [OrderEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type OrderEdge implements Edge {
  node: Order!
  cursor: String!
}

type UserConnection implements Connection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserEdge implements Edge {
  node: User!
  cursor: String!
}

type StocktakeConnection implements Connection {
  edges: [StocktakeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type StocktakeEdge implements Edge {
  node: StocktakeRecord!
  cursor: String!
}

# 查詢操作
extend type Query {
  # 產品查詢
  product(id: ID!): ProductResult!
  products(
    filter: ProductFilter
    sort: [SortInput!]
    pagination: PaginationInput
  ): ProductConnection!
  
  # 托盤查詢
  pallet(id: ID!): PalletResult!
  pallets(
    filter: PalletFilter
    sort: [SortInput!]
    pagination: PaginationInput
  ): PalletConnection!
  
  # 庫存查詢
  inventoryRecord(id: ID!): InventoryResult!
  inventory(
    filter: InventoryFilter
    sort: [SortInput!]
    pagination: PaginationInput
  ): InventoryConnection!
  
  # 移動記錄查詢
  movement(id: ID!): MovementResult!
  movements(
    filter: MovementFilter
    sort: [SortInput!]
    pagination: PaginationInput
  ): MovementConnection!
  
  # 訂單查詢
  order(id: ID!): OrderResult!
  orders(
    filter: OrderFilter
    sort: [SortInput!]
    pagination: PaginationInput
  ): OrderConnection!
  
  # 用戶查詢
  user(id: ID!): UserResult!
  users(
    filter: UserFilter
    sort: [SortInput!]
    pagination: PaginationInput
  ): UserConnection!
  
  # 庫存盤點查詢
  stocktakeRecord(id: ID!): StocktakeResult!
  stocktakeRecords(
    filter: StocktakeFilter
    sort: [SortInput!]
    pagination: PaginationInput
  ): StocktakeConnection!
  
  # 業務邏輯查詢 (使用 Connection 分頁模式)
  palletsByLocation(
    location: LocationType!
    pagination: PaginationInput
    sort: SortInput
  ): PalletConnection!
  
  lowStockProducts(
    threshold: Int = 10
    pagination: PaginationInput
    sort: SortInput
  ): ProductConnection!
  
  pendingOrders(
    pagination: PaginationInput
    sort: SortInput
  ): OrderConnection!
  
  recentMovements(
    limit: Int = 20
    pagination: PaginationInput
    sort: SortInput
  ): MovementConnection!
  
  stockLevels(
    pagination: PaginationInput
    sort: SortInput
  ): InventoryConnection!
  
  activeStocktakeSessions(
    pagination: PaginationInput
    sort: SortInput
  ): StocktakeSessionConnection!
}

# 變更操作
extend type Mutation {
  # 產品管理
  createProduct(input: CreateProductInput!): ProductResult!
  updateProduct(id: ID!, input: UpdateProductInput!): ProductResult!
  deleteProduct(id: ID!): DeleteResult!
  
  # 托盤管理
  createPallet(input: CreatePalletInput!): PalletResult!
  updatePallet(id: ID!, input: UpdatePalletInput!): PalletResult!
  deletePallet(id: ID!): DeleteResult!
  movePallet(input: MovePalletInput!): MovementResult!
  
  # 庫存管理
  updateInventory(input: UpdateInventoryInput!): InventoryResult!
  adjustStock(input: StockAdjustmentInput!): AdjustInventoryResult!
  transferStock(input: StockTransferInput!): TransferResult!
  
  # 訂單管理
  createOrder(input: CreateOrderInput!): OrderResult!
  updateOrder(id: ID!, input: UpdateOrderInput!): OrderResult!
  loadPalletToOrder(input: LoadPalletInput!): OrderResult!
  unloadPalletFromOrder(input: UnloadPalletInput!): OrderResult!
  completeOrder(id: ID!): OrderResult!
  
  # 庫存盤點
  startStocktakeSession(input: StartStocktakeSessionInput!): StocktakeSessionResult!
  recordStocktakeCount(input: RecordStocktakeInput!): StocktakeResult!
  endStocktakeSession(sessionId: ID!): StocktakeSessionResult!
  
  # GRN 管理
  createGRN(input: CreateGRNInput!): GRNResult!
  updateGRN(id: ID!, input: UpdateGRNInput!): GRNResult!
  
  # 批量操作
  bulkUpdateInventory(inputs: [UpdateInventoryInput!]!): BulkInventoryResult!
  bulkCreatePallets(inputs: [CreatePalletInput!]!): BulkPalletResult!
}

# 訂閱操作 (實時更新)
extend type Subscription {
  # 庫存變化
  inventoryUpdated(productCode: String): InventoryRecord!
  stockLevelChanged: InventoryRecord!
  
  # 托盤移動
  palletMoved: Movement!
  palletStatusChanged(palletNumber: String): Pallet!
  
  # 訂單狀態
  orderStatusChanged(orderRef: Int): Order!
  orderCompleted: Order!
  
  # 庫存盤點
  stocktakeCountRecorded(sessionId: ID): StocktakeRecord!
  stocktakeSessionStatusChanged: StocktakeSession!
  
  # 系統通知
  systemAlert: SystemAlert!
  lowStockAlert: LowStockAlert!
}

# Input 類型定義
input CreateProductInput {
  code: String!
  description: String!
  colour: String!
  standardQty: Int!
  type: String!
  remark: String
}

input UpdateProductInput {
  description: String
  colour: String
  standardQty: Int
  type: String
  remark: String
}

input CreatePalletInput {
  palletNumber: String!
  productCode: String!
  series: String!
  quantity: Int!
  remark: String
}

input UpdatePalletInput {
  productCode: String
  series: String
  quantity: Int
  remark: String
  status: PalletStatus
}

input MovePalletInput {
  palletNumber: String!
  fromLocation: String!
  toLocation: String!
  operatorId: Int!
  remark: String
}

input UpdateInventoryInput {
  productCode: String!
  palletNumber: String!
  injection: Int
  pipeline: Int
  prebook: Int
  await: Int
  fold: Int
  bulk: Int
  backcarpark: Int
  damage: Int
  awaitGrn: Int
}

input StockAdjustmentInput {
  productCode: String!
  location: LocationType!
  adjustmentQty: Int! # 正數增加，負數減少
  reason: String!
  operatorId: Int!
}

input StockTransferInput {
  productCode: String!
  fromLocation: LocationType!
  toLocation: LocationType!
  quantity: Int!
  operatorId: Int!
  remark: String
}

input CreateOrderInput {
  orderRef: Int!
  productCode: String!
  requiredQty: Int!
}

input UpdateOrderInput {
  requiredQty: Int
  remainQty: Int
}

input LoadPalletInput {
  orderRef: Int!
  palletNumber: String!
  operatorId: Int!
}

input UnloadPalletInput {
  orderRef: Int!
  palletNumber: String!
  operatorId: Int!
  reason: String
}

input StartStocktakeSessionInput {
  userId: Int!
  userName: String!
  sessionDate: Date
}

input RecordStocktakeInput {
  sessionId: ID!
  productCode: String!
  palletNumber: String
  countedQty: Int!
  batchId: String
}

input CreateGRNInput {
  grnRef: Int!
  palletNumber: String!
  supplierCode: String!
  materialCode: String!
  grossWeight: Int!
  netWeight: Int!
  palletType: String!
  packageType: String!
  palletCount: Float!
  packageCount: Float!
}

input UpdateGRNInput {
  grossWeight: Int
  netWeight: Int
  palletType: String
  packageType: String
  palletCount: Float
  packageCount: Float
}

# 通知類型
type SystemAlert {
  id: ID!
  type: AlertType!
  message: String!
  severity: AlertSeverity!
  timestamp: DateTime!
  metadata: JSON
}

type LowStockAlert {
  productCode: String!
  currentQty: Int!
  threshold: Int!
  location: LocationType!
  timestamp: DateTime!
}

enum AlertType {
  LOW_STOCK
  SYSTEM_ERROR
  PALLET_MOVED
  ORDER_COMPLETED
  STOCKTAKE_VARIANCE
}

enum AlertSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL
}

# Connection 類型定義 (Relay 規範)
type ProductConnection implements Connection {
  edges: [ProductEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ProductEdge implements Edge {
  node: Product!
  cursor: String!
}

type PalletConnection implements Connection {
  edges: [PalletEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PalletEdge implements Edge {
  node: Pallet!
  cursor: String!
}

type InventoryConnection implements Connection {
  edges: [InventoryEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type InventoryEdge implements Edge {
  node: InventoryRecord!
  cursor: String!
}

type MovementConnection implements Connection {
  edges: [MovementEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type MovementEdge implements Edge {
  node: Movement!
  cursor: String!
}

type OrderConnection implements Connection {
  edges: [OrderEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type OrderEdge implements Edge {
  node: Order!
  cursor: String!
}

type GRNConnection implements Connection {
  edges: [GRNEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type GRNEdge implements Edge {
  node: GRNRecord!
  cursor: String!
}

type StocktakeSessionConnection implements Connection {
  edges: [StocktakeSessionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type StocktakeSessionEdge implements Edge {
  node: StocktakeSession!
  cursor: String!
}

# Result 聯合類型 (錯誤處理)
union ProductResult = Product | UserError | SystemError
union PalletResult = Pallet | UserError | SystemError
union InventoryResult = InventoryRecord | UserError | SystemError
union MovementResult = Movement | UserError | SystemError
union OrderResult = Order | UserError | SystemError
union DeleteResult = DeleteSuccess | UserError | SystemError
union VoidResult = VoidSuccess | UserError | SystemError
union TransferResult = TransferSuccess | UserError | SystemError
union StocktakeResult = StocktakeRecord | UserError | SystemError
union StocktakeSessionResult = StocktakeSession | UserError | SystemError
union GrnLabelResult = GrnLabel | UserError | SystemError
union GRNResult = GRNRecord | UserError | SystemError
union AdjustInventoryResult = InventoryRecord | UserError | SystemError
union BulkInventoryResult = BulkInventorySuccess | UserError | SystemError
union BulkPalletResult = BulkPalletSuccess | UserError | SystemError

# 成功操作類型
type DeleteSuccess {
  id: ID!
  message: String!
}

type VoidSuccess {
  palletNumber: String!
  message: String!
}

type TransferSuccess {
  transferId: ID!
  message: String!
}

type BulkInventorySuccess {
  successfulUpdates: Int!
  failedUpdates: Int!
  message: String!
}

type BulkPalletSuccess {
  successfulCreations: Int!
  failedCreations: Int!
  message: String!
}

# 缺失的輸入類型
input TransferStockInput {
  productCode: String!
  fromLocation: LocationType!
  toLocation: LocationType!
  quantity: Int!
  operatorId: Int!
  remark: String
}

input ProcessStocktakeInput {
  sessionId: ID!
  productCode: String!
  palletNumber: String
  countedQty: Int!
  batchId: String
}

input GenerateGrnLabelInput {
  grnRef: Int!
  palletNumber: String!
  supplierCode: String!
  materialCode: String!
}

# 自定義標量類型
scalar DateTime
scalar Date
scalar JSON
scalar PositiveInt 