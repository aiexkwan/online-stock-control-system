# 測試用簡化版 GraphQL Schema

type Query {
  product(id: ID!): Product
  products(filter: ProductFilter, pagination: PaginationInput): ProductConnection!
  pallet(id: ID!): Pallet
  pallets(filter: PalletFilter, pagination: PaginationInput): PalletConnection!
  inventory(id: ID!): InventoryRecord
  inventories(filter: InventoryFilter, pagination: PaginationInput): InventoryConnection!
  movement(id: ID!): Movement
  movements(filter: MovementFilter, pagination: PaginationInput): MovementConnection!
  getLowStockProducts(threshold: Int): ProductConnection!
  getPendingOrders(status: OrderStatus): OrderConnection!
}

type Mutation {
  createProduct(input: CreateProductInput!): Product
  updateProduct(id: ID!, input: UpdateProductInput!): Product
  deleteProduct(id: ID!): Boolean
  createPallet(input: CreatePalletInput!): Pallet
  updatePallet(id: ID!, input: UpdatePalletInput!): Pallet
  transferStock(input: TransferStockInput!): Movement
}

type Subscription {
  inventoryUpdated(locationId: ID): InventoryRecord!
  palletMoved(warehouseId: ID): Movement!
  orderStatusChanged(orderId: ID): Order!
}

# 基本類型
type Product {
  id: ID!
  code: String!
  description: String!
  colour: String!
  standardQty: Int!
  type: String!
  remark: String
}

type Pallet {
  id: ID!
  palletNumber: String!
  productCode: String!
  series: String!
  generateTime: String!
  quantity: Int!
  status: PalletStatus!
}

type InventoryRecord {
  id: ID!
  productCode: String!
  injection: Int!
  pipeline: Int!
  prebook: Int!
  await: Int!
  fold: Int!
  bulk: Int!
  backcarpark: Int!
  damage: Int!
}

type Movement {
  id: ID!
  palletNumber: String!
  fromLocation: String!
  toLocation: String!
  operatorId: Int!
  transferDate: String!
}

type Order {
  id: ID!
  orderRef: Int!
  status: OrderStatus!
}

# 連接類型 (Relay 分頁)
type ProductConnection {
  edges: [ProductEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ProductEdge {
  node: Product!
  cursor: String!
}

type PalletConnection {
  edges: [PalletEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PalletEdge {
  node: Pallet!
  cursor: String!
}

type InventoryConnection {
  edges: [InventoryEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type InventoryEdge {
  node: InventoryRecord!
  cursor: String!
}

type MovementConnection {
  edges: [MovementEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type MovementEdge {
  node: Movement!
  cursor: String!
}

type OrderConnection {
  edges: [OrderEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type OrderEdge {
  node: Order!
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

# 枚舉類型
enum PalletStatus {
  ACTIVE
  VOIDED
  LOADED
  DAMAGED
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum SortDirection {
  ASC
  DESC
}

# 輸入類型
input ProductFilter {
  code: String
  type: String
  colour: String
  search: String
}

input PalletFilter {
  productCode: String
  series: String
  status: PalletStatus
  dateRange: DateRangeInput
}

input InventoryFilter {
  productCode: String
  minQuantity: Int
  maxQuantity: Int
}

input MovementFilter {
  palletNumber: String
  fromLocation: String
  toLocation: String
  dateRange: DateRangeInput
}

input DateRangeInput {
  from: String
  to: String
}

input PaginationInput {
  first: Int
  after: String
  last: Int
  before: String
}

input SortInput {
  field: String!
  direction: SortDirection!
}

input CreateProductInput {
  code: String!
  description: String!
  colour: String!
  standardQty: Int!
  type: String!
}

input UpdateProductInput {
  description: String
  colour: String
  standardQty: Int
  type: String
}

input CreatePalletInput {
  palletNumber: String!
  productCode: String!
  series: String!
  quantity: Int!
}

input UpdatePalletInput {
  quantity: Int
  status: PalletStatus
}

input TransferStockInput {
  palletNumber: String!
  fromLocation: String!
  toLocation: String!
  quantity: Int!
}