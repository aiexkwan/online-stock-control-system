/**
 * Unified Error Handling System
 * 統一錯誤處理系統入口
 *
 * 導出所有錯誤處理相關組件、Hook 和工具
 */

'use client';

import React from 'react';

// Core Types
export type * from './types';

// Constants
export * from './constants';

// Context and Provider
export { ErrorProvider, useError, ErrorContext } from './ErrorContext';

// Error Boundary Components
export {
  ErrorBoundary,
  withErrorBoundary,
  WidgetErrorBoundary,
  PageErrorBoundary,
  AppErrorBoundary,
} from './components/ErrorBoundary';

// Import for internal use in this file
import { ErrorBoundary, WidgetErrorBoundary, PageErrorBoundary } from './components/ErrorBoundary';

// Error Fallback Components
export {
  ErrorFallback,
  CompactErrorFallback,
  WidgetErrorFallback,
  PageErrorFallback,
  InlineErrorMessage,
  SuccessMessage,
} from './components/ErrorFallback';

// Error Recovery Components
export {
  AutoRecovery,
  ManualRecovery,
  RecoveryStatus,
  RecoverySuccess,
  ErrorRecoveryPanel,
} from './components/ErrorRecovery';

// Notification Manager
export {
  ErrorNotificationManager,
  errorNotifications,
} from './components/ErrorNotificationManager';

// Hooks
export {
  useErrorHandler,
  useAsyncError,
  useErrorRetry,
  useComponentErrorState,
  useErrorAnalytics,
  useErrorRecovery,
  useGlobalErrorState,
} from './hooks/useError';

// Utility Functions
export class ErrorHandlingUtils {
  /**
   * Wrap async function with error handling
   */
  static withErrorHandling<T extends readonly unknown[], R>(
    fn: (...args: T) => Promise<R>,
    errorHandler: (error: Error) => void
  ) {
    return async (...args: T): Promise<R | null> => {
      try {
        return await fn(...args);
      } catch (error) {
        errorHandler(error instanceof Error ? error : new Error(String(error)));
        return null;
      }
    };
  }

  /**
   * Create error boundary wrapper for components
   */
  static createErrorBoundary<P extends object>(
    Component: React.ComponentType<P>,
    componentName: string,
    options?: {
      isolationLevel?: 'component' | 'widget' | 'page' | 'app';
      fallback?: React.ComponentType<Record<string, unknown>>;
    }
  ) {
    return function WrappedComponent(props: P) {
      // Always use ErrorBoundary and pass isolation level as prop
      const boundaryProps = {
        context: {
          component: componentName,
          action: 'render',
        },
        fallback: options?.fallback,
        isolationLevel: options?.isolationLevel || 'component',
        children: React.createElement(Component, props),
      };

      return React.createElement(ErrorBoundary, boundaryProps as any);
    };
  }

  /**
   * Validate and normalize error object
   */
  static normalizeError(error: unknown): Error {
    if (error instanceof Error) {
      return error;
    }

    if (typeof error === 'string') {
      return new Error(error);
    }

    if (error && typeof error === 'object' && 'message' in error) {
      return new Error(String(error.message));
    }

    return new Error('Unknown error occurred');
  }

  /**
   * Check if error is network related
   */
  static isNetworkError(error: Error): boolean {
    const message = error.message.toLowerCase();
    return (
      message.includes('network') ||
      message.includes('fetch') ||
      message.includes('connection') ||
      message.includes('timeout') ||
      error.name === 'NetworkError' ||
      (error.name === 'TypeError' && message.includes('failed to fetch'))
    );
  }

  /**
   * Check if error is authentication related
   */
  static isAuthError(error: Error): boolean {
    const message = error.message.toLowerCase();
    return (
      message.includes('unauthorized') ||
      message.includes('forbidden') ||
      message.includes('auth') ||
      message.includes('token') ||
      message.includes('login')
    );
  }

  /**
   * Check if error is validation related
   */
  static isValidationError(error: Error): boolean {
    const message = error.message.toLowerCase();
    return (
      message.includes('validation') ||
      message.includes('invalid') ||
      message.includes('required') ||
      message.includes('format') ||
      message.includes('must be')
    );
  }

  /**
   * Get error severity based on error type
   */
  static getErrorSeverity(error: Error): 'low' | 'medium' | 'high' | 'critical' {
    if (this.isAuthError(error)) {
      return error.message.toLowerCase().includes('expired') ? 'critical' : 'high';
    }

    if (this.isNetworkError(error)) {
      return 'medium';
    }

    if (this.isValidationError(error)) {
      return 'low';
    }

    const message = error.message.toLowerCase();
    if (message.includes('critical') || message.includes('fatal') || message.includes('system')) {
      return 'critical';
    }

    if (message.includes('error') || message.includes('failed')) {
      return 'medium';
    }

    return 'low';
  }

  /**
   * Create standardized error context
   */
  static createErrorContext(
    component: string,
    action: string,
    additionalData?: Record<string, unknown>
  ) {
    return {
      component,
      action,
      additionalData,
      timestamp: new Date().toISOString(),
      userAgent: typeof window !== 'undefined' ? window.navigator.userAgent : 'server',
      url: typeof window !== 'undefined' ? window.location.href : 'server',
    };
  }
}

// Default Export - Main provider setup
const { ErrorProvider: EP } = require('./ErrorContext');
const { ErrorNotificationManager: ENM } = require('./components/ErrorNotificationManager');

export default function ErrorHandlingProvider({
  children,
  ...props
}: React.ComponentProps<typeof EP>) {
  return React.createElement(EP, props, React.createElement(ENM), children);
}
