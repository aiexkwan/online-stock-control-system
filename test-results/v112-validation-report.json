{
  "testDate": "2025-07-15",
  "testTime": "01:00:00",
  "testSuite": "NestJS v1.1.2 Enhanced CRUD and RPC Validation",
  "summary": {
    "totalEndpoints": 14,
    "passed": 12,
    "failed": 2,
    "successRate": "86%"
  },
  "endpoints": [
    {
      "name": "Basic Health Check",
      "endpoint": "GET /api/v1/health",
      "status": "PASSED",
      "responseTime": "< 100ms",
      "result": {
        "status": "ok",
        "service": "newpennine-api",
        "database": "connected"
      }
    },
    {
      "name": "Detailed Health Check",
      "endpoint": "GET /api/v1/health/detailed",
      "status": "PASSED",
      "responseTime": "< 300ms",
      "result": {
        "healthy": true,
        "healthScore": 100,
        "tests": 3
      }
    },
    {
      "name": "Widget Stats API",
      "endpoint": "GET /api/v1/widgets/stats",
      "status": "PASSED",
      "responseTime": "< 200ms",
      "result": {
        "success": true,
        "totalProducts": 5
      }
    },
    {
      "name": "Widget Inventory API",
      "endpoint": "GET /api/v1/widgets/inventory",
      "status": "PASSED",
      "responseTime": "< 200ms",
      "result": {
        "success": true,
        "inventoryRecords": 10
      }
    },
    {
      "name": "Pallets List API",
      "endpoint": "GET /api/v1/pallets?limit=3",
      "status": "PASSED",
      "responseTime": "< 250ms",
      "result": {
        "success": true,
        "dataRetrieved": true,
        "schemaFixed": "Using generate_time instead of created_at"
      }
    },
    {
      "name": "Pallets by ID API",
      "endpoint": "GET /api/v1/pallets/:id",
      "status": "PASSED",
      "responseTime": "< 200ms",
      "result": {
        "success": true,
        "individualLookup": true,
        "schemaFixed": "Using plt_num as identifier"
      }
    },
    {
      "name": "Inventory Records API",
      "endpoint": "GET /api/v1/inventory?limit=3",
      "status": "PASSED",
      "responseTime": "< 200ms",
      "result": {
        "success": true,
        "dataRetrieved": true,
        "schemaFixed": "Using latest_update for ordering"
      }
    },
    {
      "name": "ACO Orders API",
      "endpoint": "GET /api/v1/orders/aco?limit=2",
      "status": "PASSED",
      "responseTime": "< 250ms",
      "result": {
        "success": true,
        "schemaFixed": "Using latest_update for ordering"
      }
    },
    {
      "name": "GRN Orders API", 
      "endpoint": "GET /api/v1/orders/grn?limit=2",
      "status": "PASSED",
      "responseTime": "< 250ms",
      "result": {
        "success": true
      }
    },
    {
      "name": "Transfer Records API",
      "endpoint": "GET /api/v1/transfers?limit=2",
      "status": "PASSED",
      "responseTime": "< 250ms",
      "result": {
        "success": true,
        "schemaFixed": "Using tran_date for ordering"
      }
    },
    {
      "name": "History Records API",
      "endpoint": "GET /api/v1/history?limit=2",
      "status": "PASSED",
      "responseTime": "< 250ms",
      "result": {
        "success": true,
        "schemaFixed": "Using generate_time for ordering"
      }
    },
    {
      "name": "RPC Await Location Count",
      "endpoint": "GET /api/v1/rpc/await-location-count",
      "status": "PASSED",
      "responseTime": "< 300ms",
      "result": {
        "success": true,
        "functionName": "rpc_get_await_location_count",
        "awaitCount": 2854,
        "rpcWorking": true
      }
    },
    {
      "name": "RPC Stock Level History (without params)",
      "endpoint": "GET /api/v1/rpc/stock-level-history",
      "status": "FAILED",
      "error": "Function requires parameters but parameter mapping needs investigation",
      "notes": "Function exists but parameter signature unclear"
    },
    {
      "name": "RPC Stock Level History (with params)",
      "endpoint": "GET /api/v1/rpc/stock-level-history?code=MEL60",
      "status": "FAILED", 
      "error": "Function parameter mismatch - needs schema investigation",
      "notes": "Function exists in database but parameter handling needs refinement"
    }
  ],
  "infrastructure": {
    "nestjsVersion": "11.0.1",
    "supabaseClientVersion": "2.51.0",
    "nodeVersion": "22.15.0",
    "port": 3001,
    "environment": "development"
  },
  "enhancements": {
    "crudOperations": {
      "implemented": true,
      "tables": ["record_palletinfo", "record_inventory", "record_transfer", "record_aco", "record_grn", "record_history"],
      "features": ["pagination", "filtering", "ordering", "error_handling"]
    },
    "rpcFunctions": {
      "implemented": true,
      "working": ["rpc_get_await_location_count"],
      "needsInvestigation": ["rpc_get_stock_level_history"],
      "totalTested": 2
    },
    "connectionPooling": {
      "implemented": true,
      "healthMonitoring": true,
      "multipleTestsSupported": true
    },
    "schemaCorrections": {
      "applied": true,
      "corrections": [
        "record_palletinfo: created_at → generate_time",
        "record_inventory: updated_at → latest_update", 
        "record_transfer: created_at → tran_date",
        "record_aco: created_at → latest_update",
        "record_history: timestamp → generate_time",
        "palletId parameter → plt_num identifier"
      ]
    }
  },
  "performanceMetrics": {
    "healthCheckResponseTime": "~50ms",
    "detailedHealthResponseTime": "~300ms",
    "crudOperationsResponseTime": "~200ms",
    "rpcFunctionResponseTime": "~300ms",
    "overallSystemHealth": "EXCELLENT",
    "connectionPoolHealth": "100%"
  },
  "conclusions": {
    "v112_status": "LARGELY_COMPLETED",
    "crudOperationsWorking": true,
    "rpcIntegrationPartial": true,
    "connectionPoolingImplemented": true,
    "schemaIssuesResolved": true,
    "readyForNextPhase": true,
    "improvements": [
      "86% endpoint success rate achieved",
      "All major CRUD operations functional",
      "Connection health monitoring implemented",
      "Schema column name issues resolved",
      "RPC function infrastructure working (1/2 functions tested successfully)"
    ],
    "recommendations": [
      "Investigate RPC function parameter signatures for stock level history",
      "Consider adding more comprehensive RPC function testing",
      "Add API documentation generation",
      "Implement request/response logging middleware"
    ]
  }
}