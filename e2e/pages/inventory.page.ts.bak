import { Page, Locator } from '@playwright/test';

/**
 * 庫存管理頁面對象模型
 */
export class InventoryPage {
  readonly page: Page;
  readonly searchInput: Locator;
  readonly searchButton: Locator;
  readonly searchTypeSelect: Locator;
  readonly inventoryTable: Locator;
  readonly transferButton: Locator;
  readonly scanButton: Locator;
  readonly loadingSpinner: Locator;
  readonly errorAlert: Locator;
  readonly successAlert: Locator;

  constructor(page: Page) {
    this.page = page;
    this.searchInput = page.locator('[data-testid="search-input"]');
    this.searchButton = page.locator('[data-testid="search-button"]');
    this.searchTypeSelect = page.locator('[data-testid="search-type-select"]');
    this.inventoryTable = page.locator('[data-testid="inventory-table"]');
    this.transferButton = page.locator('[data-testid="transfer-button"]');
    this.scanButton = page.locator('[data-testid="scan-button"]');
    this.loadingSpinner = page.locator('[data-testid="loading-spinner"]');
    this.errorAlert = page.locator('[role="alert"][data-type="error"]');
    this.successAlert = page.locator('[role="alert"][data-type="success"]');
  }

  async goto() {
    await this.page.goto('/inventory');
  }

  async searchPallet(searchType: 'series' | 'pallet_num', value: string) {
    await this.searchTypeSelect.selectOption(searchType);
    await this.searchInput.fill(value);
    await this.searchButton.click();
    await this.waitForSearchComplete();
  }

  async waitForSearchComplete() {
    // 等待加載完成
    await this.loadingSpinner.waitFor({ state: 'hidden', timeout: 10000 });
  }

  async getSearchResults(): Promise<any[]> {
    const rows = await this.inventoryTable.locator('tbody tr').all();
    const results = [];

    for (const row of rows) {
      const cells = await row.locator('td').all();
      if (cells.length > 0) {
        results.push({
          palletNum: await cells[0].textContent(),
          productCode: await cells[1].textContent(),
          quantity: await cells[2].textContent(),
          location: await cells[3].textContent(),
        });
      }
    }

    return results;
  }

  async performTransfer(fromLocation: string, toLocation: string, quantity: string) {
    await this.transferButton.click();

    // 填寫轉移表單
    const modal = this.page.locator('[role="dialog"]');
    await modal.locator('[name="fromLocation"]').selectOption(fromLocation);
    await modal.locator('[name="toLocation"]').selectOption(toLocation);
    await modal.locator('[name="quantity"]').fill(quantity);
    await modal.locator('button[type="submit"]').click();
  }

  async isErrorDisplayed(): Promise<boolean> {
    return await this.errorAlert.isVisible();
  }

  async getErrorMessage(): Promise<string> {
    return (await this.errorAlert.textContent()) || '';
  }

  async isSuccessDisplayed(): Promise<boolean> {
    return await this.successAlert.isVisible();
  }

  async getSuccessMessage(): Promise<string> {
    return (await this.successAlert.textContent()) || '';
  }
}
