import { test, expect } from '@playwright/test';
import { LoginPage } from '../pages/login.page';
import { testConfig, hasValidCredentials, getUnifiedCredentials } from '../utils/test-data';

/**
 * Authentication Flow Tests
 *
 * NOTE: These tests require valid test user credentials.
 * Set the following environment variables before running:
 * - E2E_USER_EMAIL: A valid email ending with @pennineindustries.com
 * - E2E_USER_PASSWORD: The password for the test user
 * - E2E_ADMIN_EMAIL: A valid admin email ending with @pennineindustries.com
 * - E2E_ADMIN_PASSWORD: The password for the admin test user
 *
 * Without valid credentials, login tests will fail with "Invalid login credentials" error.
 */
test.describe('Authentication Flow', () => {
  let loginPage: LoginPage;

  test.beforeEach(async ({ page }) => {
    loginPage = new LoginPage(page);
    await loginPage.goto();
  });

  test('should display login form', async ({ page }) => {
    // 驗證登入表單元素
    await expect(loginPage.emailInput).toBeVisible();
    await expect(loginPage.passwordInput).toBeVisible();
    await expect(loginPage.submitButton).toBeVisible();

    // 驗證頁面標題
    await expect(page).toHaveTitle(/Pennine Stock Control System/i);
  });

  test('should login with valid credentials', async ({ page }) => {
    // Skip if no valid credentials are provided
    if (!hasValidCredentials()) {
      test.skip();
      return;
    }

    const credentials = getUnifiedCredentials();

    // 執行登入
    await loginPage.login(credentials.email, credentials.password);

    // 驗證成功登入 - 應該跳轉到 /access 而非 /dashboard
    await expect(page).toHaveURL(/\/access/);
  });

  test('should show error with invalid credentials', async () => {
    // 使用錯誤憑證登入
    await loginPage.login('invalid@pennineindustries.com', 'wrongpassword');

    // 驗證錯誤訊息
    await expect(loginPage.errorMessage).toBeVisible();
    const errorText = await loginPage.getErrorMessage();
    expect(errorText).toContain('Invalid login credentials');
  });

  test('should validate email domain', async () => {
    // 輸入非 @pennineindustries.com 的電郵
    await loginPage.emailInput.fill('test@example.com');
    await loginPage.passwordInput.fill('password123');
    await loginPage.submitButton.click();

    // 驗證錯誤訊息
    await expect(loginPage.errorMessage).toBeVisible();
    const errorText = await loginPage.getErrorMessage();
    expect(errorText).toContain('Only @pennineindustries.com email addresses are allowed');
  });

  test('should handle empty form submission', async () => {
    // 直接提交空表單
    await loginPage.submitButton.click();

    // 驗證錯誤訊息
    await expect(loginPage.errorMessage).toBeVisible();
    const errorText = await loginPage.getErrorMessage();
    expect(errorText).toContain('Please fill in all fields');
  });

  test('should redirect to requested page after login', async ({ page }) => {
    // Skip if no valid credentials are provided
    if (!hasValidCredentials()) {
      test.skip();
      return;
    }

    const credentials = getUnifiedCredentials();

    // 先訪問需要認證的頁面
    await page.goto('/inventory?redirect=true');

    // 應該被重定向到登入頁
    await expect(page).toHaveURL(/\/main-login/);

    // 登入
    await loginPage.login(credentials.email, credentials.password);

    // 應該先到 /access 頁面
    await expect(page).toHaveURL(/\/access/);

    // 然後手動導航到原本要訪問的頁面
    await page.goto('/inventory');
    await expect(page).toHaveURL(/\/inventory/);
  });

  test('should maintain session across page reloads', async ({ page, context }) => {
    // Skip if no valid credentials are provided
    if (!hasValidCredentials()) {
      test.skip();
      return;
    }

    const credentials = getUnifiedCredentials();

    // 登入
    await loginPage.login(credentials.email, credentials.password);

    // 等待登入完成
    await page.waitForURL(/\/access/);

    // 重新載入頁面
    await page.reload();

    // 應該仍然保持登入狀態
    await expect(page).toHaveURL(/\/access/);

    // 檢查 cookies
    const cookies = await context.cookies();
    const sessionCookie = cookies.find(c => c.name.includes('session') || c.name.includes('sb-'));
    expect(sessionCookie).toBeTruthy();
  });

  test('should logout successfully', async ({ page }) => {
    // Skip if no valid credentials are provided
    if (!hasValidCredentials()) {
      test.skip();
      return;
    }

    const credentials = getUnifiedCredentials();

    // 先登入
    await loginPage.login(credentials.email, credentials.password);
    await page.waitForURL(/\/access/);

    // 執行登出
    await loginPage.logout();

    // 驗證返回登入頁
    await expect(page).toHaveURL(/\/main-login/);

    // 嘗試訪問需要認證的頁面
    await page.goto('/access');

    // 應訪被重定向回登入頁
    await expect(page).toHaveURL(/\/main-login/);
  });
});
