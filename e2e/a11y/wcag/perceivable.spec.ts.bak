/**
 * WCAG 2.1 AA - Perceivable (可感知性) 測試模組
 *
 * 測試原則：資訊和使用者介面元件必須以使用者能夠感知的方式呈現給使用者
 *
 * 基於專家協作方案：
 * - 系統架構專家：模組化測試架構，長期可維護性
 * - Backend工程師：API 無障礙性支援和資料完整性
 * - 優化專家：測試效能優化和智能執行策略
 * - QA專家：全面的 WCAG 合規性測試策略
 */

import { test, expect } from '@playwright/test';
import {
  A11yTester,
  quickA11yCheck,
  testWCAGPrinciple,
  testColorContrast,
  TestType,
} from '../utils/a11y-helpers';

// 測試配置
const TEST_URLS = [
  '/',
  '/admin/injection',
  '/admin/pipeline',
  '/admin/warehouse',
  '/access',
  '/print-label',
  '/test-performance',
];

const CRITICAL_COMPONENTS = [
  '[data-testid="dashboard"]',
  '[data-testid="navigation"]',
  '[data-testid="widget-container"]',
  '[data-testid="stats-card"]',
  '[data-testid="chart-container"]',
  '[data-testid="table-container"]',
];

test.describe('WCAG 2.1 AA - Perceivable (可感知性)', () => {
  let a11yTester: A11yTester;

  test.beforeEach(async ({ page }) => {
    a11yTester = new A11yTester(page);
    await a11yTester.initialize();
  });

  test.describe('1.1 文本替代 (Text Alternatives)', () => {
    test('1.1.1 非文本內容 - 所有圖像都有適當的替代文本', async ({ page }) => {
      for (const url of TEST_URLS) {
        await page.goto(url);

        // 等待頁面載入完成
        await page.waitForLoadState('networkidle');

        // 檢查所有圖像都有 alt 屬性
        const images = await page.locator('img').all();

        for (const img of images) {
          const alt = await img.getAttribute('alt');
          const ariaLabel = await img.getAttribute('aria-label');
          const ariaLabelledby = await img.getAttribute('aria-labelledby');

          expect(
            alt !== null || ariaLabel !== null || ariaLabelledby !== null,
            `圖像缺少替代文本 in ${url}`
          ).toBe(true);

          // 如果有 alt 屬性，不應該為空（除非是裝飾性圖像）
          if (alt !== null) {
            const isDecorative =
              (await img.getAttribute('role')) === 'presentation' ||
              (await img.getAttribute('aria-hidden')) === 'true';

            if (!isDecorative) {
              expect(alt.trim().length, `空的 alt 屬性 in ${url}`).toBeGreaterThan(0);
            }
          }
        }

        // 使用 axe-core 進行更深入的檢查
        const results = await a11yTester.runSmokeTest();
        const imageAltViolations = results.failedRules.filter(
          rule => rule.id === 'image-alt' || rule.id === 'input-image-alt'
        );

        expect(imageAltViolations, `圖像替代文本違規 in ${url}`).toHaveLength(0);
      }
    });

    test('1.1.1 圖標和按鈕 - 所有圖標按鈕都有可訪問的名稱', async ({ page }) => {
      for (const url of TEST_URLS) {
        await page.goto(url);
        await page.waitForLoadState('networkidle');

        // 檢查所有按鈕都有可訪問的名稱
        const buttons = await page.locator('button, [role="button"]').all();

        for (const button of buttons) {
          const accessibleName =
            (await button.getAttribute('aria-label')) ||
            (await button.getAttribute('title')) ||
            (await button.textContent());

          expect(
            accessibleName && accessibleName.trim().length > 0,
            `按鈕缺少可訪問的名稱 in ${url}`
          ).toBe(true);
        }
      }
    });
  });

  test.describe('1.2 時間為基礎之媒體 (Time-based Media)', () => {
    test('1.2.1 僅音訊和僅視訊 - 檢查媒體內容的替代方案', async ({ page }) => {
      for (const url of TEST_URLS) {
        await page.goto(url);
        await page.waitForLoadState('networkidle');

        // 檢查視訊元素
        const videos = await page.locator('video').all();

        for (const video of videos) {
          // 檢查是否有字幕軌道
          const tracks = await video.locator('track').all();
          const hasSubtitles = tracks.some(async track => {
            const kind = await track.getAttribute('kind');
            return kind === 'subtitles' || kind === 'captions';
          });

          // 檢查是否有替代文本描述
          const ariaDescribedby = await video.getAttribute('aria-describedby');
          const hasDescription = ariaDescribedby !== null;

          // 視訊應該有字幕或文本描述
          expect(hasSubtitles || hasDescription, `視訊缺少字幕或替代描述 in ${url}`).toBe(true);
        }

        // 檢查音訊元素
        const audios = await page.locator('audio').all();

        for (const audio of audios) {
          const ariaDescribedby = await audio.getAttribute('aria-describedby');
          const hasTranscript = ariaDescribedby !== null;

          // 音訊應該有文字稿
          expect(hasTranscript, `音訊缺少文字稿 in ${url}`).toBe(true);
        }
      }
    });

    test('1.2.2 字幕 - 檢查自動播放設定', async ({ page }) => {
      for (const url of TEST_URLS) {
        await page.goto(url);
        await page.waitForLoadState('networkidle');

        // 使用 axe-core 檢查自動播放問題
        const results = await a11yTester.runSmokeTest();
        const autoplayViolations = results.failedRules.filter(
          rule => rule.id === 'no-autoplay-audio'
        );

        expect(autoplayViolations, `自動播放違規 in ${url}`).toHaveLength(0);
      }
    });
  });

  test.describe('1.3 適應性 (Adaptable)', () => {
    test('1.3.1 資訊和關係 - 語義化標籤結構', async ({ page }) => {
      for (const url of TEST_URLS) {
        await page.goto(url);
        await page.waitForLoadState('networkidle');

        // 檢查頁面結構
        const hasMain = await page.locator('main, [role="main"]').count();
        expect(hasMain, `頁面缺少主要內容區域 in ${url}`).toBeGreaterThan(0);

        // 檢查標題結構
        const headings = await page.locator('h1, h2, h3, h4, h5, h6').all();

        if (headings.length > 0) {
          // 第一個標題應該是 h1
          const firstHeading = headings[0];
          const tagName = await firstHeading.evaluate(el => el.tagName.toLowerCase());
          expect(tagName, `第一個標題不是 h1 in ${url}`).toBe('h1');
        }

        // 檢查表格結構
        const tables = await page.locator('table').all();

        for (const table of tables) {
          const hasHeaders = await table.locator('th').count();
          const hasCaption = await table.locator('caption').count();

          if (hasHeaders > 0) {
            // 檢查表頭是否有適當的 scope 屬性
            const headers = await table.locator('th').all();

            for (const header of headers) {
              const scope = await header.getAttribute('scope');
              expect(
                scope === 'col' || scope === 'row' || scope === 'colgroup' || scope === 'rowgroup',
                `表頭缺少適當的 scope 屬性 in ${url}`
              ).toBe(true);
            }
          }
        }

        // 使用 axe-core 進行更深入的檢查
        const results = await a11yTester.runSmokeTest();
        const structureViolations = results.failedRules.filter(
          rule =>
            rule.id === 'heading-order' || rule.id === 'landmark-one-main' || rule.id === 'region'
        );

        expect(structureViolations, `結構違規 in ${url}`).toHaveLength(0);
      }
    });

    test('1.3.2 有意義的序列 - 邏輯閱讀順序', async ({ page }) => {
      for (const url of TEST_URLS) {
        await page.goto(url);
        await page.waitForLoadState('networkidle');

        // 檢查 Tab 順序是否符合視覺順序
        const focusableElements = await page
          .locator('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])')
          .all();

        if (focusableElements.length > 0) {
          // 測試 Tab 導航順序
          await page.keyboard.press('Tab');
          const firstFocused = await page.locator(':focus').first();

          expect(await firstFocused.isVisible(), `第一個聚焦元素不可見 in ${url}`).toBe(true);
        }
      }
    });

    test('1.3.3 感官特徵 - 不僅依賴感官特徵', async ({ page }) => {
      for (const url of TEST_URLS) {
        await page.goto(url);
        await page.waitForLoadState('networkidle');

        // 檢查是否有僅依賴顏色的指示
        const colorOnlyIndicators = await page.locator('[style*="color"]').all();

        for (const indicator of colorOnlyIndicators) {
          const hasAriaLabel = await indicator.getAttribute('aria-label');
          const hasText = await indicator.textContent();
          const hasIcon = await indicator.locator('svg, img, [class*="icon"]').count();

          // 顏色指示器應該有額外的文本或圖標支援
          expect(
            hasAriaLabel || (hasText && hasText.trim().length > 0) || hasIcon > 0,
            `僅依賴顏色的指示器 in ${url}`
          ).toBe(true);
        }
      }
    });
  });

  test.describe('1.4 可辨識性 (Distinguishable)', () => {
    test('1.4.1 色彩的使用 - 不僅依賴色彩傳達資訊', async ({ page }) => {
      for (const url of TEST_URLS) {
        await page.goto(url);
        await page.waitForLoadState('networkidle');

        // 檢查錯誤訊息是否僅依賴顏色
        const errorElements = await page
          .locator('[class*="error"], [class*="danger"], [class*="warning"]')
          .all();

        for (const error of errorElements) {
          const hasIcon = await error.locator('svg, img, [class*="icon"]').count();
          const hasAriaLabel = await error.getAttribute('aria-label');
          const hasText = await error.textContent();

          expect(
            hasIcon > 0 || hasAriaLabel || (hasText && hasText.trim().length > 0),
            `錯誤訊息僅依賴顏色 in ${url}`
          ).toBe(true);
        }
      }
    });

    test('1.4.2 音訊控制 - 檢查背景音訊', async ({ page }) => {
      for (const url of TEST_URLS) {
        await page.goto(url);
        await page.waitForLoadState('networkidle');

        // 檢查自動播放的音訊
        const autoplayAudios = await page.locator('audio[autoplay], video[autoplay]').all();

        for (const audio of autoplayAudios) {
          const duration = await audio.evaluate(el => (el as any).duration);

          if (duration > 3) {
            // 超過 3 秒的自動播放音訊應該有控制項
            const hasControls = await audio.getAttribute('controls');
            expect(hasControls !== null, `長時間自動播放音訊缺少控制項 in ${url}`).toBe(true);
          }
        }
      }
    });

    test('1.4.3 對比度 - 最小對比度要求', async ({ page }) => {
      for (const url of TEST_URLS) {
        await page.goto(url);
        await page.waitForLoadState('networkidle');

        // 使用專用的對比度測試工具
        await testColorContrast(page);

        // 額外檢查關鍵元件的對比度
        for (const selector of CRITICAL_COMPONENTS) {
          const elements = await page.locator(selector).all();

          for (const element of elements) {
            if (await element.isVisible()) {
              const results = await a11yTester.runSmokeTest();
              const contrastViolations = results.failedRules.filter(
                rule => rule.id === 'color-contrast'
              );

              expect(contrastViolations, `對比度不足 in ${selector} at ${url}`).toHaveLength(0);
            }
          }
        }
      }
    });

    test('1.4.4 調整文字大小 - 200% 縮放測試', async ({ page }) => {
      for (const url of TEST_URLS) {
        await page.goto(url);
        await page.waitForLoadState('networkidle');

        // 設定 200% 縮放
        await page.setViewportSize({ width: 640, height: 360 });
        await page.evaluate(() => {
          document.body.style.zoom = '2';
        });

        // 檢查內容是否仍然可讀
        const textElements = await page.locator('p, h1, h2, h3, h4, h5, h6, span').all();

        for (const element of textElements) {
          if (await element.isVisible()) {
            const boundingBox = await element.boundingBox();

            expect(
              boundingBox && boundingBox.width > 0 && boundingBox.height > 0,
              `縮放後文字元素不可見 in ${url}`
            ).toBe(true);
          }
        }

        // 重置縮放
        await page.evaluate(() => {
          document.body.style.zoom = '1';
        });
        await page.setViewportSize({ width: 1280, height: 720 });
      }
    });

    test('1.4.5 文字圖像 - 避免使用文字圖像', async ({ page }) => {
      for (const url of TEST_URLS) {
        await page.goto(url);
        await page.waitForLoadState('networkidle');

        // 檢查是否有文字圖像
        const images = await page.locator('img').all();

        for (const img of images) {
          const alt = await img.getAttribute('alt');
          const src = await img.getAttribute('src');

          // 如果 alt 文字很長，可能是文字圖像
          if (alt && alt.length > 50) {
            console.warn(`可能的文字圖像: ${src} with alt: ${alt} in ${url}`);
          }
        }
      }
    });
  });

  test.describe('快速煙霧測試 (Smoke Test)', () => {
    test('5分鐘快速可感知性檢查', async ({ page }) => {
      for (const url of TEST_URLS) {
        await page.goto(url);
        await page.waitForLoadState('networkidle');

        // 執行快速 A11y 檢查
        await quickA11yCheck(page);

        // 特別檢查可感知性相關規則
        const results = await testWCAGPrinciple(page, 'PERCEIVABLE');

        // 確保沒有嚴重的可感知性問題
        const criticalViolations = results.failedRules.filter(rule => rule.impact === 'critical');

        expect(criticalViolations, `嚴重的可感知性違規 in ${url}`).toHaveLength(0);

        // 確保基本可感知性分數達到 85%
        expect(results.wcagCompliance.perceivable, `可感知性合規性不足 in ${url}`).toBe(true);
      }
    });
  });

  test.describe('回歸測試 (Regression Test)', () => {
    test('30分鐘全面可感知性檢查', async ({ page }) => {
      const allResults = [];

      for (const url of TEST_URLS) {
        await page.goto(url);
        await page.waitForLoadState('networkidle');

        // 執行全面的回歸測試
        const results = await a11yTester.runRegressionTest();
        allResults.push(results);

        // 檢查可感知性相關的所有規則
        const perceivableResults = await testWCAGPrinciple(page, 'PERCEIVABLE');

        // 確保沒有中等以上的可感知性問題
        const significantViolations = perceivableResults.failedRules.filter(
          rule => rule.impact === 'critical' || rule.impact === 'serious'
        );

        expect(significantViolations, `重要的可感知性違規 in ${url}`).toHaveLength(0);
      }

      // 計算總體可感知性分數
      const averageScore =
        allResults.reduce((sum, r) => sum + r.wcagCompliance.overallScore, 0) / allResults.length;

      expect(averageScore, '總體可感知性分數不足').toBeGreaterThanOrEqual(90);
    });
  });

  test.describe('效能整合測試', () => {
    test('可感知性測試對頁面效能的影響', async ({ page }) => {
      for (const url of TEST_URLS) {
        await page.goto(url);
        await page.waitForLoadState('networkidle');

        // 測量測試前的效能
        const startTime = Date.now();
        const initialMetrics = await page.evaluate(() => {
          const { timing } = performance;
          return {
            loadTime: timing.loadEventEnd - timing.navigationStart,
            domReady: timing.domContentLoadedEventEnd - timing.navigationStart,
          };
        });

        // 執行 A11y 測試
        const results = await a11yTester.runSmokeTest();
        const endTime = Date.now();

        // 確保測試時間合理
        const testDuration = endTime - startTime;
        expect(testDuration, `可感知性測試時間過長 in ${url}`).toBeLessThan(10000); // 10秒內

        // 確保測試不影響頁面效能
        expect(
          results.performanceMetrics.a11yCheckTime,
          `A11y 檢查時間過長 in ${url}`
        ).toBeLessThan(5000); // 5秒內
      }
    });
  });
});
