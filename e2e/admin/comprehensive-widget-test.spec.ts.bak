import { test, expect } from '@playwright/test';
import { LoginPage } from '../pages/login.page';

/**
 * Comprehensive Widget Test for Admin Sub-pages
 *
 * This test thoroughly checks every widget within all admin sub-pages
 * to ensure they load properly without errors, display content, and function correctly.
 */
test.describe('Admin Sub-pages - Comprehensive Widget Testing', () => {
  let loginPage: LoginPage;
  let consoleMessages: string[] = [];
  let errors: string[] = [];
  let networkErrors: string[] = [];
  let widgetErrors: string[] = [];

  const adminSubPages = [
    '/admin',
    '/admin/analysis',
    '/admin/upload',
    '/admin/transfer',
    '/admin/users',
    '/admin/settings',
    '/admin/stock-count',
    '/admin/product-update-demo',
  ];

  test.beforeEach(async ({ page }) => {
    consoleMessages = [];
    errors = [];
    networkErrors = [];
    widgetErrors = [];

    // Listen for console messages
    page.on('console', msg => {
      const message = `[${msg.type()}] ${msg.text()}`;
      consoleMessages.push(message);

      // Track widget-related messages
      if (msg.text().includes('widget') || msg.text().includes('Widget')) {
        console.log('🔧 Widget log:', msg.text());
      }

      // Track registry-related messages
      if (msg.text().includes('registry') || msg.text().includes('Registry')) {
        console.log('📋 Registry log:', msg.text());
      }

      // Track adapter messages
      if (msg.text().includes('Adapter') || msg.text().includes('adapter')) {
        console.log('🔌 Adapter log:', msg.text());
      }
    });

    // Listen for page errors
    page.on('pageerror', error => {
      const errorMessage = error.message;
      errors.push(errorMessage);

      // Track widget-specific errors
      if (
        errorMessage.includes('widget') ||
        errorMessage.includes('Widget') ||
        errorMessage.includes('registry') ||
        errorMessage.includes('originalFactory')
      ) {
        widgetErrors.push(errorMessage);
        console.log('🚨 Widget error:', errorMessage);
      }
    });

    // Listen for network failures
    page.on('response', response => {
      if (response.status() >= 400) {
        const networkError = `HTTP ${response.status()}: ${response.url()}`;
        networkErrors.push(networkError);
        console.log(`❌ ${networkError}`);
      }
    });

    loginPage = new LoginPage(page);
  });

  test('should complete login flow successfully', async ({ page }) => {
    console.log('🚀 Starting login flow...');

    await loginPage.goto();
    await expect(page).toHaveURL(/\/main-login/);

    const email = 'akwan@pennineindustries.com';
    const password = 'X315Y316';

    await loginPage.login(email, password);
    await page.waitForURL(/\/access/, { timeout: 15000 });
    await expect(page).toHaveURL(/\/access/);

    console.log('✅ Login successful');
  });

  test('should test all admin sub-pages and their widgets comprehensively', async ({ page }) => {
    console.log('🚀 Starting comprehensive widget testing...');

    // Step 1: Login
    await loginPage.goto();
    await loginPage.login('akwan@pennineindustries.com', 'X315Y316');
    await page.waitForURL(/\/access/);

    const testResults = {
      totalPages: adminSubPages.length,
      successfulPages: 0,
      failedPages: [] as Array<{ page: string; error: string }>,
      widgetCounts: {} as Record<string, any>,
      totalWidgets: 0,
      errors: [] as Array<{ page: string; errors: string[] }>,
      timestamp: new Date().toISOString(),
    };

    // Step 2: Test key admin sub-pages (focus on main ones to avoid timeouts)
    const keyPages = ['/admin', '/admin/analysis', '/admin/upload', '/admin/transfer'];

    for (const subPage of keyPages) {
      console.log(`\n📍 Testing page: ${subPage}`);

      try {
        // Clear previous page's messages
        const previousMessageCount = consoleMessages.length;
        const previousErrorCount = errors.length;

        // Navigate to the sub-page
        await page.goto(subPage, { timeout: 15000 });
        await page.waitForLoadState('networkidle', { timeout: 15000 });

        // Wait for widgets to load
        await page.waitForTimeout(3000);

        // Check if page loaded successfully
        await expect(page).toHaveURL(new RegExp(subPage.replace(/\[.*?\]/, '.*')));

        // Take screenshot
        await page.screenshot({
          path: `test-results/admin-widget-test-${subPage.replace(/\//g, '-')}.png`,
          fullPage: true,
        });

        // Count widget elements on the page
        const widgetSelectors = [
          '[data-widget]',
          '[class*="widget"]',
          '[class*="Widget"]',
          '[id*="widget"]',
          '[id*="Widget"]',
          '.dashboard-widget',
          '.admin-widget',
          '.chart-widget',
          '.list-widget',
          '.report-widget',
        ];

        let widgetCount = 0;
        for (const selector of widgetSelectors) {
          const count = await page.locator(selector).count();
          widgetCount += count;
        }

        // Count registered widgets from console messages
        const newMessages = consoleMessages.slice(previousMessageCount);
        const registeredWidgets = newMessages.filter(
          msg => msg.includes('Registered:') || msg.includes('registered successfully')
        );

        testResults.widgetCounts[subPage] = {
          domElements: widgetCount,
          registeredWidgets: registeredWidgets.length,
          consoleMessages: newMessages.length,
          errors: errors.length - previousErrorCount,
        };

        testResults.totalWidgets += widgetCount;
        testResults.successfulPages++;

        console.log(
          `✅ Page ${subPage} - Widgets: ${widgetCount}, Registered: ${registeredWidgets.length}`
        );

        // Check for widget-specific errors on this page
        const pageErrors = errors.slice(previousErrorCount);
        const pageWidgetErrors = pageErrors.filter(
          error =>
            error.includes('widget') ||
            error.includes('Widget') ||
            error.includes('registry') ||
            error.includes('originalFactory')
        );

        if (pageWidgetErrors.length > 0) {
          console.log(`⚠️ Widget errors on ${subPage}:`, pageWidgetErrors);
          testResults.errors.push({
            page: subPage,
            errors: pageWidgetErrors,
          });
        }
      } catch (error) {
        console.log(`❌ Failed to test page ${subPage}:`, (error as Error).message);
        testResults.failedPages.push({
          page: subPage,
          error: (error as Error).message,
        });
      }
    }

    // Step 3: Analyze results
    console.log('\n📊 COMPREHENSIVE WIDGET TEST RESULTS');
    console.log('=====================================');
    console.log(`Total pages tested: ${keyPages.length}`);
    console.log(`Successful pages: ${testResults.successfulPages}`);
    console.log(`Failed pages: ${testResults.failedPages.length}`);
    console.log(`Total widgets found: ${testResults.totalWidgets}`);
    console.log(`Total console messages: ${consoleMessages.length}`);
    console.log(`Total JavaScript errors: ${errors.length}`);
    console.log(`Widget-specific errors: ${widgetErrors.length}`);
    console.log(`Network errors: ${networkErrors.length}`);

    // Detailed widget counts per page
    console.log('\n📋 Widget Counts by Page:');
    for (const [page, data] of Object.entries(testResults.widgetCounts)) {
      const widgetData = data as any;
      console.log(
        `  ${page}: ${widgetData.domElements} DOM elements, ${widgetData.registeredWidgets} registered, ${widgetData.errors} errors`
      );
    }

    // Check for critical widget registry functionality
    const registryMessages = consoleMessages.filter(
      msg =>
        msg.includes('widget registry') ||
        msg.includes('Widget Registry') ||
        msg.includes('useWidgetRegistry')
    );

    const adapterMessages = consoleMessages.filter(
      msg => msg.includes('Adapter') && (msg.includes('Starting') || msg.includes('Completed'))
    );

    console.log(`\n🔧 Registry messages: ${registryMessages.length}`);
    console.log(`🔌 Adapter messages: ${adapterMessages.length}`);

    // Step 4: Assertions
    expect(testResults.successfulPages, 'Key admin pages should load successfully').toBe(
      keyPages.length
    );
    expect(widgetErrors, 'No widget-specific errors should occur').toHaveLength(0);
    expect(testResults.totalWidgets, 'Should find widgets on admin pages').toBeGreaterThan(0);

    // Check that widget registry is functioning
    const hasRegistryActivity = registryMessages.length > 0 || adapterMessages.length > 0;
    expect(hasRegistryActivity, 'Widget registry should be active').toBe(true);

    console.log('✅ Comprehensive widget test completed successfully!');
  });

  test('should specifically test widget loading and rendering', async ({ page }) => {
    console.log('🔧 Testing widget loading and rendering...');

    await loginPage.goto();
    await loginPage.login('akwan@pennineindustries.com', 'X315Y316');
    await page.waitForURL(/\/access/);

    // Focus on the main analysis page which has the most widgets
    await page.goto('/admin/analysis');
    await page.waitForLoadState('networkidle');

    // Wait for widget registry to initialize
    await page.waitForTimeout(4000);

    // Check for widget registry initialization
    const registryInit = consoleMessages.find(
      msg => msg.includes('Initializing widget registry') || msg.includes('useWidgetRegistry')
    );

    expect(registryInit, 'Widget registry should initialize').toBeTruthy();

    // Check for adapter registrations
    const adapterTypes = ['Charts', 'Lists', 'Reports', 'Operations', 'Analysis'];
    for (const type of adapterTypes) {
      const adapterLogs = consoleMessages.filter(
        msg => msg.includes(`${type}WidgetAdapter`) && msg.includes('Completed')
      );

      if (adapterLogs.length > 0) {
        console.log(`✅ ${type} adapter registered successfully`);
      }
    }

    // Check for lazy loading functionality
    const lazyLoadElements = await page
      .locator('[data-testid*="lazy"], [class*="lazy"], .loading, .skeleton')
      .count();
    console.log(`🔄 Lazy loading elements found: ${lazyLoadElements}`);

    // Verify no critical errors
    const criticalErrors = errors.filter(
      error =>
        error.includes('originalFactory.call') ||
        error.includes('Cannot read properties') ||
        error.includes('undefined is not an object')
    );

    expect(criticalErrors, 'No critical widget errors should occur').toHaveLength(0);

    console.log('✅ Widget loading and rendering test completed!');
  });

  test.afterEach(async ({ page }) => {
    // Generate comprehensive test report
    const report = {
      timestamp: new Date().toISOString(),
      summary: {
        consoleMessages: consoleMessages.length,
        errors: errors.length,
        widgetErrors: widgetErrors.length,
        networkErrors: networkErrors.length,
      },
      widgets: {
        registryMessages: consoleMessages.filter(
          msg => msg.includes('registry') || msg.includes('Registry')
        ).length,
        adapterMessages: consoleMessages.filter(msg => msg.includes('Adapter')).length,
        registeredWidgets: consoleMessages.filter(msg => msg.includes('Registered:')).length,
      },
      errors: {
        allErrors: errors,
        widgetSpecific: widgetErrors,
        networkIssues: networkErrors,
      },
    };

    console.log('\n📊 FINAL WIDGET TEST REPORT');
    console.log('============================');
    console.log(`Timestamp: ${report.timestamp}`);
    console.log(`Console Messages: ${report.summary.consoleMessages}`);
    console.log(`JavaScript Errors: ${report.summary.errors}`);
    console.log(`Widget Errors: ${report.summary.widgetErrors}`);
    console.log(`Network Errors: ${report.summary.networkErrors}`);
    console.log(`Registry Messages: ${report.widgets.registryMessages}`);
    console.log(`Adapter Messages: ${report.widgets.adapterMessages}`);
    console.log(`Registered Widgets: ${report.widgets.registeredWidgets}`);
    console.log('============================\n');
  });
});
