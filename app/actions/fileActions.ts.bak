'use server';

import { createClient } from '@supabase/supabase-js';
import { createClient as createServerClient } from '@/app/utils/supabase/server';
import { revalidatePath } from 'next/cache';
import { z } from 'zod';

// Validation schemas
const uploadFileSchema = z.object({
  file: z.instanceof(File),
  folder: z.enum(['stockPic', 'productSpec', 'photos', 'orderpdf']),
  fileName: z.string(),
  uploadBy: z.number().optional().default(1),
});

const fileValidation = {
  stockPic: ['.png', '.jpeg', '.jpg'],
  productSpec: ['.pdf', '.doc', '.docx'],
  photos: ['.png', '.jpeg', '.jpg', '.gif', '.webp'],
  orderpdf: ['.pdf'],
};

const maxFileSize = 10 * 1024 * 1024; // 10MB

// 創建 Supabase Admin Client
function createSupabaseAdmin() {
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

  if (!supabaseUrl || !serviceRoleKey) {
    throw new Error('Supabase environment variables are not set');
  }

  return createClient(supabaseUrl, serviceRoleKey, {
    auth: {
      autoRefreshToken: false,
      persistSession: false,
    },
  });
}

/**
 * Upload a file to Supabase Storage
 * 上傳文件到 Supabase Storage
 */
export async function uploadFile(formData: FormData) {
  try {
    // Extract file data from FormData
    const file = formData.get('file') as File;
    const folder = formData.get('folder') as string;
    const fileName = formData.get('fileName') as string;
    const uploadByStr = formData.get('uploadBy') as string;
    const uploadBy = uploadByStr ? parseInt(uploadByStr) : 1;

    // Validate input
    const validatedData = uploadFileSchema.parse({
      file,
      folder,
      fileName,
      uploadBy,
    });

    // Validate file extension
    const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase();
    const allowedExtensions = fileValidation[validatedData.folder];

    if (!allowedExtensions.includes(fileExtension)) {
      throw new Error(
        `Invalid file format for ${validatedData.folder}. Allowed: ${allowedExtensions.join(', ')}`
      );
    }

    // Validate file size
    if (file.size > maxFileSize) {
      throw new Error('File size must be less than 10MB');
    }

    // Get current user for audit
    const supabase = await createServerClient();
    const {
      data: { user },
    } = await supabase.auth.getUser();

    if (!user) {
      throw new Error('User not authenticated');
    }

    // Get user ID from data_id table
    const { data: userDataByEmail } = await supabase
      .from('data_id')
      .select('id')
      .eq('email', user.email || '')
      .single();

    const actualUploadBy = userDataByEmail?.id || uploadBy;

    // Create admin client for storage operations
    const supabaseAdmin = createSupabaseAdmin();

    // Convert file to array buffer
    const arrayBuffer = await file.arrayBuffer();
    const uint8Array = new Uint8Array(arrayBuffer);

    // Upload to Supabase Storage
    const filePath = `${validatedData.folder}/${validatedData.fileName}`;

    const { data, error } = await supabaseAdmin.storage
      .from('documents')
      .upload(filePath, uint8Array, {
        contentType: file.type,
        upsert: true,
        cacheControl: '3600',
      });

    if (error) {
      console.error('[uploadFile] Storage error:', error);
      throw new Error(`Upload failed: ${error.message}`);
    }

    // Get public URL
    const { data: urlData } = supabaseAdmin.storage.from('documents').getPublicUrl(filePath);

    if (!urlData?.publicUrl) {
      throw new Error('Failed to get public URL');
    }

    // Determine document type
    let docType: string;
    switch (validatedData.folder) {
      case 'stockPic':
        docType = 'image';
        break;
      case 'productSpec':
        docType = 'spec';
        break;
      case 'photos':
        docType = 'photo';
        break;
      case 'orderpdf':
        docType = 'order';
        break;
      default:
        docType = 'other';
    }

    // Insert record to doc_upload table
    const { data: insertData, error: insertError } = await supabaseAdmin
      .from('doc_upload')
      .insert({
        doc_name: validatedData.fileName,
        upload_by: actualUploadBy,
        doc_type: docType,
        doc_url: urlData.publicUrl,
        file_size: file.size,
        folder: validatedData.folder,
      })
      .select()
      .single();

    if (insertError) {
      console.error('[uploadFile] Database error:', insertError);
      // Don't throw - file upload was successful
    }

    // Insert history record
    if (insertData) {
      await supabaseAdmin.from('record_history').insert({
        action: `Upload ${docType} file`,
        remark: `Uploaded ${validatedData.fileName} to ${validatedData.folder}`,
        who: actualUploadBy.toString(),
        doc_url: urlData.publicUrl,
      });
    }

    // Revalidate relevant paths
    revalidatePath('/admin');

    return {
      success: true,
      data: {
        id: insertData?.uuid,
        path: data.path,
        url: urlData.publicUrl,
        fileName: validatedData.fileName,
        folder: validatedData.folder,
        size: file.size,
        type: file.type,
      },
    };
  } catch (error) {
    console.error('[uploadFile] Error:', error);

    if (error instanceof z.ZodError) {
      return {
        success: false,
        error: 'Invalid input: ' + error.errors.map(e => e.message).join(', '),
      };
    }

    return {
      success: false,
      error: error instanceof Error ? error.message : 'Upload failed',
    };
  }
}

/**
 * Delete a file from Supabase Storage
 * 刪除 Supabase Storage 中的文件
 */
export async function deleteFile(fileId: string) {
  try {
    const supabase = await createServerClient();

    // Get file details
    const { data: fileData, error: fetchError } = await supabase
      .from('doc_upload')
      .select('doc_name, folder, upload_by')
      .eq('uuid', fileId)
      .single();

    if (fetchError || !fileData) {
      throw new Error('File not found');
    }

    // Check permissions
    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user) {
      throw new Error('User not authenticated');
    }

    // Create admin client for storage operations
    const supabaseAdmin = createSupabaseAdmin();

    // Delete from storage
    const filePath = `${fileData.folder}/${fileData.doc_name}`;
    const { error: deleteError } = await supabaseAdmin.storage.from('documents').remove([filePath]);

    if (deleteError) {
      console.error('[deleteFile] Storage delete error:', deleteError);
      throw new Error(`Delete failed: ${deleteError.message}`);
    }

    // Delete from database
    const { error: dbError } = await supabase.from('doc_upload').delete().eq('uuid', fileId);

    if (dbError) {
      console.error('[deleteFile] Database delete error:', dbError);
      throw new Error('Failed to delete file record');
    }

    // Insert history record
    await supabase.from('record_history').insert({
      action: 'Delete file',
      remark: `Deleted ${fileData.doc_name} from ${fileData.folder}`,
      who: fileData.upload_by.toString(),
    });

    // Revalidate paths
    revalidatePath('/admin');

    return {
      success: true,
      message: 'File deleted successfully',
    };
  } catch (error) {
    console.error('[deleteFile] Error:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Delete failed',
    };
  }
}

/**
 * Get upload progress (simulated for Server Actions)
 * 獲取上傳進度（Server Actions 模擬）
 */
export async function getUploadProgress(fileId: string) {
  // Server Actions don't support real-time progress updates
  // This is a placeholder for future implementation with WebSockets or Server-Sent Events
  return {
    success: true,
    progress: 100,
    message: 'Server Actions do not support real-time progress tracking',
  };
}
