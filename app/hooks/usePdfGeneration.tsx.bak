'use client';

import { useState, useCallback } from 'react';
import { toast } from 'sonner';
import {
  generatePdf,
  generatePdfsBatch,
  printPdfs,
  type PdfGenerationOptions,
  type BatchPdfGenerationOptions,
  type PdfGenerationResult,
} from '@/app/utils/pdfGeneration';

interface UsePdfGenerationOptions {
  /** Default storage path */
  defaultStoragePath?: string;
  /** Whether to upload by default */
  defaultUpload?: boolean;
  /** Whether to auto-print by default */
  autoPrint?: boolean;
  /** Whether to merge PDFs for printing */
  mergePdfs?: boolean;
}

interface UsePdfGenerationReturn {
  /** Generate a single PDF */
  generateSinglePdf: (options: PdfGenerationOptions) => Promise<PdfGenerationResult>;
  /** Generate multiple PDFs */
  generateMultiplePdfs: (options: BatchPdfGenerationOptions) => Promise<PdfGenerationResult[]>;
  /** Print PDFs */
  print: (blobs: Blob[]) => Promise<void>;
  /** Current generation state */
  isGenerating: boolean;
  /** Current generation progress */
  progress: {
    current: number;
    total: number;
    percentage: number;
  };
  /** Generation errors */
  errors: string[];
  /** Clear errors */
  clearErrors: () => void;
}

/**
 * Unified PDF generation hook
 * 統一的 PDF 生成 Hook
 *
 * @example
 * ```typescript
 * const pdfGeneration = usePdfGeneration({
 *   defaultStoragePath: 'qc-labels',
 *   autoPrint: true
 * });
 *
 * // Generate single PDF
 * const result = await pdfGeneration.generateSinglePdf({
 *   component: <MyPdfComponent data={data} />,
 *   filename: 'my-document',
 *   upload: true
 * });
 *
 * // Generate multiple PDFs
 * const results = await pdfGeneration.generateMultiplePdfs({
 *   components: components,
 *   filenames: filenames,
 *   batchSize: 5,
 *   onProgress: (current, total) => process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "production" && console.log(`${current}/${total}`)
 * });
 * ```
 */
export function usePdfGeneration(options: UsePdfGenerationOptions = {}): UsePdfGenerationReturn {
  const {
    defaultStoragePath = 'pdfs',
    defaultUpload = false,
    autoPrint = false,
    mergePdfs: shouldMergePdfs = true,
  } = options;

  const [isGenerating, setIsGenerating] = useState(false);
  const [progress, setProgress] = useState({ current: 0, total: 0, percentage: 0 });
  const [errors, setErrors] = useState<string[]>([]);

  const generateSinglePdf = useCallback(
    async (pdfOptions: PdfGenerationOptions): Promise<PdfGenerationResult> => {
      try {
        setIsGenerating(true);
        setErrors([]);

        const result = await generatePdf({
          ...pdfOptions,
          upload: pdfOptions.upload ?? defaultUpload,
          storagePath: pdfOptions.storagePath ?? defaultStoragePath,
          onProgress: prog => {
            setProgress({ current: 1, total: 1, percentage: prog });
            pdfOptions.onProgress?.(prog);
          },
        });

        if (!result.success && result.error) {
          setErrors([result.error]);
          toast.error(result.error);
        } else if (result.success) {
          // Auto-print if enabled
          if (autoPrint && result.blob) {
            await printPdfs([result.blob], false);
          }
        }

        return result;
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'PDF generation failed';
        setErrors([errorMessage]);
        toast.error(errorMessage);
        return { success: false, error: errorMessage };
      } finally {
        setIsGenerating(false);
      }
    },
    [defaultUpload, defaultStoragePath, autoPrint]
  );

  const generateMultiplePdfs = useCallback(
    async (batchOptions: BatchPdfGenerationOptions): Promise<PdfGenerationResult[]> => {
      try {
        setIsGenerating(true);
        setErrors([]);

        const results = await generatePdfsBatch({
          ...batchOptions,
          upload: batchOptions.upload ?? defaultUpload,
          storagePath: batchOptions.storagePath ?? defaultStoragePath,
          onProgress: (current, total, status) => {
            const percentage = Math.round((current / total) * 100);
            setProgress({ current, total, percentage });
            batchOptions.onProgress?.(current, total, status);
          },
        });

        // Collect errors
        const failedResults = results.filter(r => !r.success);
        if (failedResults.length > 0) {
          const errorMessages = failedResults.map(r => r.error).filter(Boolean) as string[];
          setErrors(errorMessages);

          if (failedResults.length === results.length) {
            toast.error('All PDF generations failed');
          } else {
            toast.warning(`${failedResults.length} of ${results.length} PDFs failed`);
          }
        }

        // Auto-print successful PDFs if enabled
        if (autoPrint) {
          const successfulBlobs = results.filter(r => r.success && r.blob).map(r => r.blob!);

          if (successfulBlobs.length > 0) {
            await printPdfs(successfulBlobs, shouldMergePdfs);
          }
        }

        return results;
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'Batch PDF generation failed';
        setErrors([errorMessage]);
        toast.error(errorMessage);
        return [];
      } finally {
        setIsGenerating(false);
      }
    },
    [defaultUpload, defaultStoragePath, autoPrint, shouldMergePdfs]
  );

  const print = useCallback(
    async (blobs: Blob[]) => {
      try {
        await printPdfs(blobs, shouldMergePdfs);
        toast.success('Print dialog opened');
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'Print failed';
        toast.error(errorMessage);
        throw error;
      }
    },
    [shouldMergePdfs]
  );

  const clearErrors = useCallback(() => {
    setErrors([]);
  }, []);

  return {
    generateSinglePdf,
    generateMultiplePdfs,
    print,
    isGenerating,
    progress,
    errors,
    clearErrors,
  };
}

export default usePdfGeneration;
