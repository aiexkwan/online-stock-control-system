/**
 * 緩存和性能指標 API 端點
 * v1.8 系統優化 - 監控緩存性能和系統健康
 */

import { getWarehouseCacheService } from '@/lib/services/warehouse-cache-service';
import { getRedisCacheAdapter } from '@/lib/cache/redis-cache-adapter';
import { NextResponse } from 'next/server';

/**
 * 獲取緩存性能指標
 */
export async function GET() {
  const startTime = Date.now();

  try {
    const warehouseService = getWarehouseCacheService();
    const redisCache = getRedisCacheAdapter();

    // 並行獲取各種指標
    const [cacheMetrics, redisStats, redisMetrics, isRedisConnected] = await Promise.all([
      warehouseService.getCacheMetrics(),
      redisCache.getStats(),
      redisCache.getMetrics(),
      redisCache.ping(),
    ]);

    const responseTime = Date.now() - startTime;

    return NextResponse.json({
      status: 'healthy',
      timestamp: new Date().toISOString(),
      responseTime: `${responseTime}ms`,
      version: 'v1.8-optimized',

      // Redis 連接狀態
      redis: {
        connected: isRedisConnected,
        memory: redisStats.memory,
        connections: redisStats.connections,
        operations: redisStats.operations,
        hitRate: redisStats.hitRate,
      },

      // 緩存性能指標
      performance: {
        hits: redisMetrics.hits,
        misses: redisMetrics.misses,
        totalRequests: redisMetrics.totalRequests,
        hitRate: redisMetrics.hitRate.toFixed(2) + '%',
        avgResponseTime: redisMetrics.avgResponseTime.toFixed(2) + 'ms',
        errorRate:
          redisMetrics.errors > 0
            ? ((redisMetrics.errors / redisMetrics.totalRequests) * 100).toFixed(2) + '%'
            : '0%',
      },

      // 系統健康指標
      health: {
        cache: isRedisConnected ? 'healthy' : 'error',
        lastError: redisMetrics.lastError,
        lastErrorTime: redisMetrics.lastErrorTime,
        uptime: process.uptime(),
        memoryUsage: process.memoryUsage(),
      },

      // 緩存優化建議
      recommendations: generateOptimizationRecommendations(
        redisMetrics as unknown as Record<string, unknown>,
        redisStats as unknown as Record<string, unknown>
      ),
    });
  } catch (error) {
    const responseTime = Date.now() - startTime;
    console.error('Cache metrics API error:', error);

    return NextResponse.json(
      {
        status: 'error',
        timestamp: new Date().toISOString(),
        responseTime: `${responseTime}ms`,
        error: error instanceof Error ? (error as { message: string }).message : 'Unknown error',
        message: 'Failed to retrieve cache metrics',
      },
      {
        status: 500,
      }
    );
  }
}

/**
 * 清除指定的緩存 (開發/管理用途)
 */
export async function DELETE(request: Request, { params }: { params: Promise<{ id: string }> }) {
  try {
    const { searchParams } = new URL(request.url);
    const type = searchParams.get('type') as 'summary' | 'dashboard' | 'inventory' | 'all';
    const pattern = searchParams.get('pattern');

    const warehouseService = getWarehouseCacheService();
    const redisCache = getRedisCacheAdapter();

    if (pattern) {
      // 根據模式清除緩存
      const invalidatedCount = await redisCache.invalidatePattern(pattern);

      return NextResponse.json({
        status: 'success',
        message: `Invalidated ${invalidatedCount} cache entries matching pattern: ${pattern}`,
        timestamp: new Date().toISOString(),
      });
    } else if (type) {
      // 根據類型清除緩存
      await warehouseService.invalidateWarehouseCache(type);

      return NextResponse.json({
        status: 'success',
        message: `Invalidated ${type} cache`,
        timestamp: new Date().toISOString(),
      });
    } else {
      // 清除所有緩存
      await redisCache.clear();

      return NextResponse.json({
        status: 'success',
        message: 'All cache cleared',
        timestamp: new Date().toISOString(),
      });
    }
  } catch (error) {
    console.error('Cache clear API error:', error);

    return NextResponse.json(
      {
        status: 'error',
        error: error instanceof Error ? (error as { message: string }).message : 'Unknown error',
        message: 'Failed to clear cache',
      },
      {
        status: 500,
      }
    );
  }
}

/**
 * 預熱緩存 (管理用途)
 */
export async function POST() {
  try {
    const warehouseService = getWarehouseCacheService();

    // 預熱關鍵緩存
    await warehouseService.preWarmCache();

    return NextResponse.json({
      status: 'success',
      message: 'Cache pre-warming completed',
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    console.error('Cache pre-warm API error:', error);

    return NextResponse.json(
      {
        status: 'error',
        error: error instanceof Error ? (error as { message: string }).message : 'Unknown error',
        message: 'Failed to pre-warm cache',
      },
      {
        status: 500,
      }
    );
  }
}

/**
 * 生成緩存優化建議
 */
function generateOptimizationRecommendations(
  metrics: Record<string, unknown>,
  stats: Record<string, unknown>
): string[] {
  const recommendations = [];

  // 命中率建議
  const hitRate = typeof metrics.hitRate === 'number' ? metrics.hitRate : 0;
  if (hitRate < 70) {
    recommendations.push(
      'Cache hit rate is below 70%. Consider increasing TTL or pre-warming more data.'
    );
  } else if (hitRate > 95) {
    recommendations.push('Excellent cache hit rate! Consider increasing cache size for more data.');
  }

  // 響應時間建議
  const avgResponseTime = typeof metrics.avgResponseTime === 'number' ? metrics.avgResponseTime : 0;
  if (avgResponseTime > 50) {
    recommendations.push(
      'Average response time is high. Consider optimizing Redis configuration or network latency.'
    );
  }

  // 錯誤率建議
  const errors = typeof metrics.errors === 'number' ? metrics.errors : 0;
  if (errors > 0) {
    recommendations.push(`${errors} cache errors detected. Check Redis connectivity and logs.`);
  }

  // 內存使用建議
  if (typeof stats.memory === 'string' && stats.memory.includes('MB')) {
    const memoryMB = parseFloat(stats.memory.replace('MB', ''));
    if (memoryMB > 100) {
      recommendations.push(
        'Redis memory usage is high. Consider implementing cache eviction policies.'
      );
    }
  }

  // 連接數建議
  const connections = typeof stats.connections === 'number' ? stats.connections : 0;
  if (connections > 50) {
    recommendations.push(
      'High number of Redis connections. Consider connection pooling optimization.'
    );
  }

  if (recommendations.length === 0) {
    recommendations.push('Cache performance is optimal. No recommendations at this time.');
  }

  return recommendations;
}
