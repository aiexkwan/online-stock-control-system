'use client';

import React, { useState } from 'react';
import { 
  SupplierInput,
  SupplierField,
  ValidationForm,
  NumericInput,
  required,
  min,
  type SupplierInfo
} from '@/app/components/shared/validation';
import { useSupplierValidation } from '@/app/hooks/useSupplierValidation';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { toast } from 'sonner';

/**
 * Example of using supplier validation components
 * 使用供應商驗證組件的示例
 */
export function SupplierValidationExample() {
  const [selectedSupplier, setSelectedSupplier] = useState<SupplierInfo | null>(null);
  
  // Using the hook directly
  const supplierValidation = useSupplierValidation({
    enableFuzzySearch: true,
    maxSuggestions: 10
  });

  const handleFormSubmit = async (data: any) => {
    console.log('Form submitted:', data);
    toast.success('Form submitted successfully!');
  };

  const handleManualValidation = async () => {
    const result = await supplierValidation.validateSupplier('SUP001');
    if (result) {
      toast.success(`Valid supplier: ${result.supplier_name}`);
    } else {
      toast.error('Invalid supplier code');
    }
  };

  const validationRules = {
    supplierCode: [required('Supplier code is required')],
    quantity: [
      required('Quantity is required'),
      min(1, 'Minimum quantity is 1')
    ]
  };

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Supplier Validation Examples</CardTitle>
        </CardHeader>
        <CardContent>
          <Tabs defaultValue="component" className="w-full">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="component">Component</TabsTrigger>
              <TabsTrigger value="field">Field Group</TabsTrigger>
              <TabsTrigger value="hook">Hook Usage</TabsTrigger>
            </TabsList>
            
            <TabsContent value="component" className="space-y-4">
              <h3 className="text-lg font-semibold mb-4">Basic Supplier Input Component</h3>
              
              <SupplierInput
                label="Supplier Code"
                required
                enableSuggestions
                showSupplierName
                helperText="Start typing to see suggestions"
                onSupplierValidated={(supplier) => {
                  if (supplier) {
                    toast.success(`Selected: ${supplier.supplier_name}`);
                  }
                }}
              />
              
              <div className="mt-6">
                <h4 className="font-medium mb-2">Features:</h4>
                <ul className="list-disc list-inside space-y-1 text-sm text-gray-600">
                  <li>Auto-complete suggestions as you type</li>
                  <li>Real-time validation</li>
                  <li>Shows supplier name when valid</li>
                  <li>Keyboard navigation support</li>
                  <li>Auto-select on single match</li>
                </ul>
              </div>
            </TabsContent>
            
            <TabsContent value="field" className="space-y-4">
              <h3 className="text-lg font-semibold mb-4">Supplier Field Group</h3>
              
              <SupplierField
                showCard
                cardTitle="Supplier Information"
                onSupplierChange={(supplier) => {
                  setSelectedSupplier(supplier);
                }}
              />
              
              {selectedSupplier && (
                <Card className="mt-4 bg-green-50 border-green-200">
                  <CardContent className="pt-6">
                    <p className="text-sm text-green-800">
                      Selected Supplier: <strong>{selectedSupplier.supplier_code}</strong> - {selectedSupplier.supplier_name}
                    </p>
                  </CardContent>
                </Card>
              )}
            </TabsContent>
            
            <TabsContent value="hook" className="space-y-4">
              <h3 className="text-lg font-semibold mb-4">Using the Hook Directly</h3>
              
              <div className="space-y-4">
                <div>
                  <label className="text-sm font-medium">Search Suppliers</label>
                  <input
                    type="text"
                    className="w-full mt-1 p-2 border rounded"
                    placeholder="Type to search..."
                    onChange={(e) => supplierValidation.debouncedSearch(e.target.value)}
                  />
                </div>
                
                {supplierValidation.isSearching && (
                  <p className="text-sm text-gray-500">Searching...</p>
                )}
                
                {supplierValidation.suggestions.length > 0 && (
                  <div className="border rounded-md divide-y">
                    {supplierValidation.suggestions.map((suggestion) => (
                      <div key={suggestion.supplier_code} className="p-3">
                        <div className="font-medium">{suggestion.supplier_code}</div>
                        <div className="text-sm text-gray-600">{suggestion.supplier_name}</div>
                        <div className="text-xs text-gray-400">
                          Match: {suggestion.match_type} (Score: {suggestion.match_score})
                        </div>
                      </div>
                    ))}
                  </div>
                )}
                
                <Button onClick={handleManualValidation}>
                  Test Validate SUP001
                </Button>
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
      
      <Card>
        <CardHeader>
          <CardTitle>In a Form Context</CardTitle>
        </CardHeader>
        <CardContent>
          <ValidationForm
            validationRules={validationRules}
            onSubmit={handleFormSubmit}
            validateOnSubmit
          >
            <div className="space-y-4">
              <SupplierInput
                name="supplierCode"
                label="Supplier Code"
                required
                enableSuggestions
              />
              
              <NumericInput
                name="quantity"
                label="Order Quantity"
                required
                min={1}
                max={9999}
                suffix=" units"
              />
              
              <Button type="submit" className="w-full">
                Submit Order
              </Button>
            </div>
          </ValidationForm>
        </CardContent>
      </Card>
    </div>
  );
}