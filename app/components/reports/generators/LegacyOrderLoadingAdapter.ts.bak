/**
 * 適配器：將統一框架數據轉換為舊版 Order Loading PDF 生成器格式
 */

import { ProcessedReportData, ReportConfig } from '../core/ReportConfig';
import { LegacyOrderLoadingPdfGenerator } from '../core/LegacyOrderLoadingPdfGenerator';
import { UnknownTypeHandler } from '@/lib/types/unknown-handlers';

export class LegacyOrderLoadingAdapter {
  /**
   * 將統一框架數據轉換為舊版格式並生成 PDF
   */
  static async generatePdf(data: ProcessedReportData, config: ReportConfig): Promise<Blob> {
    // 從 metadata 中提取日期範圍和過濾器
    const dateRange = this.extractDateRange(data.metadata.filters);
    const filters = this.extractFilters(data.metadata.filters);

    // 轉換各區段數據 - 使用策略4: unknown + type narrowing
    const summaryData = data.sections.summary ?? data.summary;
    const orderProgressData = data.sections.orderProgress ?? [];
    const loadingDetailsData = data.sections.loadingDetails ?? [];
    const userPerformanceData = data.sections.userPerformance ?? [];

    // 使用舊版生成器
    const generator = new LegacyOrderLoadingPdfGenerator();
    return generator.generate({
      dateRange,
      filters,
      summary: {
        totalOrders: UnknownTypeHandler.toNumber(
          UnknownTypeHandler.safeGet(summaryData, 'totalOrders', 0),
          0
        ),
        completedOrders: UnknownTypeHandler.toNumber(
          UnknownTypeHandler.safeGet(summaryData, 'completedOrders', 0),
          0
        ),
        totalItemsLoaded: UnknownTypeHandler.toNumber(
          UnknownTypeHandler.safeGet(summaryData, 'totalItemsLoaded', 0),
          0
        ),
        avgCompletionRate: UnknownTypeHandler.toNumber(
          UnknownTypeHandler.safeGet(summaryData, 'avgCompletionRate', 0),
          0
        ),
      },
      orderProgress: this.transformOrderProgress(orderProgressData),
      loadingDetails: this.transformLoadingDetails(loadingDetailsData),
      userPerformance: this.transformUserPerformance(userPerformanceData),
    });
  }

  private static extractDateRange(filters: Record<string, unknown>): {
    start: string;
    end: string;
  } {
    // 處理 dateRange 過濾器
    const dateRange = filters.dateRange;
    if (typeof dateRange === 'string' && dateRange.includes('|')) {
      const [start, end] = dateRange.split('|');
      return { start, end };
    }

    // 處理單獨的日期
    return {
      start: typeof filters.startDate === 'string' ? filters.startDate : '',
      end: typeof filters.endDate === 'string' ? filters.endDate : '',
    };
  }

  private static extractFilters(filters: Record<string, unknown>): Record<string, unknown> {
    return {
      orderNumber: filters.orderNumber || undefined,
      productCode: filters.productCode || undefined,
      userId: filters.userId || undefined,
      status: filters.status || undefined,
    };
  }

  private static transformOrderProgress(data: unknown): {
    order_number: string;
    order_date: string;
    total_items: number;
    loaded_items: number;
    completion_rate: number;
    status: string;
  }[] {
    if (!Array.isArray(data)) return [];

    return UnknownTypeHandler.transformUnknownArray(data, item => {
      if (typeof item !== 'object' || item === null) return null;

      return {
        order_number: UnknownTypeHandler.toString(
          UnknownTypeHandler.safeGet(item, 'order_number', ''),
          ''
        ),
        order_date: UnknownTypeHandler.toString(
          UnknownTypeHandler.safeGet(item, 'order_date', ''),
          ''
        ),
        total_items: UnknownTypeHandler.toNumber(
          UnknownTypeHandler.safeGet(item, 'total_items', 0),
          0
        ),
        loaded_items: UnknownTypeHandler.toNumber(
          UnknownTypeHandler.safeGet(item, 'loaded_items', 0),
          0
        ),
        completion_rate: UnknownTypeHandler.toNumber(
          UnknownTypeHandler.safeGet(item, 'completion_rate', 0),
          0
        ),
        status: UnknownTypeHandler.toString(
          UnknownTypeHandler.safeGet(item, 'status', 'Pending'),
          'Pending'
        ),
      };
    });
  }

  private static transformLoadingDetails(data: unknown): {
    timestamp: string;
    order_number: string;
    product_code: string;
    product_description: string;
    loaded_qty: number;
    user_name: string;
    action: string;
  }[] {
    if (!Array.isArray(data)) return [];

    return UnknownTypeHandler.transformUnknownArray(data, item => {
      if (typeof item !== 'object' || item === null) return null;

      return {
        timestamp: UnknownTypeHandler.toString(
          UnknownTypeHandler.safeGet(item, 'timestamp', '') ||
            UnknownTypeHandler.safeGet(item, 'created_at', ''),
          ''
        ),
        order_number: UnknownTypeHandler.toString(
          UnknownTypeHandler.safeGet(item, 'order_number', ''),
          ''
        ),
        product_code: UnknownTypeHandler.toString(
          UnknownTypeHandler.safeGet(item, 'product_code', ''),
          ''
        ),
        product_description: UnknownTypeHandler.toString(
          UnknownTypeHandler.safeGet(item, 'product_description', ''),
          ''
        ),
        loaded_qty: UnknownTypeHandler.toNumber(
          UnknownTypeHandler.safeGet(item, 'loaded_qty', 0),
          0
        ),
        user_name: UnknownTypeHandler.toString(
          UnknownTypeHandler.safeGet(item, 'user_name', ''),
          ''
        ),
        action: UnknownTypeHandler.toString(
          UnknownTypeHandler.safeGet(item, 'action', 'Load'),
          'Load'
        ),
      };
    });
  }

  private static transformUserPerformance(data: unknown): {
    user_id: string;
    user_name: string;
    total_loads: number;
    total_quantity: number;
    avg_load_time: string;
  }[] {
    if (!Array.isArray(data)) return [];

    return UnknownTypeHandler.transformUnknownArray(data, item => {
      if (typeof item !== 'object' || item === null) return null;

      return {
        user_id: UnknownTypeHandler.toString(UnknownTypeHandler.safeGet(item, 'user_id', ''), ''),
        user_name: UnknownTypeHandler.toString(
          UnknownTypeHandler.safeGet(item, 'user_name', ''),
          ''
        ),
        total_loads: UnknownTypeHandler.toNumber(
          UnknownTypeHandler.safeGet(item, 'total_loads', 0),
          0
        ),
        total_quantity: UnknownTypeHandler.toNumber(
          UnknownTypeHandler.safeGet(item, 'total_quantity', 0),
          0
        ),
        avg_load_time: UnknownTypeHandler.toString(
          UnknownTypeHandler.safeGet(item, 'avg_load_time', 'N/A'),
          'N/A'
        ),
      };
    });
  }
}
