/**
 * Unified Error Handler Hook for Widgets
 * 提供統一嘅錯誤處理機制，整合 ErrorHandler service
 */

'use client';

import { useCallback, useRef } from 'react';
import { toast } from 'sonner';
import {
  errorHandler as globalErrorHandler,
  ErrorContext,
} from '@/app/components/qc-label-form/services/ErrorHandler';
import { TransactionLogService } from '@/app/services/transactionLog.service';
import type {
  WidgetErrorContext,
  ErrorHandleResult,
  FormSubmissionData,
  FileOperationDetails,
} from './types';

export interface WidgetErrorOptions {
  showToast?: boolean;
  logToDatabase?: boolean;
  transactionId?: string;
  customMessage?: string;
}

export function useWidgetErrorHandler(widgetName: string, userId?: string) {
  const transactionLog = useRef(new TransactionLogService());

  /**
   * Handle generic widget errors
   */
  const handleError = useCallback(
    async (
      error: Error | unknown,
      action: string,
      additionalData?: Record<string, unknown>,
      options: WidgetErrorOptions = {}
    ): Promise<ErrorHandleResult> => {
      const { showToast = true, logToDatabase = true, transactionId, customMessage } = options;

      // Convert unknown error to Error object
      const err =
        error instanceof Error
          ? error
          : new Error(typeof error === 'string' ? error : 'Unknown error occurred');

      // Create error context
      const context: ErrorContext = {
        component: `Widget.${widgetName}`,
        action,
        userId,
        additionalData: {
          ...additionalData,
          timestamp: new Date().toISOString(),
          widget: widgetName,
        },
      };

      // Log to console for debugging
      console.error(`[${widgetName}] Error in ${action}:`, err, additionalData);

      // Use global error handler
      if (logToDatabase) {
        globalErrorHandler.handleApiError(err, context, customMessage);
      } else if (showToast) {
        const userMessage = customMessage || generateUserMessage(err, action);
        toast.error(userMessage);
      }

      // Record in transaction log if transaction ID provided
      if (transactionId) {
        await transactionLog.current.recordError(transactionId, err, action);
      }

      return {
        error: err,
        handled: true,
        context,
      };
    },
    [widgetName, userId]
  );

  /**
   * Handle data fetching errors
   */
  const handleFetchError = useCallback(
    (error: Error | unknown, endpoint?: string) => {
      return handleError(
        error,
        'data_fetch',
        { endpoint },
        {
          customMessage: 'Failed to load data. Please try refreshing the page.',
        }
      );
    },
    [handleError]
  );

  /**
   * Handle form submission errors
   */
  const handleSubmitError = useCallback(
    (error: Error | unknown, formData?: FormSubmissionData) => {
      return handleError(
        error,
        'form_submit',
        { formData },
        {
          customMessage: 'Failed to save changes. Please check your input and try again.',
        }
      );
    },
    [handleError]
  );

  /**
   * Handle file operation errors
   */
  const handleFileError = useCallback(
    (error: Error | unknown, operation: string, fileName?: string) => {
      return handleError(
        error,
        `file_${operation}`,
        { fileName },
        {
          customMessage: `Failed to ${operation} file. Please try again.`,
        }
      );
    },
    [handleError]
  );

  /**
   * Handle successful operations
   */
  const handleSuccess = useCallback(
    (message: string, action: string, details?: Record<string, unknown>) => {
      const context: ErrorContext = {
        component: `Widget.${widgetName}`,
        action,
        userId,
        additionalData: details,
      };

      globalErrorHandler.handleSuccess(message, context);
    },
    [widgetName, userId]
  );

  /**
   * Handle warnings
   */
  const handleWarning = useCallback(
    (message: string, action: string, showToast = true) => {
      const context: ErrorContext = {
        component: `Widget.${widgetName}`,
        action,
        userId,
      };

      globalErrorHandler.handleWarning(message, context, showToast);
    },
    [widgetName, userId]
  );

  /**
   * Handle validation errors
   */
  const handleValidationError = useCallback(
    (fieldName: string, errorMessage: string) => {
      const context: ErrorContext = {
        component: `Widget.${widgetName}`,
        action: 'validation',
        userId,
      };

      globalErrorHandler.handleValidationError(fieldName, errorMessage, context);
    },
    [widgetName, userId]
  );

  return {
    handleError,
    handleFetchError,
    handleSubmitError,
    handleFileError,
    handleSuccess,
    handleWarning,
    handleValidationError,
    errorHandler: globalErrorHandler,
  };
}

/**
 * Generate user-friendly error messages based on error type
 */
function generateUserMessage(error: Error, action: string): string {
  const errorMessage = error.message.toLowerCase();

  // Network errors
  if (errorMessage.includes('network') || errorMessage.includes('fetch')) {
    return 'Network connection issue. Please check your internet connection.';
  }

  // Authentication errors
  if (errorMessage.includes('auth') || errorMessage.includes('unauthorized')) {
    return 'Authentication required. Please log in again.';
  }

  // Not found errors
  if (errorMessage.includes('not found') || errorMessage.includes('404')) {
    return 'The requested information was not found.';
  }

  // Timeout errors
  if (errorMessage.includes('timeout')) {
    return 'The operation timed out. Please try again.';
  }

  // Database errors
  if (errorMessage.includes('database') || errorMessage.includes('supabase')) {
    return 'Database error occurred. Please try again later.';
  }

  // Action-specific messages
  switch (action) {
    case 'data_fetch':
      return 'Failed to load data. Please refresh the page.';
    case 'form_submit':
      return 'Failed to save changes. Please try again.';
    case 'file_upload':
      return 'File upload failed. Please try again.';
    case 'file_download':
      return 'File download failed. Please try again.';
    default:
      return 'An error occurred. Please try again.';
  }
}
