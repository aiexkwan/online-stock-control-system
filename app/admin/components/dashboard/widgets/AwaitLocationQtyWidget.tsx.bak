/**
 * Await Location Quantity Widget
 * 顯示倉庫等待區庫存數量
 */

import React from 'react';
import { DatabaseRecord } from '@/types/database/tables';
import { BatchQueryWidgetComponentProps } from '@/types/components/dashboard';
import { useWidgetData } from '@/app/admin/contexts/DashboardDataContext';
import { MetricCard } from './common';
import { Package } from 'lucide-react';

const AwaitLocationQtyWidget: React.FC<BatchQueryWidgetComponentProps> = ({ widgetId }) => {
  const { data, loading, error } = useWidgetData(widgetId);

  // 計算等待區總數量
  const awaitQty = React.useMemo(() => {
    // Type guard for await location data
    if (!data || typeof data !== 'object') return 0;

    const awaitData = data as { records?: DatabaseRecord[]; value?: number };

    // Try direct value first (preferred)
    if (typeof awaitData.value === 'number') {
      return awaitData.value;
    }

    // Fall back to calculating from records
    if (!awaitData.records || !Array.isArray(awaitData.records)) return 0;

    return awaitData.records.reduce((total: number, record: DatabaseRecord) => {
      // 假設 location 欄位包含 'AWAIT' 表示等待區
      if (
        record.location &&
        typeof record.location === 'string' &&
        record.location.includes('AWAIT')
      ) {
        return total + (typeof record.quantity === 'number' ? record.quantity : 0);
      }
      return total;
    }, 0);
  }, [data]);

  return (
    <MetricCard
      title='Await Location Qty'
      value={awaitQty}
      description='Total quantity in await locations'
      loading={loading}
      error={error}
      icon={Package}
      trend={
        data && typeof data === 'object' && 'trend' in data
          ? (data as { trend: 'up' | 'down' | 'neutral' | undefined }).trend
          : undefined
      }
    />
  );
};

export default AwaitLocationQtyWidget;
