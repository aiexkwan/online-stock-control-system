import React, { useMemo } from 'react';
import { Box, TrendingUp, AlertTriangle, CheckCircle } from 'lucide-react';
import { MetricCard } from './common/data-display/MetricCard';
import { useDashboardConcurrentQuery } from '@/app/admin/hooks/useDashboardConcurrentQuery';
import { AdminWidgetConfig } from '../adminDashboardLayouts';
import {
  WidgetErrorBoundary,
  useErrorHandler,
  WidgetErrorFallback,
  ERROR_MESSAGES,
} from '@/lib/error-handling';

interface UnifiedStatsWidgetProps {
  config: AdminWidgetConfig;
  dateRange?: {
    start: string;
    end: string;
  };
  warehouse?: string;
}

/**
 * UnifiedStatsWidget - 統一統計組件 (增強錯誤處理版本)
 *
 * 基於現有的 MetricCard 組件，提供統一的統計數據顯示
 * 支持多種統計類型和動態配置
 * 整合了統一錯誤邊界系統
 */
export const UnifiedStatsWidget: React.FC<UnifiedStatsWidgetProps> = props => {
  return (
    <WidgetErrorBoundary
      widgetName='UnifiedStats'
      fallback={({ retry, reset }) => (
        <WidgetErrorFallback
          error={new Error(ERROR_MESSAGES.WIDGET.STATS_LOAD_FAILED)}
          retry={retry}
          reset={reset}
          widgetName={props.config.title}
        />
      )}
      recoveryStrategy={{
        primaryAction: 'retry',
        secondaryActions: ['refresh'],
        autoRetry: {
          enabled: true,
          maxAttempts: 3,
          delayMs: 1000,
        },
      }}
    >
      <UnifiedStatsWidgetContent {...props} />
    </WidgetErrorBoundary>
  );
};

// 將實際的 widget 內容分離到獨立組件
const UnifiedStatsWidgetContent: React.FC<UnifiedStatsWidgetProps> = ({
  config,
  dateRange,
  warehouse,
}) => {
  const { handleError } = useErrorHandler('UnifiedStatsWidget');

  // 轉換 dateRange 格式以匹配 DashboardDateRange 接口
  const dashboardDateRange = dateRange
    ? {
        startDate: new Date(dateRange.start),
        endDate: new Date(dateRange.end),
      }
    : {
        startDate: null,
        endDate: null,
      };

  // 使用現有的統一API查詢機制
  const { data, isLoading, error } = useDashboardConcurrentQuery({
    dateRange: dashboardDateRange,
    enabledWidgets: [config.dataSource || 'default'],
    enabled: true,
  });

  // 處理查詢錯誤
  React.useEffect(() => {
    if (error) {
      handleError(typeof error === 'string' ? new Error(error) : error, 'data_fetch', {
        userMessage: ERROR_MESSAGES.WIDGET.STATS_LOAD_FAILED,
      });
    }
  }, [error, config.title, handleError]);

  // 動態選擇圖標
  const getIcon = (title: string) => {
    if (title.includes('Production') || title.includes('Today')) return Box;
    if (title.includes('Efficiency') || title.includes('Score')) return TrendingUp;
    if (title.includes('Error') || title.includes('Issue')) return AlertTriangle;
    if (title.includes('Success') || title.includes('Complete')) return CheckCircle;
    return Box; // 默認圖標
  };

  // 處理統計數據
  const processedData = useMemo(() => {
    try {
      if (!data || !config.metrics) return null;

      const sourceData = data[config.dataSource || 'default'] as Record<string, unknown>;
      if (!sourceData) return null;

      // 根據配置的第一個指標提取數據
      const primaryMetric = config.metrics[0];
      const value = typeof sourceData[primaryMetric] === 'number' ? sourceData[primaryMetric] : 0;

      // 如果配置了多個指標，可以用於計算或顯示額外信息
      const additionalMetrics = config.metrics.slice(1);
      const additionalData = additionalMetrics.map(metric => ({
        key: metric,
        value: typeof sourceData[metric] === 'number' ? sourceData[metric] : 0,
      }));

      return {
        value,
        additionalData,
        rawData: sourceData,
      };
    } catch (processingError) {
      handleError(processingError as Error, 'data_processing', {
        userMessage: ERROR_MESSAGES.API.GENERAL,
      });
      return null;
    }
  }, [data, config.dataSource, config.metrics, handleError]);

  // 格式化數值顯示
  const formatValue = (value: number | string): string => {
    try {
      if (typeof value === 'string') return value;
      if (typeof value !== 'number') return '0';

      // 處理百分比
      if (config.title.includes('%') || config.title.includes('Percentage')) {
        return `${(value * 100).toFixed(1)}%`;
      }

      // 處理大數值
      if (value >= 1000000) {
        return `${(value / 1000000).toFixed(1)}M`;
      }
      if (value >= 1000) {
        return `${(value / 1000).toFixed(1)}K`;
      }

      return value.toString();
    } catch (formatError) {
      handleError(formatError as Error, 'format_value', {
        userMessage: ERROR_MESSAGES.VALIDATION.INVALID_FORMAT,
      });
      return 'N/A';
    }
  };

  // 生成標籤
  const getLabel = (): string => {
    if (config.description) return config.description;
    if (config.dataSource) return `來源: ${config.dataSource}`;
    return 'Statistics';
  };

  // 錯誤狀態處理 - 由錯誤邊界處理，這裡只返回 null
  if (error) {
    return null;
  }

  // 渲染 MetricCard
  return (
    <MetricCard
      title={config.title}
      value={processedData ? formatValue(processedData.value) : '0'}
      label={getLabel()}
      icon={getIcon(config.title)}
      dateRange={dateRange ? `${dateRange.start} - ${dateRange.end}` : undefined}
      loading={isLoading}
      animateOnMount={true}
      performanceMetrics={{
        source: 'REST API',
        optimized: true,
      }}
    />
  );
};

export default UnifiedStatsWidget;
