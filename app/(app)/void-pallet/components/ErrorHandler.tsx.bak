'use client';

import React from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import {
  ExclamationTriangleIcon,
  XCircleIcon,
  InformationCircleIcon,
  ExclamationCircleIcon,
} from '@heroicons/react/24/outline';
import { ErrorState } from '../types';
import { format } from 'date-fns';

interface ErrorHandlerProps {
  error: ErrorState;
  onConfirm: () => void;
  className?: string;
}

export function ErrorHandler({ error, onConfirm, className = '' }: ErrorHandlerProps) {
  const getErrorIcon = (type: ErrorState['type']) => {
    switch (type) {
      case 'search':
        return <InformationCircleIcon className='h-5 w-5' />;
      case 'void':
        return <ExclamationCircleIcon className='h-5 w-5' />;
      case 'system':
        return <XCircleIcon className='h-5 w-5' />;
      case 'validation':
        return <ExclamationTriangleIcon className='h-5 w-5' />;
      default:
        return <ExclamationCircleIcon className='h-5 w-5' />;
    }
  };

  const getErrorColor = (type: ErrorState['type']) => {
    switch (type) {
      case 'search':
        return 'text-blue-400 border-blue-600/30 bg-blue-900/20';
      case 'void':
        return 'text-red-400 border-red-600/30 bg-red-900/20';
      case 'system':
        return 'text-red-400 border-red-600/30 bg-red-900/20';
      case 'validation':
        return 'text-yellow-400 border-yellow-600/30 bg-yellow-900/20';
      default:
        return 'text-red-400 border-red-600/30 bg-red-900/20';
    }
  };

  const getErrorTitle = (type: ErrorState['type']) => {
    switch (type) {
      case 'search':
        return 'Search Error';
      case 'void':
        return 'Void Error';
      case 'system':
        return 'System Error';
      case 'validation':
        return 'Validation Error';
      default:
        return 'Error';
    }
  };

  const colorClasses = getErrorColor(error.type);

  return (
    <Card className={`border-2 ${colorClasses} ${className}`}>
      <CardContent className='p-6'>
        <div className='flex items-start space-x-4'>
          <div
            className={`flex-shrink-0 ${
              error.type === 'search'
                ? 'text-blue-400'
                : error.type === 'validation'
                  ? 'text-yellow-400'
                  : 'text-red-400'
            }`}
          >
            {getErrorIcon(error.type)}
          </div>

          <div className='min-w-0 flex-1'>
            <h3
              className={`text-lg font-semibold ${
                error.type === 'search'
                  ? 'text-blue-400'
                  : error.type === 'validation'
                    ? 'text-yellow-400'
                    : 'text-red-400'
              }`}
            >
              {getErrorTitle(error.type)}
            </h3>

            <p className='mt-2 text-sm leading-relaxed text-white'>{error.message}</p>

            {error.details && (
              <details className='mt-3'>
                <summary className='cursor-pointer text-xs text-gray-400 hover:text-gray-300'>
                  Show details
                </summary>
                <div className='mt-2 rounded border border-gray-600 bg-gray-900 p-3'>
                  <pre className='overflow-x-auto whitespace-pre-wrap text-xs text-gray-300'>
                    {error.details}
                  </pre>
                </div>
              </details>
            )}

            <div className='mt-4 flex items-center justify-between'>
              <span className='text-xs text-gray-500'>
                {format(error.timestamp, 'yyyy-MM-dd HH:mm:ss')}
              </span>

              <Button
                onClick={onConfirm}
                variant={error.type === 'search' ? 'default' : 'destructive'}
                size='sm'
                className='ml-4'
              >
                Confirm
              </Button>
            </div>
          </div>
        </div>

        {error.isBlocking && (
          <div className='mt-4 rounded border border-gray-600 bg-gray-900 p-3'>
            <p className='flex items-center text-xs text-gray-400'>
              <ExclamationTriangleIcon className='mr-1 h-3 w-3' />
              This error blocks further operations. Please click confirm and retry.
            </p>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
