'use client';

import React from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Check, Loader2, X, AlertCircle } from 'lucide-react';

export interface ProcessingStep {
  id: string;
  label: string;
  status: 'pending' | 'processing' | 'completed' | 'error' | 'warning';
  message?: string;
}

interface ProcessingStepsProps {
  steps: ProcessingStep[];
  isVisible: boolean;
}

export function ProcessingSteps({ steps, isVisible }: ProcessingStepsProps) {
  return (
    <AnimatePresence>
      {isVisible && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -20 }}
          transition={{ duration: 0.3 }}
          className='rounded-2xl border border-slate-700/50 bg-slate-800/40 p-6 shadow-xl backdrop-blur-xl'
        >
          <h3 className='mb-4 text-lg font-semibold text-white'>Processing Void Operation</h3>

          <div className='space-y-3'>
            {steps.map((step, index) => (
              <ProcessingStepItem key={step.id} step={step} index={index} />
            ))}
          </div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}

function ProcessingStepItem({ step, index }: { step: ProcessingStep; index: number }) {
  const getIcon = () => {
    switch (step.status) {
      case 'pending':
        return <div className='h-5 w-5 rounded-full border-2 border-gray-500' />;
      case 'processing':
        return <Loader2 className='h-5 w-5 animate-spin text-blue-400' />;
      case 'completed':
        return <Check className='h-5 w-5 text-green-400' />;
      case 'error':
        return <X className='h-5 w-5 text-red-400' />;
      case 'warning':
        return <AlertCircle className='h-5 w-5 text-yellow-400' />;
    }
  };

  const getLineColor = () => {
    switch (step.status) {
      case 'pending':
        return 'bg-gray-700';
      case 'processing':
        return 'bg-blue-500';
      case 'completed':
        return 'bg-green-500';
      case 'error':
        return 'bg-red-500';
      case 'warning':
        return 'bg-yellow-500';
    }
  };

  const getTextColor = () => {
    switch (step.status) {
      case 'pending':
        return 'text-gray-400';
      case 'processing':
        return 'text-blue-400';
      case 'completed':
        return 'text-green-400';
      case 'error':
        return 'text-red-400';
      case 'warning':
        return 'text-yellow-400';
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, x: -20 }}
      animate={{ opacity: 1, x: 0 }}
      transition={{ delay: index * 0.1 }}
      className='flex items-start gap-3'
    >
      <div className='flex flex-col items-center'>
        <motion.div
          animate={{
            scale: step.status === 'processing' ? [1, 1.2, 1] : 1,
          }}
          transition={{
            duration: 1,
            repeat: step.status === 'processing' ? Infinity : 0,
            ease: 'easeInOut',
          }}
        >
          {getIcon()}
        </motion.div>

        {/* Connecting line */}
        {index < 3 && (
          <div className={`mt-2 h-8 w-0.5 ${getLineColor()} transition-colors duration-300`} />
        )}
      </div>

      <div className='flex-grow'>
        <p className={`font-medium ${getTextColor()} transition-colors duration-300`}>
          {step.label}
        </p>
        {step.message && <p className='mt-1 text-sm text-gray-400'>{step.message}</p>}
      </div>
    </motion.div>
  );
}

// Default processing steps
export const defaultVoidSteps: ProcessingStep[] = [
  {
    id: 'validate',
    label: 'Validating pallet information',
    status: 'pending',
  },
  {
    id: 'update',
    label: 'Updating pallet status',
    status: 'pending',
  },
  {
    id: 'inventory',
    label: 'Adjusting inventory levels',
    status: 'pending',
  },
  {
    id: 'complete',
    label: 'Completing void operation',
    status: 'pending',
  },
];

// Hook for managing processing steps
export function useProcessingSteps() {
  const [steps, setSteps] = React.useState<ProcessingStep[]>(defaultVoidSteps);
  const [isVisible, setIsVisible] = React.useState(false);

  const updateStep = React.useCallback((stepId: string, updates: Partial<ProcessingStep>) => {
    setSteps(prev => prev.map(step => (step.id === stepId ? { ...step, ...updates } : step)));
  }, []);

  const resetSteps = React.useCallback(() => {
    setSteps(defaultVoidSteps);
    setIsVisible(false);
  }, []);

  const startProcessing = React.useCallback(() => {
    setIsVisible(true);
    updateStep('validate', { status: 'processing' });
  }, [updateStep]);

  return {
    steps,
    isVisible,
    updateStep,
    resetSteps,
    startProcessing,
    setIsVisible,
  };
}
