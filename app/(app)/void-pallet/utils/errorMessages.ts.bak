/**
 * Enhanced error message handling for void pallet
 * Provides user-friendly error messages with suggested actions
 */

export interface ErrorMessageConfig {
  code: string;
  userMessage: string;
  technicalMessage?: string;
  suggestedActions?: string[];
  severity: 'info' | 'warning' | 'error';
}

// Common error patterns and their user-friendly messages
const errorPatterns: Array<{
  pattern: RegExp | string;
  config: ErrorMessageConfig;
}> = [
  {
    pattern: /already voided|is already voided/i,
    config: {
      code: 'ALREADY_VOIDED',
      userMessage: 'This pallet has already been voided',
      suggestedActions: [
        'Check if you entered the correct pallet number',
        'View pallet history for void details',
      ],
      severity: 'warning',
    },
  },
  {
    pattern: /already damaged|is already damaged/i,
    config: {
      code: 'ALREADY_DAMAGED',
      userMessage: 'This pallet has already been marked as damaged',
      suggestedActions: [
        'Check if you entered the correct pallet number',
        'View pallet history for damage details',
      ],
      severity: 'warning',
    },
  },
  {
    pattern: /pallet not found/i,
    config: {
      code: 'NOT_FOUND',
      userMessage: 'Pallet not found in the system',
      suggestedActions: [
        'Verify the pallet number or QR code',
        'Try searching with a different format',
        'Check if the pallet was recently created',
      ],
      severity: 'error',
    },
  },
  {
    pattern: /invalid.*format|format.*invalid/i,
    config: {
      code: 'INVALID_FORMAT',
      userMessage: 'Invalid search format',
      suggestedActions: [
        'Pallet number format: DDMMYY/XX (e.g., 241224/01)',
        'Series format: DDMMYY-XXXXXX (e.g., 241224-ABC123)',
      ],
      severity: 'error',
    },
  },
  {
    pattern: /password.*fail|incorrect password|wrong password/i,
    config: {
      code: 'AUTH_FAILED',
      userMessage: 'Password verification failed',
      suggestedActions: [
        'Please enter your correct password',
        'Contact administrator if you forgot your password',
      ],
      severity: 'error',
    },
  },
  {
    pattern: /network.*error|connection.*fail/i,
    config: {
      code: 'NETWORK_ERROR',
      userMessage: 'Network connection error',
      suggestedActions: [
        'Check your internet connection',
        'Try again in a few moments',
        'Contact IT support if the problem persists',
      ],
      severity: 'error',
    },
  },
  {
    pattern: /aco.*not.*support.*partial/i,
    config: {
      code: 'ACO_NO_PARTIAL',
      userMessage: 'ACO Order Pallets cannot be partially damaged',
      suggestedActions: [
        'For ACO pallets, the entire pallet must be voided',
        'Select full quantity for damage',
      ],
      severity: 'warning',
    },
  },
  {
    pattern: /stock.*level.*update.*fail/i,
    config: {
      code: 'STOCK_UPDATE_FAILED',
      userMessage: 'Stock level update failed, but pallet was voided',
      technicalMessage: 'Stock level synchronization issue',
      suggestedActions: [
        'The pallet has been voided successfully',
        'Stock levels may need manual adjustment',
        'Contact warehouse manager if needed',
      ],
      severity: 'warning',
    },
  },
];

/**
 * Transform technical error messages to user-friendly ones
 */
export function transformErrorMessage(technicalError: string): ErrorMessageConfig {
  // Check against known patterns
  for (const { pattern, config } of errorPatterns) {
    if (
      typeof pattern === 'string' ? technicalError.includes(pattern) : pattern.test(technicalError)
    ) {
      return {
        ...config,
        technicalMessage: technicalError,
      };
    }
  }

  // Default error for unknown messages
  return {
    code: 'UNKNOWN_ERROR',
    userMessage: 'An unexpected error occurred',
    technicalMessage: technicalError,
    suggestedActions: ['Please try again', 'If the problem persists, contact support'],
    severity: 'error',
  };
}

/**
 * Format error for display
 */
export function formatErrorForDisplay(error: ErrorMessageConfig): {
  title: string;
  description: string;
  actions?: string[];
} {
  return {
    title: error.userMessage,
    description: error.suggestedActions ? 'Suggested actions:' : '',
    actions: error.suggestedActions,
  };
}

/**
 * Get toast style based on severity
 */
export function getToastStyle(severity: ErrorMessageConfig['severity']): 'default' | 'destructive' {
  switch (severity) {
    case 'info':
      return 'default';
    case 'warning':
      return 'default'; // Toast doesn't have warning style, use default
    case 'error':
      return 'destructive';
    default:
      return 'destructive';
  }
}

/**
 * Check if error is recoverable (user can retry)
 */
export function isRecoverableError(code: string): boolean {
  const recoverableErrors = ['NETWORK_ERROR', 'AUTH_FAILED', 'INVALID_FORMAT', 'NOT_FOUND'];

  return recoverableErrors.includes(code);
}

/**
 * Check if error should clear the search input
 */
export function shouldClearInput(code: string): boolean {
  const clearInputErrors = ['ALREADY_VOIDED', 'ALREADY_DAMAGED', 'NOT_FOUND'];

  return clearInputErrors.includes(code);
}
