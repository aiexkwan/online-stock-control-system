/**
 * ACO Order Progress Widget
 * 顯示 ACO 訂單進度和完成狀態
 *
 * 已遷移至統一架構：
 * - 使用 DashboardAPI 統一數據訪問
 * - 服務器端 JOIN 和聚合計算
 * - 優化性能和代碼結構
 */

'use client';

import React, { useEffect, useState, useRef, useCallback, useMemo } from 'react';
import { CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { UniversalWidgetCard as WidgetCard } from '../UniversalWidgetCard';
import { ClipboardDocumentListIcon, ChevronDownIcon } from '@heroicons/react/24/outline';
import { WidgetComponentProps } from '@/types/components/dashboard';
import { useWidgetToast } from '@/app/admin/hooks/useWidgetToast';
import { WidgetStyles } from '@/app/utils/widgetStyles';
import { motion, AnimatePresence } from 'framer-motion';
import { format } from 'date-fns';
import { WidgetTitle, WidgetText, WidgetLabel, WidgetValue } from '../WidgetTypography';
import { WidgetSkeleton } from './common/WidgetStates';
import useSWR from 'swr';

interface AcoOrderProgressCard {
  id: string;
  title: string;
  value: number;
  previousValue?: number;
  percentageChange?: number;
  trend?: 'up' | 'down' | 'stable';
}

interface AcoOrderProgressResponse {
  cards: AcoOrderProgressCard[];
  totalCards: number;
  dateRange: string;
  lastUpdated: string;
  metadata: {
    warehouse: string;
    status: string;
    customerRef: string;
  };
}

interface AcoOrder {
  order_ref: number;
  latest_update: string;
  total_required: number;
  total_finished: number;
  total_remaining: number;
  product_count: number;
  completion_percentage: number;
}

interface AcoOrderProgress {
  code: string;
  required_qty: number;
  completed_qty: number;
  remain_qty: number;
  completion_percentage: number;
}

interface ProgressMetadata {
  orderRef?: number;
  productCount?: number;
  [key: string]: unknown;
}

export const AcoOrderProgressWidget = React.memo(function AcoOrderProgressWidget({
  widget,
  isEditMode,
}: WidgetComponentProps) {
  const [selectedOrderRef, setSelectedOrderRef] = useState<number | null>(null);
  const [orderProgress, setOrderProgress] = useState<AcoOrderProgress[]>([]);
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const [progressMetadata, setProgressMetadata] = useState<ProgressMetadata>({});
  const dropdownRef = useRef<HTMLDivElement>(null);
  const { showError } = useWidgetToast();

  // Fetcher function for SWR
  const fetcher = async (url: string) => {
    const token = localStorage.getItem('authToken') || sessionStorage.getItem('authToken');
    const response = await fetch(url, {
      headers: {
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json',
      },
    });

    if (!response.ok) {
      throw new Error(`API Error: ${response.status}`);
    }

    return response.json();
  };

  // Use SWR for ACO order progress cards data
  const {
    data: cardsData,
    error,
    isLoading,
    mutate,
  } = useSWR<AcoOrderProgressResponse>(
    !isEditMode ? '/api/v1/analysis/aco-order-progress-cards' : null,
    fetcher,
    {
      refreshInterval: 300000, // 5 minutes
      revalidateOnFocus: false,
      onError: error => {
        showError('Failed to load ACO order progress', error);
      },
    }
  );

  // Transform REST API data to display format
  const progressCards = useMemo(() => {
    if (!cardsData?.cards) return [];
    return cardsData.cards;
  }, [cardsData]);

  // Create mock incomplete orders for dropdown (this should come from a separate endpoint)
  const incompleteOrders = useMemo(() => {
    // This is temporary mock data - in a real implementation,
    // this would come from a separate endpoint like /api/v1/orders/aco?status=incomplete
    return [
      {
        order_ref: 1001,
        latest_update: '2024-01-15T10:30:00Z',
        total_required: 500,
        total_finished: 375,
        total_remaining: 125,
        product_count: 5,
        completion_percentage: 75,
      },
      {
        order_ref: 1002,
        latest_update: '2024-01-14T16:45:00Z',
        total_required: 300,
        total_finished: 180,
        total_remaining: 120,
        product_count: 3,
        completion_percentage: 60,
      },
    ];
  }, []);

  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsDropdownOpen(false);
      }
    }
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const loadOrderProgress = useCallback(
    async (orderRef: number) => {
      try {
        // TODO: Implement order progress query when GraphQL query is available
        // For now, we'll use mock data
        const mockProgress: AcoOrderProgress[] = [
          {
            code: 'PROD-001',
            required_qty: 100,
            completed_qty: 75,
            remain_qty: 25,
            completion_percentage: 75,
          },
          {
            code: 'PROD-002',
            required_qty: 50,
            completed_qty: 30,
            remain_qty: 20,
            completion_percentage: 60,
          },
        ];
        setOrderProgress(mockProgress);
        setProgressMetadata({ orderRef, productCount: mockProgress.length });
      } catch (err: unknown) {
        console.error('[AcoOrderProgressWidget as string] Error loading order progress:', err);
        showError('Failed to load order progress', err instanceof Error ? err : undefined);
        setOrderProgress([]);
      }
    },
    [showError]
  );

  // Load order progress when selected order changes
  useEffect(() => {
    if (selectedOrderRef) {
      loadOrderProgress(selectedOrderRef);
    }
  }, [selectedOrderRef, loadOrderProgress]);

  // Auto-refresh data periodically
  useEffect(() => {
    if (!isEditMode && !isLoading && !error) {
      const interval = setInterval(() => {
        mutate();
      }, 300000); // 5 minutes

      return () => clearInterval(interval);
    }
  }, [isEditMode, isLoading, error, mutate]);

  // Auto-select first order
  useEffect(() => {
    if (incompleteOrders.length > 0 && !selectedOrderRef) {
      setSelectedOrderRef(incompleteOrders[0].order_ref);
    }
  }, [incompleteOrders, selectedOrderRef]);

  const handleOrderSelect = (orderRef: number) => {
    setSelectedOrderRef(orderRef);
    setIsDropdownOpen(false);
  };

  // Fixed layout widget - full functionality
  return (
    <WidgetCard widgetType='ACO_ORDER_PROGRESS' isEditMode={isEditMode}>
      <CardHeader className='pb-2'>
        <div className='flex items-center justify-between'>
          <div className='flex items-center gap-2'>
            <div className='flex h-8 w-8 items-center justify-center rounded-lg bg-gradient-to-r from-orange-500 to-amber-500'>
              <ClipboardDocumentListIcon className='h-5 w-5 text-white' />
            </div>
            <span
              className={`bg-gradient-to-r from-orange-300 via-amber-300 to-orange-200 bg-clip-text text-sm font-medium text-transparent text-white [text-shadow:_0_0_10px_rgba(251,146,60,0.5),_0_0_20px_rgba(251,146,60,0.3)]`}
            >
              ACO Order Progress
            </span>
          </div>

          {/* Order Dropdown */}
          <div className='relative' ref={dropdownRef}>
            <button
              onClick={() => setIsDropdownOpen(!isDropdownOpen)}
              className='flex items-center gap-2 rounded-md border border-slate-600/30 bg-white/5 px-2 py-1 text-xs text-slate-300 transition-all duration-300 hover:bg-white/10 hover:text-white'
              disabled={isLoading || isEditMode}
            >
              <ClipboardDocumentListIcon className='h-4 w-4' />
              {selectedOrderRef ? `Order ${selectedOrderRef}` : 'Select Order'}
              <ChevronDownIcon
                className={`h-4 w-4 transition-transform ${isDropdownOpen ? 'rotate-180' : ''}`}
              />
            </button>

            <AnimatePresence>
              {isDropdownOpen && (
                <motion.div
                  initial={{ opacity: 0, y: -10, scale: 0.95 }}
                  animate={{ opacity: 1, y: 0, scale: 1 }}
                  exit={{ opacity: 0, y: -10, scale: 0.95 }}
                  transition={{ duration: 0.2 }}
                  className='absolute right-0 top-full z-50 mt-2 max-h-60 min-w-[200px] overflow-y-auto rounded-xl border border-slate-600/50 bg-black/80 shadow-2xl backdrop-blur-xl'
                >
                  {incompleteOrders.length === 0 ? (
                    <div className='px-4 py-3 text-sm text-slate-400'>No incomplete orders</div>
                  ) : (
                    incompleteOrders.map((order, idx) => (
                      <button
                        key={`dropdown-order-${order.order_ref}-${idx}`}
                        onClick={() => handleOrderSelect(order.order_ref)}
                        className={`w-full px-3 py-2 text-left text-xs transition-all duration-300 first:rounded-t-xl last:rounded-b-xl hover:bg-white/10 ${
                          selectedOrderRef === order.order_ref
                            ? 'bg-white/10 text-orange-400'
                            : 'text-slate-300'
                        }`}
                      >
                        <div className='flex items-center justify-between'>
                          <span>Order {order.order_ref}</span>
                          <div className='flex flex-col items-end gap-1'>
                            <div className='rounded-lg border border-orange-400/30 bg-orange-500/20 px-2 py-0.5 text-[10px] text-orange-300'>
                              {order.total_remaining} remain
                            </div>
                            <div className='text-[9px] text-slate-400'>
                              {order.completion_percentage}% done
                            </div>
                          </div>
                        </div>
                      </button>
                    ))
                  )}
                </motion.div>
              )}
            </AnimatePresence>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        {isLoading ? (
          <WidgetSkeleton type='stats' />
        ) : error ? (
          <div className='text-sm text-red-400'>
            {typeof error === 'string' ? error : 'Failed to load data'}
          </div>
        ) : progressCards.length === 0 ? (
          <div className='py-12 text-center'>
            <ClipboardDocumentListIcon className='mx-auto mb-4 h-16 w-16 text-slate-600' />
            <WidgetText size='large' glow='gray'>
              Select an ACO order to view progress
            </WidgetText>
          </div>
        ) : (
          <div className='space-y-4'>
            {progressCards.map((card, index) => (
              <div key={`${card.id}-${index}`} className='space-y-3'>
                <div className='flex items-center justify-between'>
                  <WidgetText size='xs' glow='white' className='text-xs font-medium'>
                    {card.title}
                  </WidgetText>
                  <div className='flex items-center gap-2'>
                    <span className={`text-lg font-bold ${WidgetStyles.text.value}`}>
                      {card.value}
                    </span>
                    {card.trend && (
                      <span
                        className={`text-xs ${
                          card.trend === 'up'
                            ? 'text-green-400'
                            : card.trend === 'down'
                              ? 'text-red-400'
                              : 'text-gray-400'
                        }`}
                      >
                        {card.percentageChange !== undefined &&
                          `${card.percentageChange > 0 ? '+' : ''}${card.percentageChange.toFixed(1)}%`}
                      </span>
                    )}
                  </div>
                </div>
                {card.previousValue !== undefined && (
                  <div className='flex items-center justify-between text-xs text-slate-400'>
                    <span>Previous: {card.previousValue}</span>
                    <span
                      className={`${
                        card.trend === 'up'
                          ? 'text-green-400'
                          : card.trend === 'down'
                            ? 'text-red-400'
                            : 'text-gray-400'
                      }`}
                    >
                      {card.trend === 'up' ? '↗' : card.trend === 'down' ? '↘' : '→'}
                    </span>
                  </div>
                )}
              </div>
            ))}
            {cardsData?.metadata && (
              <div className='mt-4 border-t border-slate-600/30 pt-4'>
                <WidgetLabel size='xs' glow='subtle' className='text-[10px]'>
                  Last updated: {format(new Date(cardsData.lastUpdated), 'MMM dd, HH:mm')} •{' '}
                  {cardsData.dateRange}
                </WidgetLabel>
              </div>
            )}
          </div>
        )}
      </CardContent>
    </WidgetCard>
  );
});

export default AcoOrderProgressWidget;
