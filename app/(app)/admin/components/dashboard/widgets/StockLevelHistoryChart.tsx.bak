'use client';

import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  Legend,
} from 'recharts';
import { TraditionalWidgetComponentProps } from '@/types/components/dashboard';
import { useAdminRefresh } from '@/app/admin/contexts/AdminRefreshContext';
import { TrendingUp } from 'lucide-react';
import { createDashboardAPIClient as createDashboardAPI } from '@/lib/api/admin/DashboardAPI.client';
import { format } from 'date-fns';
import { useInViewport } from '@/app/admin/hooks/useInViewport';
import { ChartContainer } from './common/charts/ChartContainer';
import { LineChartSkeleton } from './common/charts/ChartSkeleton';
import { ChartDataPoint, StockChartMapper, isStockWidgetApiWrapper } from './types/StockChartTypes';
import {
  brandColors,
  widgetColors,
  semanticColors,
  getWidgetCategoryColor,
} from '@/lib/design-system/colors';
import { textClasses, getTextClass } from '@/lib/design-system/typography';
import { spacing, widgetSpacing, spacingUtilities } from '@/lib/design-system/spacing';
import { cn } from '@/lib/utils';

// GraphQL query removed - using REST API only

// ChartDataPoint interface moved to StockChartTypes.ts

interface StockData {
  stock: string;
  stock_level: number;
  latest_update: string;
}

interface StockLevelHistoryChartProps extends TraditionalWidgetComponentProps {
  timeFrame?: {
    start: Date;
    end: Date;
  };
}

// 顏色調色板 - 使用設計系統顏色
const LINE_COLORS = [
  semanticColors.success.DEFAULT,
  widgetColors.charts.primary,
  semanticColors.warning.DEFAULT,
  brandColors.primary[500],
  semanticColors.destructive.DEFAULT,
  widgetColors.charts.accent,
  semanticColors.info.DEFAULT,
  brandColors.secondary[500],
];

export const StockLevelHistoryChart: React.FC<StockLevelHistoryChartProps> = ({
  widget,
  isEditMode,
  timeFrame,
}) => {
  // Using REST API only - GraphQL removed
  const [chartData, setChartData] = useState<ChartDataPoint[]>([]);
  const [productCodes, setProductCodes] = useState<string[]>([]);
  const [selectedType, setSelectedType] = useState<string>('all');
  const [adjustedTimeFrame, setAdjustedTimeFrame] = useState<{ start: Date; end: Date } | null>(
    null
  );
  const { refreshTrigger } = useAdminRefresh();
  const dashboardAPI = useMemo(() => createDashboardAPI(), []);

  // Progressive loading setup
  const chartRef = useRef<HTMLDivElement>(null);
  const { isInViewport, hasBeenInViewport } = useInViewport(chartRef, {
    threshold: 0.1,
    rootMargin: '50px',
    triggerOnce: true,
  });

  // 計算調整後的時間範圍
  const calculateAdjustedTimeFrame = useCallback(
    (originalTimeFrame?: { start: Date; end: Date }) => {
      const now = new Date();
      const twoWeeksAgo = new Date(now);
      twoWeeksAgo.setDate(now.getDate() - 14);

      // 如果沒有提供時間範圍，使用預設2週
      if (!originalTimeFrame) {
        console.log(
          '[StockLevelHistoryChart as string] No timeFrame provided, using default 2 weeks'
        );
        return { start: twoWeeksAgo, end: now };
      }

      const duration = originalTimeFrame.end.getTime() - originalTimeFrame.start.getTime();
      const days = duration / (1000 * 60 * 60 * 24);

      // 如果時間範圍太短（少於1天），使用預設2週
      if (days < 1) {
        console.log(
          '[StockLevelHistoryChart as string] Time range too short, using default 2 weeks'
        );
        return { start: twoWeeksAgo, end: now };
      }

      // 根據選擇的時間範圍調整顯示範圍
      if (days <= 14) {
        // 少於2週，使用原範圍
        return originalTimeFrame;
      } else if (days <= 21) {
        // 2-3週，顯示3週
        const threeWeeksAgo = new Date(now);
        threeWeeksAgo.setDate(now.getDate() - 21);
        return { start: threeWeeksAgo, end: now };
      } else if (days <= 28) {
        // 3-4週，顯示4週
        const fourWeeksAgo = new Date(now);
        fourWeeksAgo.setDate(now.getDate() - 28);
        return { start: fourWeeksAgo, end: now };
      } else if (days <= 60) {
        // 4週-2個月，顯示2個月
        const twoMonthsAgo = new Date(now);
        twoMonthsAgo.setMonth(now.getMonth() - 2);
        return { start: twoMonthsAgo, end: now };
      } else if (days <= 90) {
        // 2-3個月，顯示3個月
        const threeMonthsAgo = new Date(now);
        threeMonthsAgo.setMonth(now.getMonth() - 3);
        return { start: threeMonthsAgo, end: now };
      } else {
        // 超過3個月，最多顯示6個月
        const sixMonthsAgo = new Date(now);
        sixMonthsAgo.setMonth(now.getMonth() - 6);
        return { start: sixMonthsAgo, end: now };
      }
    },
    []
  );

  // 更新調整後的時間範圍
  useEffect(() => {
    console.log('[StockLevelHistoryChart as string] timeFrame prop:', timeFrame);
    const adjusted = calculateAdjustedTimeFrame(timeFrame);
    console.log('[StockLevelHistoryChart as string] adjusted timeFrame:', adjusted);
    setAdjustedTimeFrame(adjusted);
  }, [timeFrame, calculateAdjustedTimeFrame]);

  // Server action fallback for stock history data
  const fetchStockHistoryServerAction = useCallback(
    async (variables?: { productCodes: string[]; startDate: string; endDate: string }) => {
      if (!variables || !adjustedTimeFrame || variables.productCodes.length === 0) {
        return { chartData: [], productCodes: [] };
      }

      const limitedProducts = variables.productCodes.slice(0, 10);

      try {
        const result = await dashboardAPI.fetch(
          {
            widgetIds: ['statsCard'],
            dateRange: {
              start: variables.startDate,
              end: variables.endDate,
            },
            params: {
              dataSource: 'stock_level_history',
              productCodes: limitedProducts,
              timeSegments: 24,
            },
          },
          {
            strategy: 'server',
            cache: { ttl: 60 }, // 1分鐘緩存
          }
        );

        if (result.widgets && result.widgets.length > 0) {
          const widgetData = result.widgets[0];
          if (isStockWidgetApiWrapper(widgetData.data)) {
            const errorMessage = StockChartMapper.extractErrorFromWidgetWrapper(widgetData.data);
            if (!errorMessage) {
              const historyData = widgetData.data.value;
              return {
                chartData: Array.isArray(historyData) ? (historyData as ChartDataPoint[]) : [],
                productCodes: limitedProducts,
              };
            }
          }
        }

        return { chartData: [], productCodes: [] };
      } catch (error) {
        console.error('[StockLevelHistoryChart as string] Server action error:', error);
        return { chartData: [], productCodes: [] };
      }
    },
    [dashboardAPI, adjustedTimeFrame]
  );

  // State for data fetching
  const [data, setData] = useState<{ chartData: ChartDataPoint[]; productCodes: string[] } | null>(
    null
  );
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<Error | null>(null);

  // Fetch data using REST API
  const fetchData = useCallback(async () => {
    if (!adjustedTimeFrame || productCodes.length === 0 || !hasBeenInViewport) {
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const variables = {
        productCodes: productCodes.slice(0, 10),
        startDate: adjustedTimeFrame.start.toISOString(),
        endDate: adjustedTimeFrame.end.toISOString(),
      };

      const result = await fetchStockHistoryServerAction(variables);
      setData(result);

      if (result.chartData) {
        setChartData(result.chartData);
        setProductCodes(result.productCodes || productCodes);
      }
    } catch (err) {
      setError(err instanceof Error ? err : new Error('Failed to fetch data'));
    } finally {
      setLoading(false);
    }
  }, [adjustedTimeFrame, productCodes, hasBeenInViewport, fetchStockHistoryServerAction]);

  // Effect to fetch data when dependencies change
  useEffect(() => {
    fetchData();
  }, [fetchData]);

  // Refetch function for compatibility
  const refetch = useCallback(() => {
    fetchData();
  }, [fetchData]);

  // Update chart data when data changes
  useEffect(() => {
    if (data?.chartData) {
      setChartData(data.chartData);
      if (data.productCodes) {
        setProductCodes(data.productCodes);
      }
    }
  }, [data]);

  // 監聽 StockTypeSelector 的類型變更事件
  useEffect(() => {
    const handleTypeChange = (event: Event) => {
      const eventDetail = StockChartMapper.validateCustomEvent(event);
      if (!eventDetail) {
        console.warn('[StockLevelHistoryChart] Invalid stockTypeChanged event format');
        return;
      }

      console.log('[StockLevelHistoryChart] Received stockTypeChanged event:', eventDetail);
      const { type, data } = eventDetail;
      setSelectedType(type);

      // 獲取該類型所有產品的代碼（限制最多10個）
      const codes = data
        .map(item => item.stock)
        .filter((code): code is string => typeof code === 'string')
        .slice(0, 10);
      console.log('[StockLevelHistoryChart] Product codes:', codes);

      if (codes.length > 0) {
        setProductCodes(codes);
      } else {
        console.log('[StockLevelHistoryChart] No product codes, clearing data');
        setChartData([]);
        setProductCodes([]);
      }
    };

    window.addEventListener('stockTypeChanged', handleTypeChange);
    return () => {
      window.removeEventListener('stockTypeChanged', handleTypeChange);
    };
  }, []);

  // 初始化時設定預設時間範圍
  useEffect(() => {
    if (!timeFrame) {
      const now = new Date();
      const twoWeeksAgo = new Date(now);
      twoWeeksAgo.setDate(now.getDate() - 14);
      setAdjustedTimeFrame({ start: twoWeeksAgo, end: now });
    }
  }, [timeFrame]);

  // 當刷新觸發器改變時，重新加載數據
  const prevRefreshTriggerRef = React.useRef(refreshTrigger);
  useEffect(() => {
    // 只在 refreshTrigger 真正改變時重新加載
    if (productCodes.length > 0 && refreshTrigger !== prevRefreshTriggerRef.current) {
      console.log('[StockLevelHistoryChart as string] Refresh triggered, reloading data');
      prevRefreshTriggerRef.current = refreshTrigger;
      refetch();
    }
  }, [refreshTrigger, productCodes.length, refetch]);

  // 自定義 Tooltip
  const CustomTooltip = (props: unknown) => {
    const { isValid, entries, label } = StockChartMapper.safeExtractHistoryTooltipData(props);

    if (!isValid || entries.length === 0) {
      return null;
    }

    return (
      <div className={cn('rounded-lg border bg-card p-3 shadow-lg', 'border-border')}>
        <p className={cn('mb-2', textClasses['body-small'], 'font-medium text-foreground')}>
          {label}
        </p>
        {entries.map((entry, index) => (
          <p key={index} className={cn(textClasses['label-small'], 'text-foreground')}>
            <span style={{ color: entry.color }}>{entry.name}:</span>
            <span className='ml-2 font-medium'>{entry.value.toLocaleString()}</span>
          </p>
        ))}
      </div>
    );
  };

  // 自定義圖例
  const renderLegend = (props: unknown) => {
    if (!props || typeof props !== 'object') return null;

    const { payload } = props as { payload?: Array<{ value: string; color: string }> };
    if (!Array.isArray(payload)) return null;

    return (
      <div className={cn('mt-1 flex flex-wrap justify-center gap-2')}>
        {payload.map((entry, index) => (
          <div key={`legend-${index}`} className={cn('flex items-center gap-2')}>
            <div className='h-2 w-2 rounded-full' style={{ backgroundColor: entry.color }} />
            <span className={cn(textClasses['label-small'], 'text-muted-foreground')}>
              {entry.value}
            </span>
          </div>
        ))}
      </div>
    );
  };

  // Return progressive loading skeleton if not in viewport yet
  if (!hasBeenInViewport) {
    return (
      <div ref={chartRef} className='h-full w-full'>
        <LineChartSkeleton height='100%' showHeader={false} />
      </div>
    );
  }

  return (
    <div ref={chartRef} className='h-full w-full'>
      <ChartContainer
        title='Stock Level History'
        icon={TrendingUp}
        iconColor='from-emerald-500 to-teal-500'
        loading={loading}
        error={error}
        onRetry={refetch}
        onRefresh={refetch}
        refreshing={loading}
        height='100%'
        showHeader={false}
        chartType='line'
        dateRange={adjustedTimeFrame || undefined}
        performanceMetrics={{
          optimized: true,
          source: 'REST API',
        }}
      >
        {chartData.length === 0 || productCodes.length === 0 ? (
          <div className='flex h-full items-center justify-center'>
            <p className={cn('text-center', textClasses['body-small'], 'text-muted-foreground')}>
              Select a product type from the dropdown
              <br />
              to view stock level history
              <br />
              <span className={cn(textClasses['label-small'], 'text-muted-foreground')}>
                (最多顯示10款產品)
              </span>
            </p>
          </div>
        ) : (
          <ResponsiveContainer width='100%' height='100%'>
            <LineChart data={chartData} margin={{ top: 5, right: 5, left: 0, bottom: 35 }}>
              <CartesianGrid
                strokeDasharray='3 3'
                stroke={widgetColors.charts.grid}
                vertical={false}
              />
              <XAxis
                dataKey='time'
                stroke={widgetColors.charts.grid}
                fontSize={9}
                tickLine={false}
                axisLine={false}
                angle={-45}
                textAnchor='end'
                height={50}
                interval={Math.floor(chartData.length / 8)}
              />
              <YAxis
                stroke={widgetColors.charts.grid}
                fontSize={10}
                tickLine={false}
                axisLine={false}
                width={45}
                tickFormatter={value => {
                  if (value >= 1000) {
                    return `${(value / 1000).toFixed(0)}k`;
                  }
                  return value.toString();
                }}
              />
              <Tooltip content={<CustomTooltip />} />

              {/* 為每個產品代碼創建一條線 */}
              {productCodes.map((code, index) => (
                <Line
                  key={code}
                  type='monotone'
                  dataKey={code}
                  name={code}
                  stroke={LINE_COLORS[index % LINE_COLORS.length]}
                  strokeWidth={2}
                  dot={false}
                  activeDot={{ r: 4 }}
                />
              ))}
            </LineChart>
          </ResponsiveContainer>
        )}
      </ChartContainer>
    </div>
  );
};

export default StockLevelHistoryChart;
