/**
 * Upload Orders Widget V2
 * 訂單 PDF 上傳功能 - 使用 Server Actions 優化
 * 保留客戶端檔案上傳，優化分析流程
 */

'use client';

import React, { useState, useRef, useCallback, useEffect } from 'react';
import { DocumentArrowUpIcon, SparklesIcon } from '@heroicons/react/24/outline';
import { WidgetComponentProps } from '@/types/components/dashboard';
import { toast } from 'sonner';
import { GoogleDriveUploadToast } from './GoogleDriveUploadToast';
import { OrderAnalysisResultDialog, AnalysisResult } from './OrderAnalysisResultDialog';
import { useUploadRefresh } from '@/app/admin/contexts/UploadRefreshContext';
import { analyzeOrderPDF, getCurrentUserId } from '@/app/actions/orderUploadActions';
import {
  UploadResponse,
  FileValidator,
  ORDER_UPLOAD_CONFIG,
  SupportedFileType,
} from './types/UploadWidgetTypes';

interface UploadingFile {
  id: string;
  name: string;
  progress: number;
  status: 'uploading' | 'completed' | 'error';
  error?: string;
  file: File;
  orderNumber?: string;
}

const maxFileSize = 10 * 1024 * 1024; // 10MB

export const UploadOrdersWidgetV2 = React.memo(function UploadOrdersWidgetV2({
  widget,
  isEditMode,
}: WidgetComponentProps) {
  const [currentUserId, setCurrentUserId] = useState<number | null>(null);
  const [isDragOver, setIsDragOver] = useState(false);
  const [uploadingFiles, setUploadingFiles] = useState<UploadingFile[]>([]);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisResult, setAnalysisResult] = useState<AnalysisResult | null>(null);
  const [showAnalysisDialog, setShowAnalysisDialog] = useState(false);
  const [performanceMetrics, setPerformanceMetrics] = useState<{
    lastAnalysisTime?: number;
    optimized?: boolean;
  }>({});
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { triggerOrderHistoryRefresh } = useUploadRefresh();

  // 獲取當前用戶 ID
  useEffect(() => {
    const fetchUserId = async () => {
      try {
        const userId = await getCurrentUserId();
        setCurrentUserId(userId);
      } catch (error) {
        console.error('[UploadOrdersWidgetV2] Error getting user:', error);
      }
    };

    fetchUserId();
  }, []);

  // 驗證文件
  const validateFile = (file: File): string | null => {
    const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase();

    if (fileExtension !== '.pdf') {
      return 'Only PDF files are allowed';
    }

    if (file.size > maxFileSize) {
      return 'File size must be less than 10MB';
    }

    return null;
  };

  // 從文件名提取訂單號
  const extractOrderNumber = (fileName: string): string => {
    const match = fileName.match(/(\d+)\.pdf$/i);
    return match ? match[1] : fileName.replace('.pdf', '').replace('.PDF', '');
  };

  // 使用 Server Action 分析訂單
  const uploadAndAnalyzeOrder = useCallback(
    async (uploadingFile: UploadingFile) => {
      try {
        const startTime = performance.now();

        // 更新進度
        const updateProgress = (progress: number) => {
          setUploadingFiles(prev =>
            prev.map((f: UploadingFile) => (f.id === uploadingFile.id ? { ...f, progress } : f))
          );
        };

        updateProgress(10);
        setIsAnalyzing(true);

        // 讀取文件為 ArrayBuffer
        const arrayBuffer = await uploadingFile.file.arrayBuffer();

        updateProgress(30);

        // 使用 Server Action 分析 PDF
        const result = await analyzeOrderPDF(
          {
            buffer: arrayBuffer,
            name: uploadingFile.file.name,
          },
          currentUserId?.toString() || '',
          true // saveToStorage
        );

        updateProgress(80);

        if (!result.success) {
          throw new Error(result.error || 'Analysis failed');
        }

        updateProgress(90);

        const endTime = performance.now();
        setPerformanceMetrics({
          lastAnalysisTime: Math.round(endTime - startTime),
          optimized: true,
        });

        updateProgress(100);
        setIsAnalyzing(false);

        // 標記為完成
        setUploadingFiles(prev =>
          prev.map(f =>
            f.id === uploadingFile.id ? { ...f, status: 'completed', progress: 100 } : f
          )
        );

        // 顯示分析結果
        if (result.extractedData && result.extractedData.length > 0) {
          toast.success(`Successfully analyzed ${result.extractedData.length} orders`);
          setAnalysisResult(result as unknown as AnalysisResult);
          setShowAnalysisDialog(true);

          // 觸發訂單歷史記錄更新
          triggerOrderHistoryRefresh();
        } else if (result.success && result.recordCount === 0) {
          toast.warning('PDF processed but no orders found');
        } else {
          toast.error('Analysis completed but no data extracted');
        }
      } catch (error) {
        console.error('[UploadOrdersWidgetV2] Upload/analyze error:', error);
        setIsAnalyzing(false);
        setUploadingFiles(prev =>
          prev.map(f =>
            f.id === uploadingFile.id
              ? {
                  ...f,
                  status: 'error',
                  error:
                    error instanceof Error
                      ? (error as { message: string }).message
                      : 'Upload failed',
                }
              : f
          )
        );

        toast.error(
          error instanceof Error ? (error as { message: string }).message : 'Failed to analyze PDF'
        );
      }
    },
    [currentUserId, triggerOrderHistoryRefresh]
  );

  // 處理文件選擇
  const handleFiles = useCallback(
    async (files: FileList | null) => {
      if (!files || files.length === 0 || isEditMode) return;

      if (!currentUserId) {
        toast.error('User not authenticated. Please refresh and try again.');
        return;
      }

      // 只處理第一個文件
      const file = files[0];
      const error = validateFile(file);

      if (error) {
        toast.error(`${file.name}: ${error}`);
        return;
      }

      // 創建上傳文件對象
      const uploadingFile: UploadingFile = {
        id: `${Date.now()}`,
        name: file.name,
        progress: 0,
        status: 'uploading',
        file: file,
        orderNumber: extractOrderNumber(file.name),
      };

      // 開始分析
      setUploadingFiles(prev => [...prev, uploadingFile]);
      uploadAndAnalyzeOrder(uploadingFile);
    },
    [isEditMode, uploadAndAnalyzeOrder, currentUserId]
  );

  // 拖放處理
  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
    handleFiles(e.dataTransfer.files);
  };

  // 點擊上傳
  const handleClick = () => {
    if (!isEditMode) {
      fileInputRef.current?.click();
    }
  };

  // 移除已完成的文件
  const handleRemoveFile = (id: string) => {
    setUploadingFiles(prev => prev.filter((f: UploadingFile) => f.id !== id));
  };

  // 關閉上傳提示
  const handleCloseToast = () => {
    setUploadingFiles(prev => prev.filter((f: UploadingFile) => f.status === 'uploading'));
  };

  return (
    <>
      <div
        className='relative flex h-full flex-col items-center justify-center'
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
      >
        <div
          onClick={handleClick}
          className={`cursor-pointer p-8 transition-all duration-300 ${isDragOver ? 'scale-110 opacity-80' : 'hover:scale-105'} `}
        >
          <div className='relative'>
            <DocumentArrowUpIcon
              className={`mx-auto mb-4 h-20 w-20 transition-all duration-300 ${isDragOver ? 'text-blue-400' : 'text-blue-500 hover:text-blue-400'} `}
            />
            {isAnalyzing && (
              <div className='absolute inset-0 flex items-center justify-center'>
                <div className='h-20 w-20 animate-spin rounded-full border-4 border-blue-500/20 border-t-blue-500' />
              </div>
            )}
          </div>
          <p className='text-center font-medium text-gray-400'>Upload Orders</p>
          <p className='mt-1 text-center text-xs text-gray-500'>Order PDF</p>
        </div>

        {isAnalyzing && (
          <div className='mt-2 flex items-center gap-1'>
            <SparklesIcon className='h-3 w-3 animate-pulse text-yellow-500' />
            <span className='text-xs text-yellow-500'>Analyzing with AI...</span>
          </div>
        )}

        {/* Performance indicator */}
        {performanceMetrics.optimized && performanceMetrics.lastAnalysisTime && (
          <div className='absolute bottom-2 right-2 text-[10px] text-green-400'>
            ✓ Server-optimized ({performanceMetrics.lastAnalysisTime}ms)
          </div>
        )}

        <input
          ref={fileInputRef}
          type='file'
          accept='.pdf'
          onChange={e => handleFiles(e.target.files)}
          className='hidden'
        />
      </div>

      {/* Upload Toast */}
      {uploadingFiles.length > 0 && (
        <GoogleDriveUploadToast
          files={uploadingFiles}
          onClose={handleCloseToast}
          onRemoveFile={handleRemoveFile}
        />
      )}

      {/* Analysis Result Dialog */}
      {showAnalysisDialog && analysisResult && (
        <OrderAnalysisResultDialog
          isOpen={showAnalysisDialog}
          onClose={() => setShowAnalysisDialog(false)}
          data={analysisResult}
        />
      )}
    </>
  );
});

export default UploadOrdersWidgetV2;
