/**
 * 統計卡片小部件 - Batch Query Version
 * 通用統計卡片，使用批量查詢系統優化性能
 *
 * Updated to use MetricCard component:
 * - 使用 MetricCard 通用組件簡化代碼
 * - 保持原有功能不變
 * - 移除重複的 UI 邏輯
 * - 統一的錯誤處理和加載狀態
 */

'use client';

import React from 'react';
import { MetricCard } from '@/app/admin/components/dashboard/widgets/common/data-display/MetricCard';
import { TrendingUp, TrendingDown, Package, AlertCircle, LucideIcon } from 'lucide-react';
import { TraditionalWidgetComponentProps } from '@/types/components/dashboard';
import { useWidgetData } from '@/app/admin/contexts/DashboardDataContext';
import {
  brandColors,
  widgetColors,
  semanticColors,
  getWidgetCategoryColor,
} from '@/lib/design-system/colors';
import { cn } from '@/lib/utils';

interface StatsData {
  value: number | string;
  trend?: number;
  label?: string;
}

interface StatsCardWidgetProps extends TraditionalWidgetComponentProps {}

const StatsCardWidget = React.memo(function StatsCardWidget({
  widget,
  isEditMode,
}: StatsCardWidgetProps) {
  const dataSource = (widget.config.dataSource as string) || 'total_pallets';

  // 使用批量查詢系統獲取數據
  const { data: rawData, loading, error } = useWidgetData<StatsData>(dataSource);

  // 處理數據格式
  const data: StatsData = React.useMemo(() => {
    if (!rawData) {
      // Fallback for static values
      return {
        value: (widget.config.staticValue as string | number) || 0,
        label: (widget.config.label as string) || 'Stats',
      };
    }

    return {
      value: rawData.value || 0,
      label: rawData.label || (widget.config.label as string) || 'Stats',
      trend: rawData.trend,
    };
  }, [rawData, widget.config]);

  // 獲取 icon
  const getIcon = (): LucideIcon | undefined => {
    switch (widget.config.icon) {
      case 'package':
        return Package;
      case 'trending-up':
        return TrendingUp;
      case 'trending-down':
        return TrendingDown;
      case 'alert':
        return AlertCircle;
      default:
        return Package;
    }
  };

  // 獲取 icon 顏色
  const getIconColor = (): string => {
    switch (widget.config.icon) {
      case 'trending-up':
        return getWidgetCategoryColor('stats', 'gradient');
      case 'trending-down':
        return getWidgetCategoryColor('stats', 'gradient');
      case 'alert':
        return getWidgetCategoryColor('stats', 'gradient');
      default:
        return getWidgetCategoryColor('stats', 'gradient');
    }
  };

  // 處理 trend
  const getTrend = (): 'up' | 'down' | 'neutral' | undefined => {
    if (data.trend === undefined) return undefined;
    if (data.trend > 0) return 'up';
    if (data.trend < 0) return 'down';
    return 'neutral';
  };

  // 使用 MetricCard 組件處理所有狀態
  return (
    <MetricCard
      title={'title' in widget ? widget.title : 'Stats'}
      value={data.value}
      label={data.label}
      icon={getIcon()}
      iconColor={getIconColor()}
      gradientFrom={getWidgetCategoryColor('stats', 'gradient')}
      gradientTo={getWidgetCategoryColor('stats', 'accent')}
      className={cn('h-full', isEditMode && 'border-2 border-dashed border-primary/50')}
      trend={getTrend()}
      trendValue={
        data.trend !== undefined ? `${data.trend > 0 ? '+' : ''}${data.trend}%` : undefined
      }
      trendLabel={data.trend !== undefined ? 'from last period' : undefined}
      loading={loading}
      error={error}
      animateOnMount={true}
    />
  );
});

export default StatsCardWidget;

/**
 * Batch Query Migration completed on 2025-07-10
 *
 * Features:
 * - 使用 DashboardDataContext 批量查詢系統
 * - 支援所有原有數據源
 * - 統一的錯誤處理和加載狀態
 * - 保持原有的動畫效果和 UI
 * - 自動緩存和性能優化
 *
 * 優化:
 * - 移除了大量獨立的 GraphQL queries
 * - 減少了組件複雜度
 * - 改善了性能（批量查詢）
 * - 統一的數據獲取模式
 */
