/**
 * Test utilities for Unified Widget testing
 */

import React from 'react';
import { DatabaseRecord } from '@/types/database/tables';
import { render as rtlRender, RenderOptions } from '@testing-library/react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { AdminWidgetConfig } from '../../../adminDashboardLayouts';

// Mock providers wrapper
const createTestQueryClient = () =>
  new QueryClient({
    defaultOptions: {
      queries: {
        retry: false,
        gcTime: 0,
      },
    },
  });

interface AllTheProvidersProps {
  children: React.ReactNode;
}

const AllTheProviders: React.FC<AllTheProvidersProps> = ({ children }) => {
  const queryClient = createTestQueryClient();

  return (
    <QueryClientProvider client={queryClient}>
      {children}
    </QueryClientProvider>
  );
};

// Custom render function
export function render(
  ui: React.ReactElement,
  options?: Omit<RenderOptions, 'wrapper'>
) {
  return rtlRender(ui, { wrapper: AllTheProviders, ...options });
}

// Mock data generators
export const createMockStatsData = (overrides: DatabaseRecord = {}) => ({
  total_pallets: 1234,
  production_efficiency: 0.85,
  error_count: 5,
  success_rate: 0.95,
  dynamic_metric_1: 567,
  dynamic_metric_2: 89.2,
  total_units: 2456789,
  annual_production: 15678234,
  ...overrides,
});

export const createMockChartData = (overrides: DatabaseRecord = {}) => ({
  labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May'],
  values: [100, 200, 150, 300, 250],
  colors: ['#3B82F6', '#EF4444', '#10B981', '#F59E0B', '#8B5CF6'],
  ...overrides,
});

export const createMockTableData = (overrides: DatabaseRecord = {}) => ({
  items: [
    { id: 1, name: 'Item 1', quantity: 100, status: 'active' },
    { id: 2, name: 'Item 2', quantity: 200, status: 'pending' },
    { id: 3, name: 'Item 3', quantity: 150, status: 'active' },
  ],
  columns: ['id', 'name', 'quantity', 'status'],
  ...overrides,
});

// Base configuration templates
export const createStatsConfig = (overrides: Partial<AdminWidgetConfig> = {}): AdminWidgetConfig => ({
  type: 'stats',
  title: 'Test Stats Widget',
  gridArea: 'widget1',
  dataSource: 'default',
  metrics: ['total_pallets'],
  description: 'Test description',
  ...overrides,
});

export const createChartConfig = (overrides: Partial<AdminWidgetConfig> = {}): AdminWidgetConfig => ({
  type: 'chart',
  title: 'Test Chart Widget',
  gridArea: 'widget2',
  dataSource: 'default',
  chartType: 'bar',
  metrics: ['values'],
  description: 'Test chart description',
  ...overrides,
});

export const createTableConfig = (overrides: Partial<AdminWidgetConfig> = {}): AdminWidgetConfig => ({
  type: 'table',
  title: 'Test Table Widget',
  gridArea: 'widget3',
  dataSource: 'default',
  columns: ['id', 'name', 'quantity', 'status'],
  description: 'Test table description',
  ...overrides,
});

// Mock hook responses
export const mockSuccessResponse = (data: Record<string, unknown> | unknown[]) => ({
  data: { default: data },
  loading: false,
  isLoading: false,
  error: null,
  refetch: jest.fn(),
  refetchWidget: jest.fn(),
});

export const mockLoadingResponse = () => ({
  data: null,
  loading: true,
  isLoading: true,
  error: null,
  refetch: jest.fn(),
  refetchWidget: jest.fn(),
});

export const mockErrorResponse = (errorMessage = 'Test error') => {
  const error = new Error(errorMessage) as any;
  error.type = 'batch';
  error.timestamp = new Date();

  return {
    data: null,
    loading: false,
    isLoading: false,
    error,
    refetch: jest.fn(),
    refetchWidget: jest.fn(),
  };
};

// Wait utilities
export const waitForLoadingToFinish = async () => {
  await new Promise(resolve => setTimeout(resolve, 0));
};

// Export everything from testing library for convenience
export * from '@testing-library/react';
