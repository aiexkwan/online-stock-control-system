/**
 * Other Files List Widget V2 - REST API Version
 * 顯示非訂單文件上傳列表
 *
 * v1.4 系統清理:
 * - 完全改用 REST API 架構
 * - 使用純 REST API 調用
 * - 簡化代碼結構
 * - 保留 Progressive Loading
 * - 保留 DataTable 組件統一列表顯示
 * - 保留 Upload Refresh Context 整合
 */

'use client';

import React, { useMemo, useRef, useState, useCallback, useEffect } from 'react';
import {
  DocumentIcon,
  CloudIcon,
  PhotoIcon,
  UserIcon,
  CalendarIcon,
} from '@heroicons/react/24/outline';
import { WidgetComponentProps } from '@/types/components/dashboard';
import { format } from 'date-fns';
import { fromDbTime } from '@/app/utils/timezone';
import { useUploadRefresh } from '@/app/admin/contexts/UploadRefreshContext';
import { createDashboardAPIClient as createDashboardAPI } from '@/lib/api/admin/DashboardAPI.client';
import { useInViewport, InViewportPresets } from '@/app/admin/hooks/useInViewport';
import { DataTable, DataTableColumn } from './common/data-display/DataTable';
import { cn } from '@/lib/utils';
import { WidgetSkeleton } from './common/WidgetStates';

interface FileRecord {
  uuid: string;
  doc_name: string;
  upload_by: string | number;
  created_at: string;
  doc_type?: string;
  uploader_name?: string;
  uploader_id?: number;
}

export const OtherFilesListWidgetV2 = React.memo(function OtherFilesListWidgetV2({
  widget,
  isEditMode,
}: WidgetComponentProps) {
  const widgetRef = useRef<HTMLDivElement>(null);
  const [page, setPage] = useState(0);
  const { otherFilesVersion } = useUploadRefresh();
  const itemsPerPage = 10;

  // Progressive Loading - 檢測 widget 是否在視窗內
  const { isInViewport, hasBeenInViewport } = useInViewport(widgetRef, InViewportPresets.chart);

  // Server Action fallback - 使用 RPC 查詢
  async function fetchFilesServerAction(variables?: { limit: number; offset: number }) {
    const api = createDashboardAPI();
    const result = await api.fetch({
      widgetIds: ['otherFilesList'],
      params: {
        dataSource: 'rpc_get_other_files',
        limit: variables?.limit || 10,
        offset: variables?.offset || 0,
      },
    });

    const widgetData = result.widgets?.find(w => w.widgetId === 'otherFilesList');

    if (
      !widgetData ||
      (typeof widgetData.data === 'object' &&
        widgetData.data !== null &&
        'error' in widgetData.data &&
        widgetData.data.error)
    ) {
      const errorMsg =
        typeof widgetData?.data === 'object' &&
        widgetData.data !== null &&
        'error' in widgetData.data
          ? String(widgetData.data.error)
          : 'Failed to load files';
      throw new Error(errorMsg);
    }

    const dataValue =
      typeof widgetData.data === 'object' && widgetData.data !== null && 'value' in widgetData.data
        ? widgetData.data.value
        : [];
    return Array.isArray(dataValue) ? dataValue : [];
  }

  // API 狀態管理
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<Error | null>(null);
  const [rawData, setRawData] = useState<FileRecord[]>([]);

  // 使用 REST API 獲取數據
  const fetchData = useCallback(async () => {
    if (isEditMode || !hasBeenInViewport) return;

    setLoading(true);
    setError(null);

    try {
      const data = await fetchFilesServerAction({
        limit: itemsPerPage,
        offset: page * itemsPerPage,
      });
      setRawData(data);
    } catch (err) {
      console.error('Error fetching files:', err);
      setError(err instanceof Error ? err : new Error('Failed to fetch files'));
    } finally {
      setLoading(false);
    }
  }, [isEditMode, hasBeenInViewport, page, itemsPerPage]);

  // 初始加載
  useEffect(() => {
    if (hasBeenInViewport) {
      fetchData();
    }
  }, [hasBeenInViewport, fetchData]);

  // 處理數據
  const data = useMemo<FileRecord[]>(() => {
    if (!rawData) return [];

    // REST API data is already processed
    return rawData || [];
  }, [rawData]);

  // 監聽 upload refresh
  useEffect(() => {
    if (otherFilesVersion > 0 && hasBeenInViewport) {
      fetchData();
    }
  }, [otherFilesVersion, fetchData, hasBeenInViewport]);

  // 處理分頁
  const handleLoadMore = useCallback(async () => {
    setPage(prev => prev + 1);
    // When using pagination, the refetch will be triggered by the page state change
  }, []);

  // 根據檔案類型選擇圖標
  const getFileIcon = (docType?: string, docName?: string) => {
    if (docType === 'image' || /\.(jpg|jpeg|png|gif|webp)$/i.test(docName || '')) {
      return PhotoIcon;
    }
    if (docType === 'cloud' || /\.(zip|rar|7z)$/i.test(docName || '')) {
      return CloudIcon;
    }
    return DocumentIcon;
  };

  // 定義 DataTable columns
  const columns = useMemo<DataTableColumn<FileRecord>[]>(
    () => [
      {
        key: 'created_at',
        header: 'Date',
        icon: CalendarIcon,
        width: '20%',
        render: value => format(fromDbTime(String(value || '')), 'MMM d, HH:mm'),
        className: 'text-slate-300',
      },
      {
        key: 'doc_name',
        header: 'File Name',
        icon: DocumentIcon,
        width: '50%',
        render: (value, item) => {
          const FileIcon = getFileIcon(item.doc_type, String(value || ''));
          return (
            <div className='flex items-center gap-2'>
              <FileIcon className='h-4 w-4 flex-shrink-0 text-slate-400' />
              <span className='truncate font-medium text-white'>{String(value || '')}</span>
            </div>
          );
        },
      },
      {
        key: 'uploader_name',
        header: 'Uploaded By',
        icon: UserIcon,
        width: '30%',
        render: (value, item) => (
          <div className='flex items-center gap-2'>
            <UserIcon className='h-4 w-4 flex-shrink-0 text-slate-400' />
            <span className='text-slate-300'>
              {String(value || '') || `User ${item.upload_by}`}
            </span>
          </div>
        ),
      },
    ],
    []
  );

  // 計算 metadata
  const metadata = useMemo(() => {
    const files = data || [];
    return {
      fileCount: files.length,
      hasMore: false, // 暫時設為 false，需要根據實際 API 返回調整
    };
  }, [data]);

  // Edit mode - 顯示空白狀態
  if (isEditMode) {
    return (
      <div ref={widgetRef}>
        <DataTable
          title='Other Files'
          icon={DocumentIcon}
          iconColor='from-purple-500 to-pink-500'
          data={[]}
          columns={columns}
          empty={true}
          emptyMessage='Other Files List Widget V2'
          emptyIcon={DocumentIcon}
        />
      </div>
    );
  }

  // Progressive Loading - 如果還未進入視窗，顯示 skeleton
  if (!hasBeenInViewport) {
    return (
      <div ref={widgetRef}>
        <WidgetSkeleton type='list' rows={5} />
      </div>
    );
  }

  return (
    <div ref={widgetRef}>
      <DataTable
        title='Other Files'
        subtitle={`${metadata.fileCount} files uploaded`}
        icon={DocumentIcon}
        iconColor='from-purple-500 to-pink-500'
        data={data || []}
        columns={columns}
        keyField='uuid'
        loading={loading}
        error={error}
        empty={(data || []).length === 0}
        emptyMessage='No files uploaded yet'
        emptyIcon={DocumentIcon}
        pagination={{
          enabled: true,
          pageSize: itemsPerPage,
          loadMore: true,
          hasMore: metadata.hasMore,
          onLoadMore: handleLoadMore,
          loadingMore: loading && page > 0,
        }}
        performanceMetrics={{
          source: 'REST API',
          optimized: true,
        }}
        connectionStatus={{
          type: 'polling',
          label: '✓ REST API',
        }}
        onRefresh={fetchData}
        showRefreshButton={true}
        animate={true}
        rowClassName='transition-colors hover:bg-slate-700/50'
      />
    </div>
  );
});

export default OtherFilesListWidgetV2;

/**
 * v1.4 系統清理完成於 2025-07-16
 *
 * Changes:
 * - 完全改用 REST API 架構和標準 React hooks
 * - 使用純 REST API 調用
 * - 簡化代碼結構，減少複雜性
 * - 保持原有功能不變
 *
 * Features:
 * - ✅ Progressive Loading with useInViewport
 * - ✅ DataTable 統一列表顯示
 * - ✅ 支援分頁查詢和 Load More
 * - ✅ Upload Refresh Context 整合
 * - ✅ 根據檔案類型顯示不同圖標
 * - ✅ 直接 REST API 調用
 *
 * Performance improvements:
 * - 直接 REST API 調用，無額外開銷
 * - 簡化狀態管理
 * - 優化組件結構
 */
