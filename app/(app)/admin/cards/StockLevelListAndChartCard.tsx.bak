/**
 * StockLevelListAndChartCard Component
 * Analytics System Enhancement with Unified Card Design System
 *
 * Features:
 * - Tab-based List and Chart views
 * - Rainbow gradient line charts
 * - Unified DataCard architecture with theme system
 * - Enhanced statistics display with cardTextStyles
 * - Glassmorphic design with border glow effects
 * - Consistent typography and color scheme
 */

'use client';

import React, { useState, useCallback, _useMemo } from 'react';
import { useQuery, gql } from '@apollo/client';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  Legend } from 'recharts';
import { format } from 'date-fns';
import {
  Package,
  AlertCircle,
  BarChart3,
  List } from 'lucide-react';
import { _toast } from 'sonner';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Skeleton } from '@/components/ui/skeleton';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { cn } from '@/lib/utils';
import { DataCard } from '@/lib/card-system/EnhancedGlassmorphicCard';
import { cardTextStyles, cardChartColors } from '@/lib/card-system/theme';

// Type definitions for stock level data
interface ChartDataPoint {
  date: string;
  stockCode: string;
  stockLevel: number;
}

interface GroupedChartData {
  date: string;
  fullDate: string;
  [key: string]: string | number; // For dynamic stock codes
}

interface StockRecord {
  stock: string;
  description?: string;
  stockLevel: number;
  updateTime: string;
  productInfo?: {
    description?: string;
    type?: string;
    colour?: string;
    standardQty?: number;
  };
}

interface ProcessedListItem {
  productCode: string;
  productName: string;
  productType: string;
  lastUpdated: string;
  currentStock: number;
  maxStock: number;
  minStock: number;
  trend: number;
  colour: string;
  standardQty: number;
}

// Inline styles for rainbow stock distribution animations
const inlineStyles = `
  @keyframes pulse {
    0%, 100% {
      opacity: 1;
      transform: scale(1);
    }
    50% {
      opacity: 0.8;
      transform: scale(1.2);
    }
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes shimmer {
    0% {
      background-position: -200% 0;
    }
    100% {
      background-position: 200% 0;
    }
  }

  /* Rotate animation removed to prevent flashing */

  .rainbow-chart-container {
    animation: fadeIn 0.8s ease-out;
  }

  .pulse-dot {
    /* Pulse animation removed to prevent flashing */
    background: #10b981;
    opacity: 1;
  }

  .stat-card {
    animation: fadeIn 0.6s ease-out;
    animation-fill-mode: both;
  }

  .stat-card:nth-child(1) { animation-delay: 0.1s; }
  .stat-card:nth-child(2) { animation-delay: 0.2s; }
  .stat-card:nth-child(3) { animation-delay: 0.3s; }
  .stat-card:nth-child(4) { animation-delay: 0.4s; }

  .shimmer-skeleton {
    background: linear-gradient(
      90deg,
      rgba(255, 255, 255, 0.05) 25%,
      rgba(255, 255, 255, 0.1) 50%,
      rgba(255, 255, 255, 0.05) 75%
    );
    background-_size: 200% 100%;
    animation: shimmer 1.5s infinite;
  }

  .recharts-line {
    /* Glow effects removed to prevent visual distraction */
    transition: all 0.3s ease;
  }

  .recharts-line:hover {
    stroke-width: 3;
  }

  .rainbow-gradient-bg {
    background: linear-gradient(135deg, #1a1a2e 0%, #0f0f23 100%);
    position: relative;
    overflow: hidden;
  }

  /* Rainbow gradient effect removed to prevent flashing */
  .rainbow-gradient-bg::before {
    display: none;
  }

  .custom-tooltip {
    background: rgba(0, 0, 0, 0.9) !important;
    border: 1px solid rgba(255, 255, 255, 0.2) !important;
    border-radius: 8px !important;
    padding: 12px !important;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5) !important;
  }

  .custom-tooltip .recharts-tooltip-label {
    color: #fff !important;
    font-weight: 600 !important;
    margin-bottom: 8px !important;
  }

  .custom-tooltip .recharts-tooltip-item {
    color: #fff !important;
    font-_size: 14px !important;
  }

  .recharts-legend-wrapper {
    margin-top: 20px !important;
  }

  .recharts-legend-item {
    margin: 0 15px !important;
  }

  .recharts-legend-item-text {
    color: #ffffff !important;
  }

  .stat-card-hover {
    transition: all 0.3s ease;
    cursor: pointer;
  }

  .stat-card-hover:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3);
  }
`;

// GraphQL Queries
const PRODUCT_TYPES_QUERY = gql`
  query GetProductTypes {
    productFormOptions {
      types {
        value
        label
      }
    }
  }
`;

const STOCK_LEVEL_LIST_QUERY = gql`
  query GetStockLevelList($productType: String!) {
    stockLevelList(productType: $productType) {
      records {
        uuid
        stock
        description
        stockLevel
        updateTime
        productInfo {
          code
          description
          type
          colour
          standardQty
        }
      }
      totalCount
      lastUpdated
    }
  }
`;

const STOCK_LEVEL_CHART_QUERY = gql`
  query GetStockLevelChart($productType: String!, $days: Int = 21) {
    stockLevelChart(productType: $productType, days: $days) {
      chartData {
        date
        stockCode
        stockLevel
        description
      }
      productCodes
      dateRange {
        start
        end
      }
    }
  }
`;

export interface StockDistributionCardProps {
  height?: string | number;
  className?: string;
  isEditMode?: boolean;
  title?: string;
  description?: string;
}

// Enhanced rainbow color palette using theme system
const RAINBOW_COLORS = [
  '#FF006E', // Hot Pink
  '#FB5607', // Orange Red
  '#FFBE0B', // Yellow
  '#8338EC', // Purple
  '#3A86FF', // Blue
  '#06FFB4', // Cyan
  '#FF4365', // Pink Red
  '#00F5FF', // Electric Blue
  '#FFD23F', // Golden Yellow
  '#C77DFF', // Light Purple
];

// Use chart colors from theme system as fallback
const getChartColor = (index: number): string => {
  return RAINBOW_COLORS[index % RAINBOW_COLORS.length] || cardChartColors.getColor(index, true);
};

// Custom Tooltip Component
interface CustomTooltipProps {
  active?: boolean;
  payload?: Array<{
    value?: number;
    _name: string;
    color: string;
  }>;
  label?: string;
}

const CustomTooltip = ({ active, payload, label }: CustomTooltipProps) => {
  if (active && payload && payload.length) {
    // Filter out entries with null, undefined, or 0 values
    const validEntries = payload.filter(
      entry => entry.value !== null && entry.value !== undefined && entry.value !== 0
    );

    // Only show tooltip if there are valid entries
    if (validEntries.length === 0) {
      return null;
    }

    return (
      <div _className ='custom-tooltip'>
        <p _className ='recharts-tooltip-label'>{label}</p>
        {validEntries.map((entry, index) => (
          <p key={index} _className ='recharts-tooltip-item' style={{ color: entry.color }}>
            {entry.name}: {entry.value?.toLocaleString()}
          </p>
        ))}
      </div>
    );
  }
  return null;
};

export const StockLevelListAndChartCard: React.FC<StockDistributionCardProps> = ({
  height = 700,
  _className,
  isEditMode = false,
  title = 'Rainbow Stock Distribution',
  description = 'Beautiful rainbow-themed stock trend visualization' }) => {
  const [selectedType, setSelectedType] = useState<string>('');
  const [activeTab, setActiveTab] = useState<string>('list');

  // Inject styles once when component mounts
  React.useEffect(() => {
    const styleId = 'stock-distribution-styles';
    if (!document.getElementById(styleId)) {
      const style = document.createElement('style');
      style.id = styleId;
      style.textContent = inlineStyles;
      document.head.appendChild(style);
    }

    return () => {
      // Clean up styles when component unmounts
      const existingStyle = document.getElementById(styleId);
      if (existingStyle && !document.querySelector('.stock-level-list-chart-card')) {
        existingStyle.remove();
      }
    };
  }, []);

  // GraphQL Queries
  const {
    _data: typesData,
    loading: typesLoading,
    _error: typesError } = useQuery(PRODUCT_TYPES_QUERY, {
    skip: isEditMode,
    fetchPolicy: 'cache-and-network' });

  const {
    _data: listData,
    loading: listLoading,
    _error: listError,
    refetch: refetchList } = useQuery(STOCK_LEVEL_LIST_QUERY, {
    variables: {
      productType: selectedType || '' },
    skip: isEditMode || !selectedType || selectedType === '', // Skip if no type selected
    fetchPolicy: 'cache-and-network',
    errorPolicy: 'ignore', // Ignore errors when skipped
  });

  const {
    _data: chartData,
    loading: chartLoading,
    _error: chartError,
    refetch: refetchChart } = useQuery(STOCK_LEVEL_CHART_QUERY, {
    variables: {
      productType: selectedType || '',
      days: 21 },
    skip: isEditMode || !selectedType || selectedType === '', // Skip if no type selected
    fetchPolicy: 'cache-and-network',
    errorPolicy: 'ignore', // Ignore errors when skipped
  });

  // 產品類型選項
  const productTypes = useMemo(() => {
    return (
      typesData?.productFormOptions?.types
        ?.filter(
          (pt: { value: string; label: string }) => pt.value && pt.value !== '' && pt.value !== '-'
        )
        ?.map((pt: { value: string; label: string }) => ({
          value: pt.value,
          label: pt.label })) || []
    );
  }, [typesData]);

  // Summary statistics from list data
  const summaryStats = useMemo(() => {
    if (!listData?.stockLevelList) {
      return {
        totalRecords: 0,
        totalCount: 0,
        lastUpdated: new Date().toISOString() };
    }
    return {
      totalRecords: listData.stockLevelList.totalCount,
      totalCount: listData.stockLevelList.totalCount,
      lastUpdated: listData.stockLevelList.lastUpdated };
  }, [listData]);

  // 處理類型選擇變更
  const handleTypeChange = useCallback(
    async (type: string) => {
      if (!type || type === '') return; // Guard against empty selection

      setSelectedType(type);
      window.dispatchEvent(
        new CustomEvent('stockTypeChanged', {
          detail: { type } })
      );

      // Only refetch if we have a valid type
      try {
        await Promise.all([refetchList && refetchList(), refetchChart && refetchChart()]);
        toast.success(`Stock filter updated: ${type}`);
      } catch (_error) {
        console.error('Error fetching stock _data:', _error);
        // Don't show error toast here as queries handle their own errors
      }
    },
    [refetchList, refetchChart]
  );

  // 準備折線圖數據：使用正確的 chart 數據
  const processedChartData = useMemo(() => {
    if (
      !chartData?.stockLevelChart?.chartData ||
      chartData.stockLevelChart.chartData.length === 0
    ) {
      return [];
    }

    // Group data by date for the chart
    const dataByDate = new Map<string, GroupedChartData>();

    chartData.stockLevelChart.chartData.forEach((point: ChartDataPoint) => {
      const dateKey = format(new Date(point.date), 'MM/dd');

      if (!dataByDate.has(dateKey)) {
        dataByDate.set(dateKey, {
          date: dateKey,
          fullDate: point.date });
      }

      // Add stock level for each product code
      const dateEntry = dataByDate.get(dateKey);
      if (dateEntry) {
        dateEntry[point.stockCode] = point.stockLevel;
      }
    });

    return Array.from(dataByDate.values()).sort(
      (a: GroupedChartData, b: GroupedChartData) =>
        new Date(a.fullDate).getTime() - new Date(b.fullDate).getTime()
    );
  }, [chartData]);

  // Get unique product codes that actually have data for chart lines
  const productCodesForChart = useMemo(() => {
    if (!chartData?.stockLevelChart?.chartData) {
      return [];
    }

    // Get unique product codes that have at least one non-zero value
    const codesWithData = new Set<string>();

    chartData.stockLevelChart.chartData.forEach((point: ChartDataPoint) => {
      if (point.stockLevel > 0) {
        codesWithData.add(point.stockCode);
      }
    });

    return Array.from(codesWithData).sort();
  }, [chartData]);

  // 準備列表數據：使用正確的 stock level 數據
  const processedListData = useMemo(() => {
    if (!listData?.stockLevelList?.records) {
      return [];
    }

    return listData.stockLevelList.records
      .map(
        (record: StockRecord): ProcessedListItem => ({
          productCode: record.stock,
          productName: record.productInfo?.description || record.description || 'Unknown',
          productType: record.productInfo?.type || 'Unknown',
          lastUpdated: format(new Date(record.updateTime), 'yyyy-MM-dd HH:mm'),
          currentStock: record.stockLevel,
          maxStock: record.stockLevel,
          minStock: 0,
          trend: 0, // Could be calculated based on historical data if needed
          colour: record.productInfo?.colour || 'Unknown',
          standardQty: record.productInfo?.standardQty || 0 })
      )
      .sort((a: ProcessedListItem, b: ProcessedListItem) =>
        a.productCode.localeCompare(b.productCode)
      );
  }, [listData]);

  const isLoading = typesLoading || (listLoading && selectedType) || (chartLoading && selectedType);
  const hasError = typesError || listError || chartError;

  if (hasError) {
    return (
      <DataCard _className ={cn('h-full', _className)} style={{ height }}>
        <div _className ='flex h-full items-center justify-center p-4'>
          <div _className ='text-center'>
            <AlertCircle _className ='text-destructive mx-auto mb-2 h-8 w-8' />
            <p _className ={cn(cardTextStyles.bodySmall, 'text-destructive')}>
              Failed to load stock data
            </p>
          </div>
        </div>
      </DataCard>
    );
  }

  return (
    <DataCard
      _className ={cn('stock-level-list-chart-card flex h-full flex-col', _className)}
      style={{ height }}
      variant='glass'
      isLoading={!!isLoading}
      borderGlow={selectedType ? 'always' : undefined}
    >
      <div _className ='border-b border-gray-700/50 p-4 pb-3'>
        <div _className ='flex items-center justify-between'>
          <div _className ='flex items-center gap-2'>
            <Package _className ='h-5 w-5 text-muted-foreground' />
            <h3 _className ={cardTextStyles.title}>{title}</h3>
          </div>
          <Badge variant='outline' _className ='text-xs'>
            <span _className ='text-primary'>GraphQL</span>
          </Badge>
        </div>
        <p _className ={cardTextStyles.subtitle}>{description}</p>

        {/* Product Type Selector */}
        <div _className ='mt-3'>
          <Select
            value={selectedType}
            onValueChange={handleTypeChange}
            disabled={Boolean(isLoading || isEditMode)}
          >
            <SelectTrigger _className ='w-full'>
              <SelectValue placeholder='Select Product From Below...' />
            </SelectTrigger>
            <SelectContent>
              {productTypes.map((type: { value: string; label: string }) => (
                <SelectItem key={type.value} value={type.value}>
                  {type.label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </div>

      <div _className ='flex-1 pb-3'>
        {isLoading ? (
          <div _className ='h-full space-y-4'>
            <div _className ='grid grid-cols-4 gap-3'>
              {[...Array(4)].map((_, i) => (
                <Skeleton key={i} _className ='shimmer-skeleton h-20' />
              ))}
            </div>
            <Skeleton _className ='shimmer-skeleton h-full' />
          </div>
        ) : (
          <Tabs value={activeTab} onValueChange={setActiveTab} _className ='h-full w-full'>
            <TabsList _className ='mb-4 grid w-full grid-cols-2'>
              <TabsTrigger value='list' _className ='flex items-center gap-2'>
                <List _className ='h-4 w-4' />
                List
              </TabsTrigger>
              <TabsTrigger value='chart' _className ='flex items-center gap-2'>
                <BarChart3 _className ='h-4 w-4' />
                Chart
              </TabsTrigger>
            </TabsList>

            <TabsContent value='list' _className ='w-full' style={{ minHeight: '400px' }}>
              {/* Product List */}
              <div _className ='w-full rounded-lg border border-gray-700 bg-slate-800/50 p-4 backdrop-blur'>
                <div _className ='mb-4 flex items-center justify-between'>
                  <h4
                    _className ={cn(
                      cardTextStyles.body,
                      'flex items-center gap-2 font-semibold text-white'
                    )}
                  >
                    <span>Product Stock Levels</span>
                    <Badge variant='outline' _className ='text-xs'>
                      {processedListData.length} items
                    </Badge>
                  </h4>
                  <span _className ={cardTextStyles.labelSmall}>
                    Updated: {format(new Date(summaryStats.lastUpdated), 'MM/dd HH:mm')}
                  </span>
                </div>

                {!selectedType ? (
                  <div _className ='flex h-[400px] items-center justify-center'>
                    <div _className ='text-center'>
                      <Package _className ='mx-auto mb-2 h-8 w-8 text-gray-500' />
                      <p _className ={cardTextStyles.bodySmall}>
                        Please select a product type to view stock levels
                      </p>
                    </div>
                  </div>
                ) : processedListData.length > 0 ? (
                  <div _className ='max-h-[500px] overflow-y-auto'>
                    {/* Table Header */}
                    <div
                      _className ={cn(
                        'grid grid-cols-4 gap-4 rounded-t-lg border-b border-gray-600 bg-gray-900/50 p-3',
                        cardTextStyles.label,
                        'text-gray-300'
                      )}
                    >
                      <div>Code</div>
                      <div>Description</div>
                      <div>Latest Update</div>
                      <div _className ='text-right'>Stock Level</div>
                    </div>
                    {/* Table Body */}
                    <div _className ='space-y-1'>
                      {processedListData.map(
                        (
                          item: {
                            productCode: string;
                            productName: string;
                            lastUpdated: string;
                            currentStock: number;
                            maxStock: number;
                            trend: number;
                          },
                          index: number
                        ) => (
                          <div
                            key={item.productCode}
                            _className ='grid grid-cols-4 gap-4 border-b border-gray-700/50 bg-gray-800/30 p-3 transition-colors hover:bg-gray-800/50'
                          >
                            <div _className ='flex items-center gap-2'>
                              <div
                                _className ='h-2 w-2 flex-shrink-0 rounded-full'
                                style={{ backgroundColor: getChartColor(index) }}
                              />
                              <span
                                _className ={cn(cardTextStyles.bodySmall, 'font-mono text-white')}
                              >
                                {item.productCode}
                              </span>
                            </div>
                            <div
                              _className ={cn(cardTextStyles.bodySmall, 'truncate text-gray-300')}
                              title={item.productName}
                            >
                              {item.productName}
                            </div>
                            <div _className ={cn(cardTextStyles.bodySmall, 'text-gray-400')}>
                              {item.lastUpdated}
                            </div>
                            <div _className ='text-right'>
                              <span
                                _className ={cn(cardTextStyles.bodySmall, 'font-medium text-white')}
                              >
                                {item.currentStock.toLocaleString()}
                              </span>
                            </div>
                          </div>
                        )
                      )}
                    </div>
                  </div>
                ) : (
                  <div _className ='flex h-64 items-center justify-center'>
                    <div _className ='text-center'>
                      <Package _className ='mx-auto mb-2 h-8 w-8 text-gray-500' />
                      <p _className ={cardTextStyles.bodySmall}>No product data available</p>
                      <p _className ={cn(cardTextStyles.labelSmall, 'mt-1 text-gray-500')}>
                        Try selecting a different product type
                      </p>
                    </div>
                  </div>
                )}
              </div>
            </TabsContent>

            <TabsContent
              value='chart'
              _className ='rainbow-chart-container w-full'
              style={{ minHeight: '400px' }}
            >
              {/* Rainbow Line Chart */}
              <div
                _className ='relative w-full rounded-lg border border-gray-700 bg-slate-800/50 p-4 backdrop-blur'
                style={{ minHeight: '600px' }}
              >
                <div _className ='mb-4 flex items-center justify-between'>
                  <h4
                    _className ={cn(
                      cardTextStyles.body,
                      'flex items-center gap-2 font-semibold text-white'
                    )}
                  >
                    <span>Stock Trend (Last 21 Days)</span>
                  </h4>
                  {chartData?.stockLevelChart && (
                    <span _className ={cardTextStyles.labelSmall}>
                      Updated: {format(new Date(), 'MM/dd HH:mm')}
                    </span>
                  )}
                </div>
                {!selectedType ? (
                  <div _className ='flex h-[calc(100%-30px)] items-center justify-center'>
                    <div _className ='text-center'>
                      <BarChart3 _className ='mx-auto mb-2 h-8 w-8 text-gray-500' />
                      <p _className ={cardTextStyles.bodySmall}>
                        Please select a product type to view trends
                      </p>
                    </div>
                  </div>
                ) : processedChartData.length > 0 ? (
                  <ResponsiveContainer width='100%' height={550}>
                    <LineChart
                      _data ={processedChartData}
                      margin={{ top: 5, right: 30, left: 20, bottom: 60 }}
                    >
                      <defs>
                        {/* Create gradient for trend line */}
                        <linearGradient
                          key='gradient-trend'
                          id='gradient-trend'
                          x1='0'
                          y1='0'
                          x2='1'
                          y2='0'
                        >
                          <stop offset='0%' stopColor={RAINBOW_COLORS[0]} stopOpacity={0.8} />
                          <stop offset='100%' stopColor={RAINBOW_COLORS[1]} stopOpacity={0.8} />
                        </linearGradient>
                      </defs>
                      <CartesianGrid strokeDasharray='3 3' stroke='rgba(255,255,255,0.1)' />
                      <XAxis
                        dataKey='date'
                        stroke='rgba(255,255,255,0.5)'
                        fontSize={10}
                        tick={{ fill: 'rgba(255,255,255,0.7)' }}
                        angle={-45}
                        textAnchor='end'
                        height={60}
                        interval='preserveStartEnd'
                      />
                      <YAxis
                        stroke='rgba(255,255,255,0.5)'
                        fontSize={11}
                        tick={{ fill: 'rgba(255,255,255,0.7)' }}
                      />
                      <Tooltip content={<CustomTooltip />} />
                      {/* Only show legend if there are product codes with data */}
                      {productCodesForChart.length > 0 && (
                        <Legend
                          wrapperStyle={{
                            fontSize: '12px',
                            paddingTop: '20px',
                            color: '#ffffff' }}
                          formatter={value => value.split(' - ')[0]}
                          iconType='line'
                        />
                      )}
                      {/* Individual product lines - only render those with data */}
                      {productCodesForChart.map((productCode: string, index: number) => (
                        <Line
                          key={productCode}
                          type='monotone'
                          dataKey={productCode}
                          stroke={getChartColor(index)}
                          strokeWidth={2.5}
                          _name ={productCode}
                          dot={false}
                          connectNulls={false} // Don't connect null values
                          activeDot={{
                            r: 6,
                            fill: getChartColor(index),
                            stroke: 'rgba(255,255,255,0.5)',
                            strokeWidth: 2 }}
                          animationDuration={1500}
                          animationEasing='ease-in-out'
                        />
                      ))}
                    </LineChart>
                  </ResponsiveContainer>
                ) : (
                  <div _className ='flex h-[calc(100%-30px)] items-center justify-center'>
                    <div _className ='text-center'>
                      <Package _className ='mx-auto mb-2 h-8 w-8 text-gray-500' />
                      <p _className ={cardTextStyles.bodySmall}>No stock history data available</p>
                      <p _className ={cn(cardTextStyles.labelSmall, 'mt-1 text-gray-500')}>
                        Try selecting a different product type
                      </p>
                    </div>
                  </div>
                )}
              </div>
            </TabsContent>
          </Tabs>
        )}
      </div>
    </DataCard>
  );
};

// Export with display name for debugging
StockLevelListAndChartCard.displayName = 'StockLevelListAndChartCard';
