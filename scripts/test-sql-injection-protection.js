#!/usr/bin/env node

/**
 * SQL Injection Protection Test Script
 * Ê∏¨Ë©¶ execute_sql_query RPC ÂáΩÊï∏ÁöÑ SQL Ê≥®ÂÖ•‰øùË≠∑Ê©üÂà∂
 *
 * ÈÄôÂÄãËÖ≥Êú¨ÊúÉÊ∏¨Ë©¶Â§öÁ®Æ SQL Ê≥®ÂÖ•ÊîªÊìäÂêëÈáè‰æÜÁ¢∫‰øùÂÆâÂÖ®Êé™ÊñΩÊúâÊïà
 */

const { createClient } = require('@supabase/supabase-js');
const dotenv = require('dotenv');

// Âä†ËºâÁí∞Â¢ÉËÆäÈáè
dotenv.config({ path: '.env.local' });

console.log('Environment check:');
console.log('URL:', process.env.NEXT_PUBLIC_SUPABASE_URL ? '‚úì Set' : '‚úó Missing');
console.log('Key:', process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? '‚úì Set' : '‚úó Missing');

// ÂàùÂßãÂåñ Supabase ÂÆ¢Êà∂Á´Ø
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

// Ê∏¨Ë©¶Áî®‰æãÈ°ûÂûã
const TEST_CATEGORIES = {
  DML_INJECTION: 'DML Statement Injection',
  DDL_INJECTION: 'DDL Statement Injection',
  SYSTEM_ACCESS: 'System Table Access',
  MULTIPLE_STATEMENTS: 'Multiple Statement Execution',
  COMMENT_BYPASS: 'Comment Bypass Attempts',
  UNION_INJECTION: 'UNION-based Injection',
  BOOLEAN_INJECTION: 'Boolean-based Injection',
  TIME_BASED: 'Time-based Injection'
};

// ÊÉ°ÊÑè SQL Ê≥®ÂÖ•Ê∏¨Ë©¶Ê°à‰æã
const MALICIOUS_TEST_CASES = [
  // DML Ê≥®ÂÖ•Ê∏¨Ë©¶
  {
    category: TEST_CATEGORIES.DML_INJECTION,
    name: 'DELETE Ë™ûÂè•Ê≥®ÂÖ•',
    query: "SELECT * FROM data_code; DELETE FROM data_code WHERE id = 1",
    expectedBlocked: true,
    expectedError: 'Dangerous SQL keywords detected'
  },
  {
    category: TEST_CATEGORIES.DML_INJECTION,
    name: 'UPDATE Ë™ûÂè•Ê≥®ÂÖ•',
    query: "SELECT 1; UPDATE data_supplier SET name = 'hacked'",
    expectedBlocked: true,
    expectedError: 'Dangerous SQL keywords detected'
  },
  {
    category: TEST_CATEGORIES.DML_INJECTION,
    name: 'INSERT Ë™ûÂè•Ê≥®ÂÖ•',
    query: "SELECT * FROM data_code UNION ALL SELECT NULL; INSERT INTO data_code VALUES ('hack', 'hacked')",
    expectedBlocked: true,
    expectedError: 'Dangerous SQL keywords detected'
  },

  // DDL Ê≥®ÂÖ•Ê∏¨Ë©¶
  {
    category: TEST_CATEGORIES.DDL_INJECTION,
    name: 'DROP TABLE Ê≥®ÂÖ•',
    query: "SELECT 1; DROP TABLE record_history",
    expectedBlocked: true,
    expectedError: 'Dangerous SQL keywords detected'
  },
  {
    category: TEST_CATEGORIES.DDL_INJECTION,
    name: 'CREATE TABLE Ê≥®ÂÖ•',
    query: "SELECT 1; CREATE TABLE evil_table (id INT)",
    expectedBlocked: true,
    expectedError: 'Dangerous SQL keywords detected'
  },
  {
    category: TEST_CATEGORIES.DDL_INJECTION,
    name: 'ALTER TABLE Ê≥®ÂÖ•',
    query: "SELECT * FROM data_code; ALTER TABLE data_code ADD COLUMN evil TEXT",
    expectedBlocked: true,
    expectedError: 'Dangerous SQL keywords detected'
  },
  {
    category: TEST_CATEGORIES.DDL_INJECTION,
    name: 'TRUNCATE Ê≥®ÂÖ•',
    query: "SELECT 1; TRUNCATE TABLE record_palletinfo",
    expectedBlocked: true,
    expectedError: 'Dangerous SQL keywords detected'
  },

  // Á≥ªÁµ±Ë°®Â≠òÂèñÊ∏¨Ë©¶
  {
    category: TEST_CATEGORIES.SYSTEM_ACCESS,
    name: 'PostgreSQL Á≥ªÁµ±Ë°®Â≠òÂèñ',
    query: "SELECT * FROM pg_stat_activity",
    expectedBlocked: false, // ÈÄôÂÄãÂèØËÉΩÊúÉË¢´ÂÖÅË®±‰ΩÜÊ≤íÊúâÊ¨äÈôê
    expectedError: null
  },
  {
    category: TEST_CATEGORIES.SYSTEM_ACCESS,
    name: 'Áî®Êà∂Ë°®Â≠òÂèñÂòóË©¶',
    query: "SELECT usename, passwd FROM pg_shadow",
    expectedBlocked: false, // Ê¨äÈôêÊéßÂà∂ÊúÉÈòªÊ≠¢ÈÄôÂÄã
    expectedError: null
  },
  {
    category: TEST_CATEGORIES.SYSTEM_ACCESS,
    name: 'Êï∏ÊìöÂ∫´ÈÖçÁΩÆÂ≠òÂèñ',
    query: "SELECT name, setting FROM pg_settings WHERE name LIKE '%password%'",
    expectedBlocked: false,
    expectedError: null
  },

  // Â§öË™ûÂè•Âü∑Ë°åÊ∏¨Ë©¶
  {
    category: TEST_CATEGORIES.MULTIPLE_STATEMENTS,
    name: 'ÂàÜËôüÂàÜÈöîÂ§öË™ûÂè•',
    query: "SELECT 1; SELECT 2; SELECT 3",
    expectedBlocked: true,
    expectedError: 'Dangerous SQL keywords detected'
  },
  {
    category: TEST_CATEGORIES.MULTIPLE_STATEMENTS,
    name: 'ÂµåÂ•óÊü•Ë©¢ËàáÂàÜËôü',
    query: "SELECT (SELECT 1); SELECT user",
    expectedBlocked: true,
    expectedError: 'Dangerous SQL keywords detected'
  },

  // Ë®ªÈáãÁπûÈÅéÊ∏¨Ë©¶
  {
    category: TEST_CATEGORIES.COMMENT_BYPASS,
    name: 'ÂñÆË°åË®ªÈáãÁπûÈÅé',
    query: "SELECT * FROM data_code -- AND 1=1; DELETE FROM data_code",
    expectedBlocked: false, // Ë®ªÈáãÊáâË©≤‰ΩøÂæåÈù¢ÁöÑÂÖßÂÆπÁÑ°Êïà
    expectedError: null
  },
  {
    category: TEST_CATEGORIES.COMMENT_BYPASS,
    name: 'Â§öË°åË®ªÈáãÁπûÈÅé',
    query: "SELECT * FROM data_code /* malicious comment */ UNION SELECT NULL",
    expectedBlocked: false,
    expectedError: null
  },

  // UNION Ê≥®ÂÖ•Ê∏¨Ë©¶
  {
    category: TEST_CATEGORIES.UNION_INJECTION,
    name: 'UNION Ê≥®ÂÖ•ÂòóË©¶',
    query: "SELECT id FROM data_code WHERE 1=1 UNION SELECT password FROM auth.users",
    expectedBlocked: false, // Ê¨äÈôêÊéßÂà∂ÊúÉËôïÁêÜÈÄôÂÄã
    expectedError: null
  },
  {
    category: TEST_CATEGORIES.UNION_INJECTION,
    name: 'UNION ALL Ê≥®ÂÖ•',
    query: "SELECT code FROM data_code UNION ALL SELECT table_name FROM information_schema.tables",
    expectedBlocked: false,
    expectedError: null
  },

  // Â∏ÉÊûóÊ≥®ÂÖ•Ê∏¨Ë©¶
  {
    category: TEST_CATEGORIES.BOOLEAN_INJECTION,
    name: 'Â∏ÉÊûóÁõ≤Ê≥®Ê∏¨Ë©¶',
    query: "SELECT * FROM data_code WHERE 1=1 AND (SELECT COUNT(*) FROM data_supplier) > 0",
    expectedBlocked: false, // ÈÄôÊòØÂêàÊ≥ïÁöÑ SELECT
    expectedError: null
  },
  {
    category: TEST_CATEGORIES.BOOLEAN_INJECTION,
    name: 'Â≠êÊü•Ë©¢Â∏ÉÊûóÊ∏¨Ë©¶',
    query: "SELECT * FROM data_code WHERE EXISTS (SELECT 1 FROM record_palletinfo WHERE plt_num LIKE '%test%')",
    expectedBlocked: false,
    expectedError: null
  },

  // ÊôÇÈñìÁõ≤Ê≥®Ê∏¨Ë©¶
  {
    category: TEST_CATEGORIES.TIME_BASED,
    name: 'pg_sleep ÊôÇÈñìÂª∂ÈÅ≤',
    query: "SELECT * FROM data_code WHERE pg_sleep(5) IS NULL",
    expectedBlocked: false, // ÂèØËÉΩÊúÉË¢´Ë∂ÖÊôÇÈôêÂà∂ÈòªÊ≠¢
    expectedError: null
  },
  {
    category: TEST_CATEGORIES.TIME_BASED,
    name: 'Ë§áÈõúÊôÇÈñìÂª∂ÈÅ≤',
    query: "SELECT * FROM data_code WHERE (SELECT COUNT(*) FROM generate_series(1,1000000)) > 0",
    expectedBlocked: false, // ÂèØËÉΩÂõ†ÊàêÊú¨Â§™È´òË¢´ÈòªÊ≠¢
    expectedError: null
  }
];

// ÂêàÊ≥ïÊü•Ë©¢Ê∏¨Ë©¶ÔºàÁ¢∫‰øù‰∏çÊúÉË™§Âà§Ôºâ
const LEGITIMATE_TEST_CASES = [
  {
    name: 'Âü∫Êú¨ SELECT Êü•Ë©¢',
    query: 'SELECT COUNT(*) FROM data_code',
    shouldPass: true
  },
  {
    name: 'WITH Â≠êÂè•Êü•Ë©¢',
    query: 'WITH summary AS (SELECT COUNT(*) as total FROM data_code) SELECT * FROM summary',
    shouldPass: true
  },
  {
    name: 'Ë§áÈõú JOIN Êü•Ë©¢',
    query: `
      SELECT dc.code, dc.name_chi, COUNT(rp.id) as pallet_count
      FROM data_code dc
      LEFT JOIN record_palletinfo rp ON dc.code = rp.product_code
      GROUP BY dc.code, dc.name_chi
      LIMIT 10
    `,
    shouldPass: true
  },
  {
    name: 'Á™óÂè£ÂáΩÊï∏Êü•Ë©¢',
    query: `
      SELECT
        plt_num,
        product_code,
        ROW_NUMBER() OVER (PARTITION BY product_code ORDER BY latest_update DESC) as rn
      FROM record_palletinfo
      LIMIT 5
    `,
    shouldPass: true
  }
];

/**
 * Âü∑Ë°åÂñÆÂÄãÊ∏¨Ë©¶Ê°à‰æã
 */
async function runTestCase(testCase, isLegitimate = false) {
  const startTime = Date.now();

  try {
    const { data, error } = await supabase.rpc('execute_sql_query', {
      query_text: testCase.query
    });

    const executionTime = Date.now() - startTime;

    if (isLegitimate) {
      // ÂêàÊ≥ïÊü•Ë©¢Ê∏¨Ë©¶
      return {
        ...testCase,
        passed: !error && testCase.shouldPass,
        error: error?.message || null,
        data: data ? (Array.isArray(data.data) ? data.data.length : 'N/A') : null,
        executionTime
      };
    } else {
      // ÊÉ°ÊÑèÊü•Ë©¢Ê∏¨Ë©¶
      const blocked = !!error;
      const correctlyBlocked = testCase.expectedBlocked ? blocked : !blocked;

      return {
        ...testCase,
        blocked,
        correctlyBlocked,
        actualError: error?.message || null,
        expectedError: testCase.expectedError,
        errorMatch: testCase.expectedError ?
          (error?.message?.includes(testCase.expectedError) || false) : true,
        executionTime,
        securityStatus: correctlyBlocked ? '‚úÖ SECURE' : '‚ùå VULNERABLE'
      };
    }
  } catch (err) {
    return {
      ...testCase,
      blocked: true,
      correctlyBlocked: testCase.expectedBlocked || false,
      actualError: err.message,
      executionTime: Date.now() - startTime,
      securityStatus: testCase.expectedBlocked ? '‚úÖ SECURE' : '‚ö†Ô∏è UNEXPECTED'
    };
  }
}

/**
 * ÈÅãË°åÊâÄÊúâÊÉ°ÊÑèÊ≥®ÂÖ•Ê∏¨Ë©¶
 */
async function runMaliciousTests() {
  console.log('üîí ÈñãÂßã SQL Ê≥®ÂÖ•‰øùË≠∑Ê∏¨Ë©¶...\n');

  const results = {};
  let totalTests = 0;
  let passedTests = 0;
  let vulnerabilities = [];

  // ÊåâÈ°ûÂà•ÂàÜÁµÑÊ∏¨Ë©¶
  for (const category of Object.values(TEST_CATEGORIES)) {
    const categoryTests = MALICIOUS_TEST_CASES.filter(test => test.category === category);
    results[category] = [];

    console.log(`üìÇ ${category}:`);
    console.log('‚îÄ'.repeat(60));

    for (const testCase of categoryTests) {
      const result = await runTestCase(testCase);
      results[category].push(result);
      totalTests++;

      if (result.correctlyBlocked) {
        passedTests++;
        console.log(`  ‚úÖ ${result.name}: ${result.securityStatus}`);
      } else {
        console.log(`  ‚ùå ${result.name}: ${result.securityStatus}`);
        console.log(`     Expected: ${result.expectedBlocked ? 'BLOCKED' : 'ALLOWED'}`);
        console.log(`     Actual: ${result.blocked ? 'BLOCKED' : 'ALLOWED'}`);
        if (result.actualError) {
          console.log(`     Error: ${result.actualError}`);
        }
        vulnerabilities.push(result);
      }

      // Âª∂ÈÅ≤ÈÅøÂÖçÈÅéÊñºÈ†ªÁπÅÁöÑË´ãÊ±Ç
      await new Promise(resolve => setTimeout(resolve, 100));
    }

    console.log('');
  }

  return { results, totalTests, passedTests, vulnerabilities };
}

/**
 * ÈÅãË°åÂêàÊ≥ïÊü•Ë©¢Ê∏¨Ë©¶
 */
async function runLegitimateTests() {
  console.log('‚úÖ Ê∏¨Ë©¶ÂêàÊ≥ïÊü•Ë©¢ÔºàÁ¢∫‰øù‰∏çÊúÉË™§Âà§Ôºâ...\n');

  const results = [];
  let totalTests = 0;
  let passedTests = 0;

  for (const testCase of LEGITIMATE_TEST_CASES) {
    const result = await runTestCase(testCase, true);
    results.push(result);
    totalTests++;

    if (result.passed) {
      passedTests++;
      console.log(`  ‚úÖ ${result.name}: ÈÄöÈÅé (${result.executionTime}ms)`);
      if (result.data !== null) {
        console.log(`     ËøîÂõû ${result.data} Ë°åÊï∏Êìö`);
      }
    } else {
      console.log(`  ‚ùå ${result.name}: Â§±Êïó`);
      if (result.error) {
        console.log(`     ÈåØË™§: ${result.error}`);
      }
    }

    await new Promise(resolve => setTimeout(resolve, 100));
  }

  console.log('');
  return { results, totalTests, passedTests };
}

/**
 * ÁîüÊàêÊ∏¨Ë©¶Â†±Âëä
 */
function generateReport(maliciousResults, legitimateResults) {
  console.log('üìä SQL Ê≥®ÂÖ•‰øùË≠∑Ê∏¨Ë©¶Â†±Âëä');
  console.log('='.repeat(80));

  // Á∏ΩÈ´îÂÆâÂÖ®ÂàÜÊï∏
  const totalSecurityTests = maliciousResults.totalTests;
  const passedSecurityTests = maliciousResults.passedTests;
  const securityScore = ((passedSecurityTests / totalSecurityTests) * 100).toFixed(1);

  const totalLegitimateTests = legitimateResults.totalTests;
  const passedLegitimateTests = legitimateResults.passedTests;
  const functionalityScore = ((passedLegitimateTests / totalLegitimateTests) * 100).toFixed(1);

  console.log(`\nüõ°Ô∏è ÂÆâÂÖ®ÊÄßË©ïÂàÜ: ${securityScore}% (${passedSecurityTests}/${totalSecurityTests} ÈÄöÈÅé)`);
  console.log(`‚ö° ÂäüËÉΩÊÄßË©ïÂàÜ: ${functionalityScore}% (${passedLegitimateTests}/${totalLegitimateTests} ÈÄöÈÅé)`);

  // ÊºèÊ¥ûË©≥ÊÉÖ
  if (maliciousResults.vulnerabilities.length > 0) {
    console.log('\n‚ùå ÁôºÁèæÁöÑÂÆâÂÖ®ÊºèÊ¥û:');
    console.log('‚îÄ'.repeat(40));
    maliciousResults.vulnerabilities.forEach((vuln, index) => {
      console.log(`${index + 1}. ${vuln.category} - ${vuln.name}`);
      console.log(`   Êü•Ë©¢: ${vuln.query.substring(0, 100)}...`);
      console.log(`   È¢®Èö™: ${vuln.expectedBlocked ? 'È´ò' : '‰∏≠'}`);
      console.log('');
    });
  } else {
    console.log('\nüéâ Êú™ÁôºÁèæÂÆâÂÖ®ÊºèÊ¥ûÔºÅ');
  }

  // Âª∫Ë≠∞
  console.log('\nüí° ÂÆâÂÖ®Âª∫Ë≠∞:');
  console.log('‚îÄ'.repeat(40));

  if (securityScore < 100) {
    console.log('‚ö†Ô∏è Âª∫Ë≠∞Âä†Âº∑‰ª•‰∏ãÂÆâÂÖ®Êé™ÊñΩ:');
    console.log('   1. Ê™¢Êü• execute_sql_query ÂáΩÊï∏ÁöÑÈóúÈçµÂ≠óÈÅéÊøæ');
    console.log('   2. Â¢ûÂä†Êõ¥Âö¥Ê†ºÁöÑË™ûÂè•Ëß£Êûê');
    console.log('   3. ËÄÉÊÖÆÂØ¶ÊñΩÊü•Ë©¢ÁôΩÂêçÂñÆÊ©üÂà∂');
  } else {
    console.log('‚úÖ SQL Ê≥®ÂÖ•‰øùË≠∑Ê©üÂà∂ÈÅã‰ΩúËâØÂ•Ω');
  }

  if (functionalityScore < 100) {
    console.log('‚ö†Ô∏è Êüê‰∫õÂêàÊ≥ïÊü•Ë©¢Ë¢´Ë™§Âà§ÔºåÂª∫Ë≠∞:');
    console.log('   1. Ê™¢Êü•ÂÆâÂÖ®Ë¶èÂâáÊòØÂê¶ÈÅéÊñºÂö¥Ê†º');
    console.log('   2. ÂÑ™ÂåñÈóúÈçµÂ≠óÊ™¢Ê∏¨ÈÇèËºØ');
  }

  console.log('\nüìã Ê∏¨Ë©¶ÂÆåÊàêÊôÇÈñì:', new Date().toISOString());
}

/**
 * ‰∏ªÊ∏¨Ë©¶ÂáΩÊï∏
 */
async function main() {
  console.log('üöÄ NewPennine WMS - SQL Ê≥®ÂÖ•‰øùË≠∑Ê∏¨Ë©¶');
  console.log('=' .repeat(80));
  console.log('Ê∏¨Ë©¶ÁõÆÊ®ô: execute_sql_query RPC ÂáΩÊï∏');
  console.log('Ê∏¨Ë©¶ÊôÇÈñì:', new Date().toISOString());
  console.log('');

  try {
    // ÈÅãË°åÊÉ°ÊÑèÊü•Ë©¢Ê∏¨Ë©¶
    const maliciousResults = await runMaliciousTests();

    // ÈÅãË°åÂêàÊ≥ïÊü•Ë©¢Ê∏¨Ë©¶
    const legitimateResults = await runLegitimateTests();

    // ÁîüÊàêÂ†±Âëä
    generateReport(maliciousResults, legitimateResults);

  } catch (error) {
    console.error('‚ùå Ê∏¨Ë©¶Âü∑Ë°åÂ§±Êïó:', error.message);
    console.error('Ë´ãÊ™¢Êü•:');
    console.error('1. Supabase ÈÄ£Êé•Ë®≠ÂÆö');
    console.error('2. Áí∞Â¢ÉËÆäÈáèÈÖçÁΩÆ');
    console.error('3. execute_sql_query ÂáΩÊï∏ÊòØÂê¶Â≠òÂú®');
    process.exit(1);
  }
}

// ÈÅãË°åÊ∏¨Ë©¶
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { runSQLInjectionTests: main };
