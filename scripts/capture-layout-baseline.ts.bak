/**
 * Capture Layout Baseline Script
 * 捕獲當前所有布局配置作為測試基準
 */

import { adminDashboardLayouts } from '../app/admin/components/dashboard/adminDashboardLayouts';
import {
  captureAllLayouts,
  generateLayoutReport,
  saveLayoutSnapshot,
  validateLayoutSnapshot,
  captureThemeLayout
} from '../lib/widgets/layout-snapshot';
import fs from 'fs';
import path from 'path';

console.log('🔍 Starting layout baseline capture...\n');

// 1. 捕獲所有布局
console.log('📸 Capturing all layouts...');
const snapshots = captureAllLayouts(adminDashboardLayouts);

// 2. 驗證每個布局的轉換
console.log('\n✅ Validating conversions...');
let allValid = true;

Object.entries(adminDashboardLayouts).forEach(([theme, layout]) => {
  const converted = snapshots[theme as string];
  const isValid = validateLayoutSnapshot(layout, converted);

  console.log(`  ${theme}: ${isValid ? '✅' : '❌'} (${layout.widgets.length} widgets)`);

  if (!isValid) {
    allValid = false;
  }
});

if (!allValid) {
  console.error('\n❌ Some layouts failed validation!');
  process.exit(1);
}

// 3. 生成報告
console.log('\n📊 Generating layout report...');
const report = generateLayoutReport(snapshots);

// 4. 保存文件
const outputDir = path.join(__dirname, '../docs/widget-registry');
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true });
}

// 保存 JSON 快照
const jsonPath = path.join(outputDir, 'layout-baseline.json');
const jsonContent = saveLayoutSnapshot(snapshots);
fs.writeFileSync(jsonPath, jsonContent);
console.log(`  ✅ Saved JSON baseline to: ${jsonPath}`);

// 保存 Markdown 報告
const reportPath = path.join(outputDir, 'layout-baseline-report.md');
fs.writeFileSync(reportPath, report);
console.log(`  ✅ Saved report to: ${reportPath}`);

// 5. 生成統計
console.log('\n📈 Layout Statistics:');
console.log(`  Total themes: ${Object.keys(snapshots).length}`);
console.log(`  Total widgets: ${Object.values(snapshots).reduce((sum, widgets) => sum + widgets.length, 0)}`);

Object.entries(snapshots).forEach(([theme, widgets]) => {
  console.log(`  ${theme}: ${widgets.length} widgets`);
});

// 6. 生成測試用例模板
const testTemplate = `/**
 * Layout Compatibility Tests
 * Auto-generated test cases for layout integrity
 */

import { adminDashboardLayouts } from '@/app/admin/components/dashboard/adminDashboardLayouts';
import { captureThemeLayout, validateLayoutSnapshot } from '@/lib/widgets/layout-snapshot';
import { layoutCompatibilityManager } from '@/lib/widgets/layout-compatibility';
import baselineData from '../docs/widget-registry/layout-baseline.json';

describe('Widget Registry Layout Compatibility', () => {
  ${Object.keys(snapshots).map((theme: any) => `
  describe('${theme} theme', () => {
    it('should maintain layout integrity after migration', () => {
      const originalLayout = adminDashboardLayouts['${theme}'];
      const baseline = baselineData.snapshots['${theme}'];

      // Capture current layout
      const currentLayout = captureThemeLayout('${theme}', originalLayout);

      // Validate against baseline
      const isValid = layoutCompatibilityManager.validateLayoutIntegrity(
        baseline,
        currentLayout
      );

      expect(isValid).toBe(true);
    });
  });`).join('')}
});
`;

const testPath = path.join(outputDir, 'layout-compatibility.test.ts');
fs.writeFileSync(testPath, testTemplate);
console.log(`  ✅ Generated test template: ${testPath}`);

console.log('\n✨ Layout baseline capture completed successfully!');
console.log('\n💡 Next steps:');
console.log('  1. Review the generated files in docs/widget-registry/');
console.log('  2. Run the compatibility tests to ensure baseline is correct');
console.log('  3. Commit these files as the official baseline for migration');
