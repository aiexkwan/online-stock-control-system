#!/usr/bin/env tsx
/**
 * Stats Widget Migration Test Script
 * È©óË≠â Stats widgets ÈÅ∑ÁßªÊàêÂäü
 */

import { widgetRegistry } from '../lib/widgets/unified-registry';
import { UNIFIED_WIDGET_CONFIG } from '../lib/widgets/unified-widget-config';

async function testStatsWidgetMigration() {
  console.log('\nüîç Testing Stats Widget Migration...\n');

  try {
    // Widget registry auto-initializes from config

    // Ë¶ÅÊ∏¨Ë©¶ÁöÑ Stats widgets
    const statsWidgets = [
      'AwaitLocationQtyWidget',
      'YesterdayTransferCountWidget',
      'StillInAwaitWidget',
      'StillInAwaitPercentageWidget',
      'StatsCardWidget'
    ];

    console.log(`üìä Testing ${statsWidgets.length} Stats widgets:\n`);

    let successCount = 0;
    let failureCount = 0;

    for (const widgetId of statsWidgets) {
      console.log(`\nTesting ${widgetId}:`);
      console.log('‚îÄ'.repeat(50));

      // Ê™¢Êü•ÊòØÂê¶Â∑≤Ë®ªÂÜä
      const definition = widgetRegistry.getDefinition(widgetId);
      if (!definition) {
        console.error(`‚ùå Widget not registered: ${widgetId}`);
        failureCount++;
        continue;
      }

      console.log(`‚úÖ Widget registered`);
      console.log(`   Name: ${definition.name}`);
      console.log(`   Category: ${definition.category}`);
      console.log(`   Priority: ${definition.preloadPriority || 'N/A'}`);

      // Ê™¢Êü•ÁµÑ‰ª∂ÊòØÂê¶ÂèØÂä†Ëºâ
      const component = widgetRegistry.getComponent(widgetId);
      if (!component) {
        console.error(`‚ùå Component not found: ${widgetId}`);
        failureCount++;
        continue;
      }

      console.log(`‚úÖ Component available`);

      // Âú®ËÖ≥Êú¨Áí∞Â¢É‰∏≠Ë∑≥ÈÅéÂØ¶ÈöõÂä†ËºâÊ∏¨Ë©¶ÔºàÈÅøÂÖçÁí∞Â¢ÉËÆäÈáèÂïèÈ°åÔºâ
      if (widgetId === 'YesterdayTransferCountWidget') {
        console.log(`   ‚ö†Ô∏è  Skipping load test (requires GraphQL environment)`);
      }

      // Ê™¢Êü•ÁâπÊÆäÈÖçÁΩÆ
      const config = UNIFIED_WIDGET_CONFIG[widgetId as string];
      if (config?.metadata?.refreshInterval) {
        console.log(`   Refresh Interval: ${config.metadata.refreshInterval}ms`);
      }

      const hasTimeFrame = config?.metadata?.supportDateRange || false;
      console.log(`   Supports TimeFrame: ${hasTimeFrame ? 'Yes' : 'No'}`);

      // Ê™¢Êü• API Êû∂Êßã
      const apiSource = config?.metadata?.dataSource || 'unknown';
      console.log(`   API Source: ${apiSource}`);

      successCount++;
    }

    // Ê™¢Êü•È†êÂä†ËºâÂäüËÉΩ
    console.log('\n\nüì¶ Testing Preload Functionality:');
    console.log('‚îÄ'.repeat(50));

    const highPriorityWidgets = statsWidgets.filter(id => {
      const def = widgetRegistry.getDefinition(id);
      return def && (def.preloadPriority || 0) >= 8;
    });

    console.log(`High priority widgets (priority >= 8): ${highPriorityWidgets.join(', ')}`);

    const startTime = performance.now();
    await widgetRegistry.preloadWidgets(highPriorityWidgets);
    const preloadTime = performance.now() - startTime;

    console.log(`‚úÖ Preloaded ${highPriorityWidgets.length} widgets in ${preloadTime.toFixed(2)}ms`);

    // Á∏ΩÁµê
    console.log('\n\nüìà Migration Test Summary:');
    console.log('‚ïê'.repeat(50));
    console.log(`Total widgets tested: ${statsWidgets.length}`);
    console.log(`‚úÖ Success: ${successCount}`);
    console.log(`‚ùå Failed: ${failureCount}`);
    console.log(`Success rate: ${((successCount / statsWidgets.length) * 100).toFixed(1)}%`);

    // Ê™¢Êü•Êï¥È´î registry ÁãÄÊÖã
    const allDefinitions = widgetRegistry.getAllDefinitions();
    const statsCount = Array.from(allDefinitions.values())
      .filter(def => def.category === 'stats').length;

    console.log(`\nTotal Stats widgets in registry: ${statsCount}`);

    if (failureCount === 0) {
      console.log('\n‚ú® All Stats widgets successfully migrated!');
      process.exit(0);
    } else {
      console.error('\n‚ùå Some widgets failed migration');
      process.exit(1);
    }

  } catch (error) {
    console.error('\n‚ùå Migration test failed:', error);
    process.exit(1);
  }
}

// Âü∑Ë°åÊ∏¨Ë©¶
testStatsWidgetMigration();
