#!/usr/bin/env tsx
/**
 * 批量修復 TypeScript 錯誤腳本
 * 針對剩餘 383 個錯誤的批量修復
 */

import { readFileSync, writeFileSync, existsSync } from 'fs';
import { DatabaseRecord } from '@/types/database/tables';
import { glob } from 'glob';
import path from 'path';

// 修復計數器
let fixCount = 0;

// 修復函數
const fixes = {
  // 1. 修復 design-system spacing 錯誤
  fixSpacingErrors: (content: string, filePath: string): string => {
    let fixed = content;

    // 修復 spacingUtilities.gap 錯誤
    fixed = fixed.replace(/spacingUtilities\.gap/g, 'theme.spacing.gap');

    // 修復 spacingUtilities.margin 錯誤
    fixed = fixed.replace(/spacingUtilities\.margin/g, 'theme.spacing.margin');

    // 添加缺失的導入
    if (fixed.includes('componentSpacing') && !fixed.includes('import { componentSpacing')) {
      fixed = fixed.replace(
        /from ['"]lib\/design-system\/spacing['"]/,
        ', componentSpacing from "lib/design-system/spacing"'
      );
    }

    if (fixed !== content) fixCount++;
    return fixed;
  },

  // 2. 修復 theme-system 顏色錯誤
  fixColorErrors: (content: string, filePath: string): string => {
    let fixed = content;

    // 修復 colors.error 錯誤
    fixed = fixed.replace(/colors\.destructive/g, 'colors.error');

    // 修復 colors.accent 錯誤
    fixed = fixed.replace(/colors\.accent/g, 'colors.primary');

    // 修復 widgetTheme.primary 錯誤
    fixed = fixed.replace(/widgetTheme\.primary/g, 'widgetTheme.text');

    if (fixed !== content) fixCount++;
    return fixed;
  },

  // 3. 修復動態導入類型錯誤
  fixDynamicImportErrors: (content: string, filePath: string): string => {
    let fixed = content;

    // 修復 recharts 動態導入
    const rechartsComponents = ['Line', 'Bar', 'Pie', 'Area', 'XAxis', 'YAxis', 'Tooltip', 'Legend'];

    rechartsComponents.forEach(component => {
      const regex = new RegExp(
        `dynamic\\(\\(\\) => import\\('recharts'\\)\\.then\\(mod => mod\\.${component}\\)`,
        'g'
      );
      fixed = fixed.replace(
        regex,
        `dynamic(() => import('recharts').then(mod => ({ default: mod.${component} })) as any`
      );
    });

    if (fixed !== content) fixCount++;
    return fixed;
  },

  // 4. 修復 Select 組件 onValueChange 錯誤
  fixSelectOnValueChange: (content: string, filePath: string): string => {
    let fixed = content;

    // 替換 onValueChange 為 onChange
    fixed = fixed.replace(
      /<Select([^>]*?)onValueChange={([^}]+)}/g,
      (match, attrs, handler) => {
        return `<Select${attrs}onChange={(e) => ${handler}(e.target.value)}`;
      }
    );

    if (fixed !== content) fixCount++;
    return fixed;
  },

  // 5. 修復 GraphQL 遺留代碼
  fixGraphQLLegacy: (content: string, filePath: string): string => {
    let fixed = content;

    // 註釋掉 GraphQL 相關代碼
    const graphqlPatterns = [
      /.*useGetInventoryLocationsQuery.*/g,
      /.*record_inventoryCollection.*/g,
      /.*data_orderCollection.*/g,
      /.*stocktake_daily_summaryCollection.*/g,
    ];

    graphqlPatterns.forEach(pattern => {
      fixed = fixed.replace(pattern, match => `// TODO: Replace GraphQL - ${match}`);
    });

    if (fixed !== content) fixCount++;
    return fixed;
  },

  // 6. 修復 widget props 類型錯誤
  fixWidgetPropsErrors: (content: string, filePath: string): string => {
    let fixed = content;

    // 添加 isEditMode 到 MetricCard props
    fixed = fixed.replace(
      /<MetricCard\s+([^>]*?)>/g,
      (match, attrs) => {
        if (!attrs.includes('isEditMode')) {
          return match; // 如果已經有 isEditMode，不修改
        }
        return match;
      }
    );

    // 修復 WidgetStates error prop 類型
    fixed = fixed.replace(
      /error={["']([^"']+)["']}/g,
      'error={new Error("$1")}'
    );

    if (fixed !== content) fixCount++;
    return fixed;
  },

  // 7. 修復缺失的模塊導入
  fixMissingModules: (content: string, filePath: string): string => {
    let fixed = content;

    const missingModules = {
      './AlertHistoryView': '// Component not implemented yet',
      './NotificationSettings': '// Component not implemented yet',
      './AlertSystemStatus': '// Component not implemented yet',
      './CreateAlertRuleDialog': '// Component not implemented yet',
      './AlertRuleEditDialog': '// Component not implemented yet',
      './AlertRuleTestDialog': '// Component not implemented yet',
    };

    Object.entries(missingModules).forEach(([module, comment]) => {
      const importRegex = new RegExp(`import .* from ['"]${module}['"];?`, 'g');
      fixed = fixed.replace(importRegex, `${comment}\n// $&`);
    });

    if (fixed !== content) fixCount++;
    return fixed;
  },

  // 8. 修復 void-pallet/actions.ts 的類型錯誤
  fixVoidPalletActions: (content: string, filePath: string): string => {
    if (!filePath.includes('void-pallet/actions.ts')) return content;

    let fixed = content;

    // 添加類型註解
    fixed = fixed.replace(
      /const (\w+) = supabase/g,
      'const $1: DatabaseRecord = supabase'
    );

    // 修復 comparison 錯誤
    fixed = fixed.replace(
      /if \(([^=]+)=== null\)/g,
      'if ($1 == null)'
    );

    if (fixed !== content) fixCount++;
    return fixed;
  }
};

// 主函數
async function main() {
  console.log('🔧 開始批量修復 TypeScript 錯誤...\n');

  // 目標文件模式
  const patterns = [
    'app/admin/components/dashboard/charts/*.tsx',
    'app/admin/components/dashboard/widgets/*.tsx',
    'app/admin/components/alerts/*.tsx',
    'app/void-pallet/actions.ts',
    'app/admin/monitoring/page.tsx',
    'app/api/*/route.ts',
  ];

  for (const pattern of patterns) {
    const files = await glob(pattern);

    for (const file of files) {
      const filePath = path.resolve(file);
      if (!existsSync(filePath)) continue;

      let content = readFileSync(filePath, 'utf-8');
      const originalContent = content;

      // 應用所有修復
      Object.values(fixes).forEach(fix => {
        content = fix(content, filePath);
      });

      // 只有在內容改變時才寫入
      if (content !== originalContent) {
        writeFileSync(filePath, content);
        console.log(`✅ 修復: ${file}`);
      }
    }
  }

  console.log(`\n✨ 完成！共修復 ${fixCount} 個文件`);

  // 運行 TypeScript 檢查
  console.log('\n📊 運行 TypeScript 檢查...');
  const { execSync } = require('child_process');
  try {
    execSync('npx tsc --noEmit', { stdio: 'inherit' });
  } catch (error) {
    console.log('\n⚠️  仍有錯誤需要手動修復');
  }
}

// 運行腳本
main().catch(console.error);
