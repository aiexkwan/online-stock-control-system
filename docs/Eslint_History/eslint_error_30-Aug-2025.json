[
  {
    "filePath": "/Users/chun/Documents/PennineWMS/online-stock-control-system/app/services/examples/productCodeValidatorExample.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "message": "Definition for rule '@typescript-eslint/no-explicit-any' was not found.",
        "line": 240,
        "column": 79,
        "endLine": 240,
        "endColumn": 181,
        "severity": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * ProductCodeValidator 使用示例\n *\n * 本檔案展示了 ProductCodeValidator 的各種使用方式，\n * 包括基本驗證、批量處理、錯誤處理等實際應用場景。\n *\n * 注意：此檔案僅用於演示，實際使用時請根據需求調整。\n */\n\nimport ProductCodeValidator from '@/app/services/productCodeValidator';\nimport type { ValidationResult as _ValidationResult } from '@/app/services/productCodeValidator';\nimport { createLogger } from '@/lib/logger';\n\nconst exampleLogger = createLogger('ProductCodeValidatorExample');\n\n/**\n * 基本使用示例\n */\nexport async function basicUsageExample(): Promise<void> {\n  try {\n    exampleLogger.info('Starting basic usage example');\n\n    // 驗證單個產品代碼\n    const singleResult = await ProductCodeValidator.validateAndEnrichCodes(['ABC123']);\n\n    console.log('單個產品代碼驗證結果:', {\n      productCode: singleResult.enrichedOrders[0].product_code,\n      description: singleResult.enrichedOrders[0].product_desc,\n      isValid: singleResult.enrichedOrders[0].is_valid,\n      wasCorrected: singleResult.enrichedOrders[0].was_corrected });\n\n    // 驗證多個產品代碼\n    const multipleResult = await ProductCodeValidator.validateAndEnrichCodes([\n      'ABC123',\n      'XYZ789',\n      'INVALID001',\n      'abc124', // 測試相似度匹配和大小寫處理\n    ]);\n\n    console.log('批量驗證摘要:', multipleResult.summary);\n\n    multipleResult.enrichedOrders.forEach((order, index) => {\n      console.log(`產品 ${index + 1}:`, {\n        originalCode: order.original_code || order.product_code,\n        validatedCode: order.product_code,\n        description: order.product_desc,\n        status: order.is_valid ? '有效' : '無效',\n        corrected: order.was_corrected ? '已修正' : '未修正',\n        confidence: order.confidence_score\n          ? `${(order.confidence_score * 100).toFixed(1)}%`\n          : 'N/A' });\n    });\n  } catch {\n    exampleLogger.error(_error, 'Basic usage example failed');\n  }\n}\n\n/**\n * 批量處理示例\n */\nexport async function batchProcessingExample(): Promise<void> {\n  try {\n    exampleLogger.info('Starting batch processing example');\n\n    // 模擬從訂單系統獲取的產品代碼列表\n    const orderCodes = [\n      'ABC123',\n      'XYZ789',\n      'DEF456',\n      'GHI789',\n      'abc124',\n      'xyz790',\n      'invalid001',\n      'test999',\n      '',\n      null,\n      undefined,\n      'GOOD001',\n    ].filter(Boolean) as string[]; // 移除 null 和 undefined\n\n    const _result = await ProductCodeValidator.validateAndEnrichCodes(orderCodes);\n\n    console.log('批量處理結果統計:');\n    console.log(`總計: ${result.summary.total}`);\n    console.log(\n      `有效: ${result.summary.valid} (${((_result.summary.valid / result.summary.total) * 100).toFixed(1)}%)`\n    );\n    console.log(\n      `已修正: ${result.summary.corrected} (${((_result.summary.corrected / result.summary.total) * 100).toFixed(1)}%)`\n    );\n    console.log(\n      `無效: ${result.summary.invalid} (${((_result.summary.invalid / result.summary.total) * 100).toFixed(1)}%)`\n    );\n\n    // 分析需要人工處理的項目\n    const needsAttention = result.enrichedOrders.filter(\n      order => !order.is_valid || order.was_corrected\n    );\n\n    if (needsAttention.length > 0) {\n      console.log('\\n需要注意的項目:');\n      needsAttention.forEach(order => {\n        if (!order.is_valid) {\n          console.log(`❌ 無效代碼: \"${order.original_code || order.product_code}\"`);\n        } else if (order.was_corrected) {\n          console.log(\n            `⚠️  已修正: \"${order.original_code}\" → \"${order.product_code}\" (信心度: ${(order.confidence_score! * 100).toFixed(1)}%)`\n          );\n        }\n      });\n    }\n  } catch {\n    exampleLogger.error(_error, 'Batch processing example failed');\n  }\n}\n\n/**\n * 相似度匹配示例\n */\nexport async function similarityMatchingExample(): Promise<void> {\n  try {\n    exampleLogger.info('Starting similarity matching example');\n\n    // 測試各種類型的錯誤和相似代碼\n    const testCodes = [\n      'ABC124', // 與 ABC123 相似 (最後一位不同)\n      'ABC12', // 缺少字符\n      'ABCD123', // 多餘字符\n      'XYZ788', // 與 XYZ789 相似\n      'abc123', // 大小寫問題\n      'A BC123', // 包含空格\n      'ABC-123', // 包含特殊字符\n    ];\n\n    for (const testCode of testCodes) {\n      console.log(`\\n測試代碼: \"${testCode}\"`);\n\n      // 直接查找相似代碼\n      const similarCodes = ProductCodeValidator.findSimilarCodes(testCode);\n\n      if (similarCodes.length > 0) {\n        console.log('找到相似代碼:');\n        similarCodes.forEach((code, index) => {\n          const similarity = ProductCodeValidator.calculateSimilarity(testCode, code.code);\n          console.log(\n            `  ${index + 1}. ${code.code} - ${code.description} (相似度: ${(similarity * 100).toFixed(1)}%)`\n          );\n        });\n      } else {\n        console.log('未找到相似代碼');\n      }\n\n      // 使用驗證器自動修正\n      const _result = await ProductCodeValidator.validateAndEnrichCodes([testCode]);\n      const validated = result.enrichedOrders[0];\n\n      console.log('自動驗證結果:', {\n        是否有效: validated.is_valid ? '是' : '否',\n        是否修正: validated.was_corrected ? '是' : '否',\n        最終代碼: validated.product_code,\n        描述: validated.product_desc });\n    }\n  } catch {\n    exampleLogger.error(_error, 'Similarity matching example failed');\n  }\n}\n\n/**\n * 性能監控示例\n */\nexport async function performanceMonitoringExample(): Promise<void> {\n  try {\n    exampleLogger.info('Starting performance monitoring example');\n\n    // 測試不同大小的批次\n    const batchSizes = [1, 10, 25, 50, 100];\n\n    for (const _size of batchSizes) {\n      const testCodes = Array(_size)\n        .fill(0)\n        .map((_, i) => `TEST${i.toString().padStart(3, '0')}`);\n\n      const _startTime = Date.now();\n      const _result = await ProductCodeValidator.validateAndEnrichCodes(testCodes);\n      const processingTime = Date.now() - startTime;\n\n      console.log(`批次大小 ${ _size }:`, {\n        處理時間: `${processingTime}ms`,\n        平均每個: `${(processingTime / _size).toFixed(2)}ms`,\n        有效率: `${((_result.summary.valid / result.summary.total) * 100).toFixed(1)}%` });\n    }\n\n    // 測試快取性能\n    console.log('\\n快取性能測試:');\n    const cacheTestCodes = ['ABC123', 'XYZ789', 'DEF456'];\n\n    // 第一次調用 (冷快取)\n    const coldStart = Date.now();\n    await ProductCodeValidator.validateAndEnrichCodes(cacheTestCodes);\n    const coldTime = Date.now() - coldStart;\n\n    // 第二次調用 (熱快取)\n    const warmStart = Date.now();\n    await ProductCodeValidator.validateAndEnrichCodes(cacheTestCodes);\n    const warmTime = Date.now() - warmStart;\n\n    console.log(`冷快取: ${coldTime}ms`);\n    console.log(`熱快取: ${warmTime}ms`);\n    console.log(`性能提升: ${(((coldTime - warmTime) / coldTime) * 100).toFixed(1)}%`);\n\n    // 顯示快取統計\n    const cacheStats = ProductCodeValidator.getCacheStats();\n    console.log('\\n快取統計:', {\n      快取大小: cacheStats.cacheSize,\n      最大快取: cacheStats.maxCacheSize,\n      產品總數: cacheStats.totalProductCodes,\n      最後更新: new Date(cacheStats.lastRefresh).toLocaleString('zh-TW') });\n  } catch {\n    exampleLogger.error(_error, 'Performance monitoring example failed');\n  }\n}\n\n/**\n * 錯誤處理示例\n */\nexport async function errorHandlingExample(): Promise<void> {\n  try {\n    exampleLogger.info('Starting error handling example');\n\n    // 測試各種錯誤情況\n    const errorTests = [\n      {\n        _name: '空陣列',\n        test: () => ProductCodeValidator.validateAndEnrichCodes([]) },\n      {\n        _name: '超大批次',\n        test: () => ProductCodeValidator.validateAndEnrichCodes(Array(101).fill('ABC123')) },\n      {\n        _name: '無效輸入類型',\n        test: () => ProductCodeValidator.validateAndEnrichCodes(null as any), // eslint-disable-line @typescript-eslint/no-explicit-any -- Testing invalid input types intentionally\n      },\n    ];\n\n    for (const errorTest of errorTests) {\n      console.log(`\\n測試: ${errorTest.name}`);\n      try {\n        const _result = await errorTest.test();\n        console.log('意外成功:', result.summary);\n      } catch (error) {\n        console.log('預期錯誤:', error instanceof Error ? error.message : '未知錯誤');\n      }\n    }\n\n    // 測試降級策略（需要模擬數據庫故障）\n    console.log('\\n測試系統健康檢查:');\n    const health = await ProductCodeValidator.healthCheck();\n    console.log('系統狀態:', health.status);\n    console.log('詳細信息:', health.details);\n  } catch {\n    exampleLogger.error(_error, 'Error handling example failed');\n  }\n}\n\n/**\n * 實際應用場景示例：訂單處理\n */\nexport async function orderProcessingScenarioExample(): Promise<void> {\n  try {\n    exampleLogger.info('Starting order processing scenario example');\n\n    // 模擬訂單數據\n    interface OrderItem {\n      id: string;\n      productCode: string;\n      quantity: number;\n      unitPrice: number;\n    }\n\n    const orderItems: OrderItem[] = [\n      { id: '001', productCode: 'ABC123', quantity: 10, unitPrice: 25.5 },\n      { id: '002', productCode: 'xyz789', quantity: 5, unitPrice: 15.75 },\n      { id: '003', productCode: 'INVALID001', quantity: 2, unitPrice: 30.0 },\n      { id: '004', productCode: 'abc124', quantity: 8, unitPrice: 22.25 },\n      { id: '005', productCode: '', quantity: 1, unitPrice: 10.0 },\n    ];\n\n    console.log('處理訂單項目...');\n\n    // 提取產品代碼進行驗證\n    const productCodes = orderItems.map(item => item.productCode);\n    const validationResult = await ProductCodeValidator.validateAndEnrichCodes(productCodes);\n\n    // 合併驗證結果到訂單項目\n    interface EnrichedOrderItem extends OrderItem {\n      validatedProductCode: string;\n      productDescription: string;\n      isValid: boolean;\n      wasCorrected: boolean;\n      confidenceScore?: number;\n      totalValue: number;\n    }\n\n    const enrichedItems: EnrichedOrderItem[] = orderItems.map((item, index) => {\n      const validation = validationResult.enrichedOrders[index];\n      return {\n        ...item,\n        validatedProductCode: validation.product_code,\n        productDescription: validation.product_desc,\n        isValid: validation.is_valid,\n        wasCorrected: validation.was_corrected,\n        confidenceScore: validation.confidence_score,\n        totalValue: item.quantity * item.unitPrice };\n    });\n\n    // 分析處理結果\n    const validItems = enrichedItems.filter(item => item.isValid);\n    const correctedItems = enrichedItems.filter(item => item.wasCorrected);\n    const invalidItems = enrichedItems.filter(item => !item.isValid);\n\n    console.log('\\n訂單處理結果:');\n    console.log(`總項目: ${enrichedItems.length}`);\n    console.log(`有效項目: ${validItems.length}`);\n    console.log(`修正項目: ${correctedItems.length}`);\n    console.log(`無效項目: ${invalidItems.length}`);\n\n    if (correctedItems.length > 0) {\n      console.log('\\n已修正的項目:');\n      correctedItems.forEach(item => {\n        console.log(\n          `- 項目 ${item.id}: \"${item.productCode}\" → \"${item.validatedProductCode}\" (信心度: ${(item.confidenceScore! * 100).toFixed(1)}%)`\n        );\n      });\n    }\n\n    if (invalidItems.length > 0) {\n      console.log('\\n需要人工處理的無效項目:');\n      invalidItems.forEach(item => {\n        console.log(\n          `- 項目 ${item.id}: \"${item.productCode}\" - 總值: $${item.totalValue.toFixed(2)}`\n        );\n      });\n    }\n\n    // 計算訂單統計\n    const totalOrderValue = enrichedItems.reduce((sum, item) => sum + item.totalValue, 0);\n    const validOrderValue = validItems.reduce((sum, item) => sum + item.totalValue, 0);\n    const problemOrderValue = totalOrderValue - validOrderValue;\n\n    console.log('\\n訂單價值分析:');\n    console.log(`總訂單值: $${totalOrderValue.toFixed(2)}`);\n    console.log(\n      `有效項目值: $${validOrderValue.toFixed(2)} (${((validOrderValue / totalOrderValue) * 100).toFixed(1)}%)`\n    );\n    console.log(\n      `問題項目值: $${problemOrderValue.toFixed(2)} (${((problemOrderValue / totalOrderValue) * 100).toFixed(1)}%)`\n    );\n  } catch {\n    exampleLogger.error(_error, 'Order processing scenario example failed');\n  }\n}\n\n/**\n * 執行所有示例\n */\nexport async function runAllExamples(): Promise<void> {\n  console.log('='.repeat(80));\n  console.log('ProductCodeValidator 使用示例');\n  console.log('='.repeat(80));\n\n  const examples = [\n    { _name: '基本使用', fn: basicUsageExample },\n    { _name: '批量處理', fn: batchProcessingExample },\n    { _name: '相似度匹配', fn: similarityMatchingExample },\n    { _name: '性能監控', fn: performanceMonitoringExample },\n    { _name: '錯誤處理', fn: errorHandlingExample },\n    { _name: '訂單處理場景', fn: orderProcessingScenarioExample },\n  ];\n\n  for (const example of examples) {\n    console.log(`\\n${'='.repeat(40)}`);\n    console.log(`執行示例: ${example.name}`);\n    console.log('='.repeat(40));\n\n    try {\n      await example.fn();\n      console.log(`✅ ${example.name} 示例執行完成`);\n    } catch {\n      console.error(`❌ ${example.name} 示例執行失敗:`, _error);\n    }\n  }\n\n  console.log('\\n' + '='.repeat(80));\n  console.log('所有示例執行完成');\n  console.log('='.repeat(80));\n}\n\n// 如果直接執行此檔案\nif (require.main === module) {\n  runAllExamples().catch(console._error);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/chun/Documents/PennineWMS/online-stock-control-system/lib/exportReport.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
        "line": 14,
        "column": 1,
        "endLine": 14,
        "endColumn": 62,
        "severity": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { saveAs } from 'file-saver';\nimport { format as formatDateFns } from 'date-fns'; // 重新命名以避免與可能的內部 format 衝突\nimport { toast } from 'sonner';\n// import { DatabaseRecord } from '@/types/database/tables'; // Unused\nimport {\n  AcoProductData,\n  GrnReportPageData,\n  TransactionReportData } from '../app/actions/DownloadCentre-Actions';\n\n// 最大處理的產品代碼數量 (對應 A-D, E-H, I-L, M-P 四個區塊)\nconst MAX_PRODUCT_BLOCKS = 4;\n\n// Helper function to convert column letter to number (A=1, B=2, ...)\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction columnLetterToNumber(letter: string): number {\n  let column = 0;\n  const length = letter.length;\n  for (let i = 0; i < length; i++) {\n    column += (letter.charCodeAt(i) - 64) * Math.pow(26, length - i - 1);\n  }\n  return column;\n}\n\nexport async function exportAcoReport(reportData: AcoProductData[], orderRef: string) {\n  if (!reportData || reportData.length === 0) {\n    alert('No data provided to generate the report.');\n    console.warn('exportAcoReport called with no data.');\n    return;\n  }\n  if (!orderRef) {\n    alert('Order Reference is missing for the report header.');\n    console.warn('exportAcoReport called without orderRef.');\n    return;\n  }\n\n  // Dynamic import ExcelJS\n  const ExcelJS = await import('exceljs');\n  const workbook = new ExcelJS.Workbook();\n  const sheet = workbook.addWorksheet('ACO Report');\n\n  // === PAGE SETUP ===\n  sheet.pageSetup = {\n    margins: {\n      left: 0.2,\n      right: 0.2,\n      top: 0.2,\n      bottom: 0.75,\n      header: 0.3,\n      footer: 0.3 },\n    orientation: 'portrait',\n    paperSize: 9, // A4\n    fitToPage: true,\n    fitToWidth: 1,\n    horizontalCentered: false, // 根據原設定\n    verticalCentered: false, // 根據原設定\n  };\n\n  // === STYLED TITLE ===\n  sheet.mergeCells('E1:L2');\n  sheet.getRow(1).height = 25;\n  sheet.getRow(2).height = 25;\n  sheet.getRow(4).height = 25;\n  sheet.getRow(5).height = 20;\n  const titleCell = sheet.getCell('E1');\n  titleCell.value = 'ACO Record';\n  titleCell.font = { size: 48, bold: true, name: 'Arial', underline: true };\n  titleCell.alignment = { vertical: 'middle', horizontal: 'center' };\n\n  // === Merge A4:P4, A5:D5... === (這些是產品代碼標題行和其下方可能的分隔行)\n  // 這部分可能需要根據實際資料動態調整，或者如果只是固定樣式則保留\n  // 您的描述是產品代碼在 A4, E4, I4, M4\n  // 所以 A4:D4 合併似乎不對，應該是單獨的 A4, E4 等\n  // 這部分先註解，根據數據填充邏輯來處理\n  const mergeGroups = [\n    'A4:D4',\n    'E4:H4',\n    'I4:L4',\n    'M4:P4',\n    'A5:D5',\n    'E5:H5',\n    'I5:L5',\n    'M5:P5',\n    'M1:P1',\n    'M2:P2',\n  ];\n  mergeGroups.forEach(range => {\n    try {\n      sheet.mergeCells(range);\n    } catch (e) {\n      console.warn(`Could not merge cells for range ${range}:`, e);\n      // 如果合併失敗，可以選擇忽略或記錄，以避免整個報表生成失敗\n    }\n  });\n\n  //=== Order Ref. Report Date ===\n  const m1Cell = sheet.getCell('P1');\n  m1Cell.value = `ACO Order Ref. : ${orderRef}`;\n  m1Cell.font = { size: 16, bold: true };\n  m1Cell.alignment = { vertical: 'middle', horizontal: 'center' };\n\n  const m2Cell = sheet.getCell('P2');\n  const today = new Date();\n  // 使用 toLocaleDateString 獲得類似 '23-Jul-2024' 的格式，但月份名稱取決於地區設定\n  // 或者使用 date-fns 進行精確格式化\n  const formattedDate = formatDateFns(today, 'dd-MMM-yyyy').toUpperCase(); // DD-MMM-YYYY, e.g., 23-JUL-2024\n  m2Cell.value = `Print Date : ${formattedDate}`;\n  m2Cell.font = { size: 16, bold: true };\n  m2Cell.alignment = { vertical: 'middle', horizontal: 'center' };\n\n  // === Column Widths ===\n  const colWidthsConfig = [1.75, 15.15, 8.15, 15.75]; // 每個產品區塊內4欄的寬度\n  for (let i = 0; i < MAX_PRODUCT_BLOCKS; i++) {\n    sheet.getColumn(i * 4 + 1).width = colWidthsConfig[0]; // Product Code / Index/Spacer\n    sheet.getColumn(i * 4 + 2).width = colWidthsConfig[1]; // Pallet No.\n    sheet.getColumn(i * 4 + 3).width = colWidthsConfig[2]; // Qty\n    sheet.getColumn(i * 4 + 4).width = colWidthsConfig[3]; // QC Date\n  }\n\n  // === Header Row (Row 6) ===\n  for (let i = 0; i < MAX_PRODUCT_BLOCKS; i++) {\n    const baseCol = i * 4 + 1; // A=1, E=5, I=9, M=13\n\n    // 移除衝突的合併儲存格操作\n    // sheet.mergeCells(6, baseCol + 1, 6, baseCol + 2); // 之前嘗試合併 Pallet No. 的兩欄\n    // sheet.mergeCells(6, baseCol + 1, 6, baseCol + 1); // 之前嘗試合併單個 Pallet No. 儲存格 (多餘)\n\n    // 設定表頭文字\n    // 產品代碼欄的表頭 (可選，如果A6, E6等需要文字)\n    // sheet.getCell(6, baseCol).value = \"Product Code\";\n    // sheet.getCell(6, baseCol).font = { size: 16, bold: true };\n    // sheet.getCell(6, baseCol).alignment = { vertical: 'middle', horizontal: 'center' };\n\n    sheet.getCell(6, baseCol + 1).value = 'Pallet No.'; // B, F, J, N 欄\n    sheet.getCell(6, baseCol + 2).value = 'Qty'; // C, G, K, O 欄\n    sheet.getCell(6, baseCol + 3).value = 'QC Date'; // D, H, L, P 欄\n\n    // 格式化表頭 (Pallet No., Qty, QC Date)\n    for (let j = 1; j < 4; j++) {\n      // j=1 (Pallet No.), j=2 (Qty), j=3 (QC Date)\n      const headerCell = sheet.getCell(6, baseCol + j);\n      headerCell.font = { size: 16 };\n      headerCell.alignment = { vertical: 'middle', horizontal: 'center' };\n    }\n  }\n  // === Apply borders from A4:P40 and data font/alignment ===\n  const maxDataRows = 40;\n  for (let r = 4; r <= maxDataRows; r++) {\n    for (let c = 1; c <= MAX_PRODUCT_BLOCKS * 4; c++) {\n      const cell = sheet.getCell(r, c);\n      cell.border = {\n        top: { style: 'thin' },\n        bottom: { style: 'thin' },\n        left: { style: 'thin' },\n        right: { style: 'thin' } };\n      if (r >= 7) {\n        cell.font = { size: 16 };\n        cell.alignment = { vertical: 'middle' as const, horizontal: 'center' as const };\n      }\n    }\n  }\n\n  // === Fill Data ===\n  reportData.slice(0, MAX_PRODUCT_BLOCKS).forEach((productData, blockIndex) => {\n    const baseCol = blockIndex * 4 + 1;\n    const productCodeCell = sheet.getCell(4, baseCol);\n    productCodeCell.value = productData.product_code;\n    productCodeCell.font = { size: 16, bold: true };\n    productCodeCell.alignment = { vertical: 'middle', horizontal: 'center' };\n\n    // 新增：在第5行添加 required_qty\n    const requiredQtyCell = sheet.getCell(5, baseCol);\n    requiredQtyCell.value =\n      productData.required_qty !== null\n        ? `Required Qty: ${productData.required_qty}`\n        : 'Required Qty: N/A';\n    requiredQtyCell.font = { size: 12, bold: true, color: { argb: 'FF0066CC' } }; // 藍色字體\n    requiredQtyCell.alignment = { vertical: 'middle', horizontal: 'center' };\n\n    productData.pallets.forEach((pallet, palletIndex) => {\n      const currentRow = 7 + palletIndex;\n      if (currentRow > maxDataRows) {\n        console.warn(`Data for product ${productData.product_code} exceeds max display rows.`);\n        return;\n      }\n      sheet.getCell(currentRow, baseCol + 0).value = palletIndex + 1;\n      sheet.getCell(currentRow, baseCol + 0).font = { size: 9 };\n      sheet.getCell(currentRow, baseCol + 1).value = pallet.plt_num;\n      sheet.getCell(currentRow, baseCol + 2).value = pallet.product_qty;\n      sheet.getCell(currentRow, baseCol + 3).value = pallet.generate_time;\n    });\n  });\n\n  // 移除原本的佔位資料填寫邏輯\n  // for (let row = 7; row <= 40; row++) { ... }\n  // 移除原本的 placeholder data re-apply font 邏輯\n  // for (let row = 7; row <= 40; row++) { ... }\n\n  // === Download as Excel ===\n  const buffer = await workbook.xlsx.writeBuffer();\n  const blob = new Blob([buffer], { type: 'application/octet-stream' });\n  saveAs(blob, `ACO_${orderRef}_Report.xlsx`);\n}\n\nexport async function exportGrnReport(data: GrnReportPageData) {\n  if (!data) {\n    toast.error('No data provided for GRN report generation.');\n    console.error('exportGrnReport called without data.');\n    return;\n  }\n\n  // Dynamic import ExcelJS\n  const ExcelJS = await import('exceljs');\n  const workbook = new ExcelJS.Workbook();\n  const sheet = workbook.addWorksheet('GRN Report');\n\n  // Define styles\n  const center = {\n    horizontal: 'center' as const,\n    vertical: 'middle' as const,\n    wrapText: true };\n  const right = { horizontal: 'right' as const, vertical: 'middle' as const };\n  // Strategy 2: DTO/自定義 type interface - 修復 ExcelJS Fill 類型定義\n  const grayFill = {\n    type: 'pattern' as const,\n    pattern: 'solid' as const,\n    fgColor: { argb: 'FFDCDCDC' } };\n  const thinBorder = {\n    top: { style: 'thin' as const },\n    bottom: { style: 'thin' as const },\n    left: { style: 'thin' as const },\n    right: { style: 'thin' as const } };\n  const thickBorder = {\n    top: { style: 'thick' as const },\n    bottom: { style: 'thick' as const },\n    left: { style: 'thick' as const },\n    right: { style: 'thick' as const } };\n\n  // === Row heights\n  const rowHeights: Record<number, number> = {\n    ...Object.fromEntries(Array.from({ length: 7 }, (_, i) => [i + 1, 24])),\n    8: 14.25,\n    9: 29.25,\n    10: 14.25,\n    ...Object.fromEntries(Array.from({ length: 32 }, (_, i) => [11 + i, 24])),\n    43: 15,\n    44: 20.25,\n    45: 20.25,\n    46: 20.25,\n    47: 20.25,\n    48: 39.75 };\n  Object.entries(rowHeights).forEach(([row, height]) => {\n    sheet.getRow(Number(row)).height = height;\n  });\n\n  // === Column widths A to T\n  const colWidths = [\n    5.25,\n    9.75,\n    9.1,\n    7,\n    7,\n    7,\n    7,\n    7, // A-H\n    8,\n    6.15,\n    6.15,\n    8, // I-L\n    5,\n    7,\n    5, // M-O\n    5.5,\n    5.5, // P-Q\n    8.25,\n    9.5,\n    9.5, // R-T\n  ];\n  colWidths.forEach((w, i) => {\n    sheet.getColumn(i + 1).width = w;\n  });\n\n  // === Merge blocks\n  sheet.mergeCells('A44:E44');\n  sheet.getCell('A44').value = 'Action For Material On Hold :';\n  sheet.getCell('A44').font = { size: 14, bold: true, underline: 'double' };\n  sheet.getCell('A44').alignment = center;\n\n  sheet.mergeCells('A45:I48');\n  sheet.getCell('A45').font = { size: 18, bold: true };\n  sheet.getCell('A45').alignment = center;\n\n  for (let i = 2; i <= 6; i++) {\n    sheet.getCell(`C${i}`).value = [\n      'Code : ',\n      'Description : ',\n      'Supplier Name : ',\n      'Our Order No. : ',\n      'Date : ',\n    ][i - 2];\n    sheet.getCell(`C${i}`).alignment = right;\n    sheet.getCell(`C${i}`).font = { size: 14, bold: true };\n    sheet.mergeCells(`D${i}:J${i}`);\n    const cell = sheet.getCell(`D${i}`);\n    cell.border = { bottom: { style: 'thin' as const } };\n    cell.alignment = center;\n    cell.font = { size: i === 3 ? 12 : 14 };\n  }\n\n  for (let i = 4; i <= 6; i++) {\n    sheet.mergeCells(`S${i}:T${i}`);\n    const cell = sheet.getCell(`S${i}`);\n    cell.border = { bottom: { style: 'thin' as const } };\n    cell.alignment = center;\n    cell.font = { size: 16 };\n  }\n  // === Right side labels R1–R6\n  const rightLabels: Record<number, string> = {\n    1: 'G.R.N. Number : ',\n    3: 'Non-Conformance Report Ref No. : ',\n    4: 'Delivery Note No. : ',\n    5: 'Our Order No. : ',\n    6: 'Completed By : ' };\n  for (const [row, value] of Object.entries(rightLabels)) {\n    sheet.getCell(`R${Number(row)}`).value = value;\n    sheet.getCell(`R${Number(row)}`).font = { size: 14, bold: true };\n    sheet.getCell(`R${Number(row)}`).alignment = right;\n  }\n\n  // === Merge + border for S1:T1, S3:T3\n  ['S1:T1', 'S3:T3'].forEach(range => {\n    sheet.mergeCells(range);\n    const cell = sheet.getCell(range.split(':')[0]);\n    cell.border = thickBorder;\n    cell.alignment = center;\n    cell.font = { size: 18, bold: true };\n  });\n  // S2 border (not merged in the provided code, but usually part of a 3-row box)\n  sheet.getCell('S2').border = thickBorder;\n  sheet.getCell('S2').value = 'PASS';\n  sheet.getCell('T2').border = thickBorder;\n  sheet.getCell('T2').value = 'FAIL';\n  sheet.getCell('S2').font = { size: 18, bold: true };\n  sheet.getCell('T2').font = { size: 18, bold: true };\n  sheet.getCell('S2').alignment = center;\n  sheet.getCell('T2').alignment = center;\n\n  // === Footer summary rows N44:T48\n  const footer = [\n    'Total Material Delivered',\n    'Total Material On Hold',\n    'Total Material Accepted',\n    'Total Material To Be Sent Back',\n    'Signed Off All Complete And Booked In',\n  ];\n  footer.forEach((label, i) => {\n    const row = 44 + i;\n    sheet.mergeCells(`L${row}:R${row}`);\n    sheet.mergeCells(`S${row}:T${row}`);\n    const cell = sheet.getCell(`L${row}`);\n    cell.value = label;\n    cell.font = { bold: true };\n    cell.alignment = { horizontal: 'right' as const, vertical: 'middle' as const };\n    for (let c = 14; c <= 20; c++) {\n      sheet.getCell(row, c).border = thickBorder;\n    }\n  });\n\n  // === Merge S11:T42\n  for (let row = 11; row <= 42; row++) {\n    sheet.mergeCells(`S${row}:T${row}`);\n  }\n\n  // === Gray fill\n  const grayCols = [1, 3, 9, 10, 11, 12, 16, 17, 19]; // A, C, I, P, S (column numbers)\n  for (let row = 11; row <= 42; row++) {\n    grayCols.forEach(col => {\n      const cell = sheet.getCell(row, col);\n      cell.fill = grayFill;\n    });\n  }\n\n  // === Borders + Alignment A9:T42 (This might override previous specific borders/alignments)\n  // Consider applying this more selectively or before specific cell styling if overlap is an issue.\n  for (let row = 10; row <= 42; row++) {\n    for (let col = 1; col <= 20; col++) {\n      const cell = sheet.getCell(row, col);\n      // Apply thin border if not already thick (e.g. S1:T3 box)\n      if (!cell.border || JSON.stringify(cell.border) !== JSON.stringify(thickBorder)) {\n        // Check individual border sides if necessary for more complex scenarios\n        let applyThin = true;\n        if (cell.border) {\n          const currentBorder = cell.border as Record<string, Record<string, unknown>>;\n          if (\n            currentBorder.top?.style === 'thick' &&\n            currentBorder.bottom?.style === 'thick' &&\n            currentBorder.left?.style === 'thick' &&\n            currentBorder.right?.style === 'thick'\n          ) {\n            applyThin = false;\n          }\n        }\n        if (applyThin) cell.border = thinBorder;\n      }\n      cell.alignment = center; // This will center align all cells in A9:T42\n      cell.font = { size: 12 }; // This sets font size for all cells in A9:T42\n    }\n  }\n\n  // Pallet sub-labels from previous version (D9:M10 area)\n  // This part was in your previous exportGrnReport but not in the new provided code.\n  // Assuming it's still needed for GRN Report.\n  const arrPalletLabels = [\n    'White Dry',\n    'White Wet',\n    'Chep Dry',\n    'Chep Wet',\n    'Euro Pallet',\n    'Stillage',\n    'Bag',\n    'Tote Bag',\n    'Octobin',\n    'Sunk',\n  ];\n  const arrPalletWeights = [\n    '14kg',\n    '18kg',\n    '26kg',\n    '30kg',\n    '22kg',\n    '50kg',\n    '0kg',\n    '6kg',\n    '14kg',\n    '%',\n  ];\n  for (let i = 0; i < arrPalletLabels.length; i++) {\n    const cellLabel = sheet.getCell(9, 4 + i);\n    cellLabel.value = arrPalletLabels[i];\n    cellLabel.alignment = center; // Ensure these are centered as per A9:T42 rule\n    cellLabel.font = { size: 10 }; // Ensure font size is 12 as per A9:T42 rule\n    cellLabel.border = thinBorder;\n    // Borders should be handled by the A9:T42 loop\n\n    const cellWeight = sheet.getCell(10, 4 + i);\n    cellWeight.value = arrPalletWeights[i];\n    cellWeight.alignment = center;\n    cellWeight.fill = grayFill;\n    cellWeight.font = { size: 10, bold: true, italic: true };\n  }\n\n  // Group Headers for Pallets, Packaging, Water Tests, Trial (D8:Q8)\n  // This also was in the previous GRN report, assuming still needed.\n  const groupHeaders: Record<string, string> = {\n    'D8:H8': 'Pallets',\n    'I8:L8': 'Packaging',\n    'M8:O8': 'Water Tests',\n    'P8:Q8': 'Trial' };\n  Object.entries(groupHeaders).forEach(([range, title]) => {\n    sheet.mergeCells(range);\n    const cell = sheet.getCell(range.split(':')[0]);\n    cell.value = title;\n    cell.font = { bold: true, size: 10 }; // Original font size was 10, bold\n    cell.alignment = center;\n    cell.fill = grayFill;\n    cell.border = thinBorder; // Apply thin border, consistent with A9:T42 loop for row 8 if it were included\n  });\n\n  const group2Headers: Record<string, string> = {\n    'N9:O9': 'per 100g Tested',\n    'P9:Q9': 'Production Trial',\n    'S10:T10': 'Comments' };\n\n  Object.entries(group2Headers).forEach(([range, title]) => {\n    sheet.mergeCells(range);\n    const cell = sheet.getCell(range.split(':')[0]);\n    cell.value = title;\n    cell.font = { size: 10 }; // Original font size was 10, bold\n    cell.alignment = center;\n    cell.border = thinBorder;\n    if (title === 'Comments') {\n      cell.fill = grayFill;\n      cell.font = { bold: true, italic: true };\n    }\n  });\n\n  const group3Headers: Record<string, string> = {\n    N10: 'Pass',\n    O10: 'Fail',\n    P10: 'Pass',\n    Q10: 'Fail',\n    R10: 'On Hold' };\n\n  Object.entries(group3Headers).forEach(([range, title]) => {\n    const cell = sheet.getCell(range.split(':')[0]);\n    cell.value = title;\n    cell.font = { bold: true, size: 10, italic: true }; // Original font size was 10, bold\n    cell.alignment = center;\n    cell.fill = grayFill;\n    cell.border = thinBorder; // Apply thin border, consistent with A9:T42 loop for row 8 if it were included\n  });\n\n  const group4Headers: Record<string, string> = {\n    'A9:A10': 'PLT Ct.',\n    'B9:B10': 'Gross Weight',\n    'C9:C10': 'Net Weight' };\n\n  Object.entries(group4Headers).forEach(([range, title]) => {\n    sheet.mergeCells(range);\n    const cell = sheet.getCell(range.split(':')[0]);\n    cell.value = title;\n    cell.font = { bold: true, size: 11 }; // Original font size was 10, bold\n    cell.alignment = center;\n    cell.border = thinBorder; // Apply thin border, consistent with A9:T42 loop for row 8 if it were included\n  });\n  // === Page setup (applied again, ensure consistency or remove duplication if settings are identical)\n  sheet.pageSetup = {\n    paperSize: 9, // A4\n    fitToPage: true,\n    fitToWidth: 1,\n    fitToHeight: 0, // Allow multiple pages vertically if content exceeds one page\n    orientation: 'portrait',\n    margins: {\n      // Added margins here as they were separate in the provided code\n      left: 0.2,\n      right: 0.2,\n      top: 0.4,\n      bottom: 0.2,\n      header: 0.3,\n      footer: 0.3 } };\n  // sheet.pageMargins was used in new code, but ExcelJS uses pageSetup.margins.\n  // The line below might be redundant if printArea is not strictly needed or handled by fitToPage.\n  // sheet.printArea = 'A1:T49'; // Setting print area\n  // Sheet Font\n  sheet.eachRow(row => {\n    row.eachCell(cell => {\n      const originalFont = cell.font || {};\n      cell.font = {\n        ...originalFont,\n        name: 'Aptos Narrow' };\n    });\n  });\n  // ---- START DATA FILLING ----\n  sheet.getCell('S1').value = data.grn_ref;\n  sheet.getCell('S6').value = data.user_id; // User ID\n  sheet.getCell('D2').value = data.material_code;\n  sheet.getCell('D3').value = data.material_description;\n  sheet.getCell('D4').value = data.supplier_name;\n  sheet.getCell('D6').value = data.report_date; // Already formatted dd-MMM-yyyy\n\n  // --- Data filling section ---\n  let currentRowNum = 11; // Starting row for GRN records\n  console.log('[exportGrnReport] Data received for records (first 5):', data.records.slice(0, 5)); // Log first 5 records\n\n  data.records.forEach((record, index) => {\n    if (currentRowNum > 42) {\n      // Limit to row 42 as per template\n      console.warn(`Data for record ${index} exceeds max display rows.`);\n      return;\n    }\n    const row = sheet.getRow(currentRowNum);\n    row.getCell('A').value = index + 1;\n    row.getCell('B').value = record.gross_weight;\n    row.getCell('C').value = record.net_weight;\n\n    // Columns H-L: Pallet Numbers (P1 to P5) - 這是根據 record.pallet (棧板號) 和 record.package_type 來填寫的\n    const palletCol = getPalletColumn(record.pallet);\n    if (palletCol) {\n      row.getCell(palletCol).value = record.pallet_count;\n    }\n\n    // Columns M-Q: Package Counts (C1 to C5) - 這是根據 record.package_type 和 record.package_count 來填寫的\n    const packageColumn = getPackageColumn(record.package_type);\n    console.log(\n      `[exportGrnReport] Record ${index}, package_type: ${record.package_type}, package_count: ${record.package_count}, mapped packageColumn: ${packageColumn}`\n    );\n    if (packageColumn && record.package_count !== null && record.package_count !== undefined) {\n      row.getCell(packageColumn).value = record.package_count;\n    }\n\n    currentRowNum++;\n  });\n\n  // Totals in A45\n  const totalsText = `Total Gross Weight >> ${data.total_gross_weight}\nTotal NetWeight >> ${data.total_net_weight}\nDifference >> ${data.weight_difference}`;\n  sheet.getCell('A45').value = totalsText;\n  sheet.getCell('A45').alignment = {\n    ...center,\n    horizontal: 'left',\n    vertical: 'top',\n    wrapText: true }; // Align left, top, wrap\n  // Ensure A45 merged area (A45:K48) has appropriate font/styling if needed\n  sheet.getCell('A45').font = { size: 20, bold: false }; // Example: Reset font from previous bold\n\n  // ---- END DATA FILLING ----\n\n  const buffer = await workbook.xlsx.writeBuffer();\n  const blob = new Blob([buffer], {\n    type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n  // Filename format: GRN_Report_{grn_ref}.xlsx\n  saveAs(blob, `GRN_Report_${data.grn_ref}.xlsx`);\n}\n\n// Helper function to determine column for pallet type\nfunction getPalletColumn(palletType: string | null): string | null {\n  if (!palletType) return null;\n  const type = palletType.trim().toLowerCase().replace(/\\s+/g, ''); // Normalize to lowercase and remove spaces\n  switch (type) {\n    case 'whitedry':\n      return 'D';\n    case 'whitewet':\n      return 'E';\n    case 'chepdry':\n      return 'F';\n    case 'chepwet':\n      return 'G';\n    case 'euro':\n      return 'H';\n    // case 'notincludedpallet': return null; // This case can be removed as default handles unmapped types\n    default:\n      // Optionally log unmapped pallet types for debugging\n      console.warn(\n        `[getPalletColumn] Unmapped palletType: '${palletType}' (normalized: '${type}'). No column assigned.`\n      );\n      return null;\n  }\n}\n\n// Helper function to determine which column (I-L) to put the package count based on package type\nfunction getPackageColumn(packageType: string | null): string | null {\n  if (!packageType) return null;\n  const type = packageType.trim().toLowerCase(); // Normalize to lowercase and trim whitespace\n\n  if (type.includes('still')) return 'I'; // Stillage\n  if (type.includes('bag')) return 'J'; // Bag\n  if (type.includes('tote')) return 'K'; // Tote Bag\n  if (type.includes('octo')) return 'L'; // Octobin\n\n  // If no match, log a warning and return null so no count is placed in an incorrect column\n  console.warn(\n    `[getPackageColumn] Unmapped packageType: '${packageType}' (normalized: '${type}'). No column assigned.`\n  );\n  return null;\n}\n\n// Sheet Font\n// ... existing code ...\n\nexport async function exportGrnReportMultiSheet(reportsData: GrnReportPageData[], grnRef: string) {\n  if (!reportsData || reportsData.length === 0) {\n    toast.error('No data provided for GRN report generation.');\n    console.error('exportGrnReportMultiSheet called without data.');\n    return;\n  }\n\n  // Dynamic import ExcelJS\n  const ExcelJS = await import('exceljs');\n  const workbook = new ExcelJS.Workbook();\n\n  // Create a sheet for each material code\n  for (const data of reportsData) {\n    // Use material code as sheet name (Excel limits sheet names to 31 characters)\n    const sheetName =\n      data.material_code.length > 31 ? data.material_code.substring(0, 31) : data.material_code;\n\n    const sheet = workbook.addWorksheet(sheetName);\n\n    // Apply the same formatting as exportGrnReport\n    // Define styles\n    const center = {\n      horizontal: 'center' as const,\n      vertical: 'middle' as const,\n      wrapText: true };\n    const right = { horizontal: 'right' as const, vertical: 'middle' as const };\n    const grayFill = {\n      type: 'pattern' as const,\n      pattern: 'solid' as const,\n      fgColor: { argb: 'FFDCDCDC' } };\n    const thinBorder = {\n      top: { style: 'thin' as const },\n      bottom: { style: 'thin' as const },\n      left: { style: 'thin' as const },\n      right: { style: 'thin' as const } };\n    const thickBorder = {\n      top: { style: 'thick' as const },\n      bottom: { style: 'thick' as const },\n      left: { style: 'thick' as const },\n      right: { style: 'thick' as const } };\n\n    // === Row heights\n    const rowHeights: Record<number, number> = {\n      ...Object.fromEntries(Array.from({ length: 7 }, (_, i) => [i + 1, 24])),\n      8: 14.25,\n      9: 29.25,\n      10: 14.25,\n      ...Object.fromEntries(Array.from({ length: 32 }, (_, i) => [11 + i, 24])),\n      43: 15,\n      44: 20.25,\n      45: 20.25,\n      46: 20.25,\n      47: 20.25,\n      48: 39.75 };\n    Object.entries(rowHeights).forEach(([row, height]) => {\n      sheet.getRow(Number(row)).height = height;\n    });\n\n    // === Column widths A to T\n    const colWidths = [\n      5.25,\n      9.75,\n      9.1,\n      7,\n      7,\n      7,\n      7,\n      7, // A-H\n      8,\n      6.15,\n      6.15,\n      8, // I-L\n      5,\n      7,\n      5, // M-O\n      5.5,\n      5.5, // P-Q\n      8.25,\n      9.5,\n      9.5, // R-T\n    ];\n    colWidths.forEach((w, i) => {\n      sheet.getColumn(i + 1).width = w;\n    });\n\n    // === Merge blocks\n    sheet.mergeCells('A44:E44');\n    sheet.getCell('A44').value = 'Action For Material On Hold :';\n    sheet.getCell('A44').font = { size: 14, bold: true, underline: 'double' };\n    sheet.getCell('A44').alignment = center;\n\n    sheet.mergeCells('A45:I48');\n    sheet.getCell('A45').font = { size: 18, bold: true };\n    sheet.getCell('A45').alignment = center;\n\n    for (let i = 2; i <= 6; i++) {\n      sheet.getCell(`C${i}`).value = [\n        'Code : ',\n        'Description : ',\n        'Supplier Name : ',\n        'Our Order No. : ',\n        'Date : ',\n      ][i - 2];\n      sheet.getCell(`C${i}`).alignment = right;\n      sheet.getCell(`C${i}`).font = { size: 14, bold: true };\n      sheet.mergeCells(`D${i}:J${i}`);\n      const cell = sheet.getCell(`D${i}`);\n      cell.border = { bottom: { style: 'thin' as const } };\n      cell.alignment = center;\n      cell.font = { size: i === 3 ? 12 : 14 };\n    }\n\n    for (let i = 4; i <= 6; i++) {\n      sheet.mergeCells(`S${i}:T${i}`);\n      const cell = sheet.getCell(`S${i}`);\n      cell.border = { bottom: { style: 'thin' as const } };\n      cell.alignment = center;\n      cell.font = { size: 16 };\n    }\n\n    // === Right side labels R1–R6\n    const rightLabels: Record<number, string> = {\n      1: 'G.R.N. Number : ',\n      3: 'Non-Conformance Report Ref No. : ',\n      4: 'Delivery Note No. : ',\n      5: 'Our Order No. : ',\n      6: 'Completed By : ' };\n    for (const [row, value] of Object.entries(rightLabels)) {\n      sheet.getCell(`R${Number(row)}`).value = value;\n      sheet.getCell(`R${Number(row)}`).font = { size: 14, bold: true };\n      sheet.getCell(`R${Number(row)}`).alignment = right;\n    }\n\n    // === Merge + border for S1:T1, S3:T3\n    ['S1:T1', 'S3:T3'].forEach(range => {\n      sheet.mergeCells(range);\n      const cell = sheet.getCell(range.split(':')[0]);\n      cell.border = thickBorder;\n      cell.alignment = center;\n      cell.font = { size: 18, bold: true };\n    });\n\n    // S2 border\n    sheet.getCell('S2').border = thickBorder;\n    sheet.getCell('S2').value = 'PASS';\n    sheet.getCell('T2').border = thickBorder;\n    sheet.getCell('T2').value = 'FAIL';\n    sheet.getCell('S2').font = { size: 18, bold: true };\n    sheet.getCell('T2').font = { size: 18, bold: true };\n    sheet.getCell('S2').alignment = center;\n    sheet.getCell('T2').alignment = center;\n\n    // === Footer summary rows N44:T48\n    const footer = [\n      'Total Material Delivered',\n      'Total Material On Hold',\n      'Total Material Accepted',\n      'Total Material To Be Sent Back',\n      'Signed Off All Complete And Booked In',\n    ];\n    footer.forEach((label, i) => {\n      const row = 44 + i;\n      sheet.mergeCells(`L${row}:R${row}`);\n      sheet.mergeCells(`S${row}:T${row}`);\n      const cell = sheet.getCell(`L${row}`);\n      cell.value = label;\n      cell.font = { bold: true };\n      cell.alignment = { horizontal: 'right' as const, vertical: 'middle' as const };\n      for (let c = 14; c <= 20; c++) {\n        sheet.getCell(row, c).border = thickBorder;\n      }\n    });\n\n    // === Merge S11:T42\n    for (let row = 11; row <= 42; row++) {\n      sheet.mergeCells(`S${row}:T${row}`);\n    }\n\n    // === Gray fill\n    const grayCols = [1, 3, 9, 10, 11, 12, 16, 17, 19]; // A, C, I, P, S (column numbers)\n    for (let row = 11; row <= 42; row++) {\n      grayCols.forEach(col => {\n        const cell = sheet.getCell(row, col);\n        cell.fill = grayFill;\n      });\n    }\n\n    // === Borders + Alignment A9:T42\n    for (let row = 10; row <= 42; row++) {\n      for (let col = 1; col <= 20; col++) {\n        const cell = sheet.getCell(row, col);\n        let applyThin = true;\n        if (cell.border) {\n          const currentBorder = cell.border as Record<string, Record<string, unknown>>;\n          if (\n            currentBorder.top?.style === 'thick' &&\n            currentBorder.bottom?.style === 'thick' &&\n            currentBorder.left?.style === 'thick' &&\n            currentBorder.right?.style === 'thick'\n          ) {\n            applyThin = false;\n          }\n        }\n        if (applyThin) cell.border = thinBorder;\n        cell.alignment = center;\n        cell.font = { size: 12 };\n      }\n    }\n\n    // Pallet sub-labels\n    const arrPalletLabels = [\n      'White Dry',\n      'White Wet',\n      'Chep Dry',\n      'Chep Wet',\n      'Euro Pallet',\n      'Stillage',\n      'Bag',\n      'Tote Bag',\n      'Octobin',\n      'Sunk',\n    ];\n    const arrPalletWeights = [\n      '14kg',\n      '18kg',\n      '26kg',\n      '30kg',\n      '22kg',\n      '50kg',\n      '0kg',\n      '6kg',\n      '14kg',\n      '%',\n    ];\n    for (let i = 0; i < arrPalletLabels.length; i++) {\n      const cellLabel = sheet.getCell(9, 4 + i);\n      cellLabel.value = arrPalletLabels[i];\n      cellLabel.alignment = center;\n      cellLabel.font = { size: 10 };\n      cellLabel.border = thinBorder;\n\n      const cellWeight = sheet.getCell(10, 4 + i);\n      cellWeight.value = arrPalletWeights[i];\n      cellWeight.alignment = center;\n      cellWeight.fill = grayFill;\n      cellWeight.font = { size: 10, bold: true, italic: true };\n    }\n\n    // Group Headers\n    const groupHeaders: Record<string, string> = {\n      'D8:H8': 'Pallets',\n      'I8:L8': 'Packaging',\n      'M8:O8': 'Water Tests',\n      'P8:Q8': 'Trial' };\n    Object.entries(groupHeaders).forEach(([range, title]) => {\n      sheet.mergeCells(range);\n      const cell = sheet.getCell(range.split(':')[0]);\n      cell.value = title;\n      cell.font = { bold: true, size: 10 };\n      cell.alignment = center;\n      cell.fill = grayFill;\n      cell.border = thinBorder;\n    });\n\n    const group2Headers: Record<string, string> = {\n      'N9:O9': 'per 100g Tested',\n      'P9:Q9': 'Production Trial',\n      'S10:T10': 'Comments' };\n    Object.entries(group2Headers).forEach(([range, title]) => {\n      sheet.mergeCells(range);\n      const cell = sheet.getCell(range.split(':')[0]);\n      cell.value = title;\n      cell.font = { size: 10 };\n      cell.alignment = center;\n      cell.border = thinBorder;\n      if (title === 'Comments') {\n        cell.fill = grayFill;\n        cell.font = { bold: true, italic: true };\n      }\n    });\n\n    const group3Headers: Record<string, string> = {\n      N10: 'Pass',\n      O10: 'Fail',\n      P10: 'Pass',\n      Q10: 'Fail',\n      R10: 'On Hold' };\n    Object.entries(group3Headers).forEach(([range, title]) => {\n      const cell = sheet.getCell(range.split(':')[0]);\n      cell.value = title;\n      cell.font = { bold: true, size: 10, italic: true };\n      cell.alignment = center;\n      cell.fill = grayFill;\n      cell.border = thinBorder;\n    });\n\n    const group4Headers: Record<string, string> = {\n      'A9:A10': 'PLT Ct.',\n      'B9:B10': 'Gross Weight',\n      'C9:C10': 'Net Weight' };\n    Object.entries(group4Headers).forEach(([range, title]) => {\n      sheet.mergeCells(range);\n      const cell = sheet.getCell(range.split(':')[0]);\n      cell.value = title;\n      cell.font = { bold: true, size: 11 };\n      cell.alignment = center;\n      cell.border = thinBorder;\n    });\n\n    // === Page setup\n    sheet.pageSetup = {\n      paperSize: 9, // A4\n      fitToPage: true,\n      fitToWidth: 1,\n      fitToHeight: 0,\n      orientation: 'portrait',\n      margins: {\n        left: 0.2,\n        right: 0.2,\n        top: 0.4,\n        bottom: 0.2,\n        header: 0.3,\n        footer: 0.3 } };\n\n    // Sheet Font\n    sheet.eachRow(row => {\n      row.eachCell(cell => {\n        const originalFont = cell.font || {};\n        cell.font = {\n          ...originalFont,\n          name: 'Aptos Narrow' };\n      });\n    });\n\n    // ---- DATA FILLING ----\n    sheet.getCell('S1').value = data.grn_ref;\n    sheet.getCell('S6').value = data.user_id;\n    sheet.getCell('D2').value = data.material_code;\n    sheet.getCell('D3').value = data.material_description;\n    sheet.getCell('D4').value = data.supplier_name;\n    sheet.getCell('D6').value = data.report_date;\n\n    // Data filling section\n    let currentRowNum = 11;\n    data.records.forEach((record, index) => {\n      if (currentRowNum > 42) {\n        console.warn(`Data for record ${index} exceeds max display rows.`);\n        return;\n      }\n      const row = sheet.getRow(currentRowNum);\n      row.getCell('A').value = index + 1;\n      row.getCell('B').value = record.gross_weight;\n      row.getCell('C').value = record.net_weight;\n\n      // Pallet columns\n      const palletCol = getPalletColumn(record.pallet);\n      if (palletCol) {\n        row.getCell(palletCol).value = record.pallet_count;\n      }\n\n      // Package columns\n      const packageColumn = getPackageColumn(record.package_type);\n      if (packageColumn && record.package_count !== null && record.package_count !== undefined) {\n        row.getCell(packageColumn).value = record.package_count;\n      }\n\n      currentRowNum++;\n    });\n\n    // Totals in A45\n    const totalsText = `Total Gross Weight >> ${data.total_gross_weight}\nTotal NetWeight >> ${data.total_net_weight}\nDifference >> ${data.weight_difference}`;\n    sheet.getCell('A45').value = totalsText;\n    sheet.getCell('A45').alignment = {\n      ...center,\n      horizontal: 'left',\n      vertical: 'top',\n      wrapText: true };\n    sheet.getCell('A45').font = { size: 20, bold: false };\n  }\n\n  // Download the workbook\n  const buffer = await workbook.xlsx.writeBuffer();\n  const blob = new Blob([buffer], {\n    type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n  saveAs(blob, `GRN_Report_${grnRef}.xlsx`);\n}\n\nexport async function buildTransactionReport(reportData?: TransactionReportData): Promise<Buffer> {\n  // Dynamic import ExcelJS\n  const ExcelJS = await import('exceljs');\n  const workbook = new ExcelJS.Workbook();\n  const worksheet = workbook.addWorksheet('Transaction Report');\n\n  // A1:AH27 base format\n  for (let row = 1; row <= 27; row++) {\n    const excelRow = worksheet.getRow(row);\n    excelRow.height = row <= 4 ? [14.25, 45, 26.25, 145][row - 1] : 30;\n\n    for (let col = 1; col <= 34; col++) {\n      const cell = excelRow.getCell(col);\n      cell.font = { name: 'Arial', size: 16 };\n      cell.alignment = { vertical: 'middle' as const, horizontal: 'center' as const };\n    }\n  }\n\n  const colWidths = [\n    3.4, 3.15, 0.6, 3.15, 0.6, 3.15, 0.6, 3.15, 0.6, 3.15, 0.6, 3.15, 0.6, 3.15, 0.6, 3.15, 0.6,\n    3.15, 0.6, 3.15, 0.6, 3.15, 0.6, 3.15, 2.6, 33.15, 0.6, 6, 0.6, 6, 0.6, 17.15, 0.6, 17.15,\n  ];\n  worksheet.columns = colWidths.map(w => ({ width: w }));\n\n  // Title\n  worksheet.mergeCells('B2:AH2');\n  worksheet.getCell('B2').value = 'Product Movement Sheet';\n  worksheet.getCell('B2').font = { size: 36, bold: true };\n\n  // 移除頂部 Report Period 資訊\n\n  worksheet.mergeCells('B3:L3');\n  worksheet.getCell('B3').value = 'From';\n  worksheet.mergeCells('N3:X3');\n  worksheet.getCell('N3').value = 'To';\n  ['B3', 'N3'].forEach(addr => {\n    const cell = worksheet.getCell(addr);\n    cell.font = { size: 20, bold: true };\n    cell.border = {\n      top: { style: 'thin' as const },\n      left: { style: 'thin' as const },\n      right: { style: 'thin' as const },\n      bottom: { style: 'thin' as const } };\n  });\n\n  // 🆕 修改為顯示 Report Period\n  if (\n    reportData &&\n    reportData.date_range &&\n    reportData.date_range.start_date &&\n    reportData.date_range.end_date\n  ) {\n    worksheet.getCell('AF3').value =\n      `Report Period: ${reportData.date_range.start_date} to ${reportData.date_range.end_date}`;\n  } else {\n    worksheet.getCell('AF3').value = 'Report Period: ';\n  }\n  worksheet.getCell('AF3').alignment = { horizontal: 'right' };\n\n  // Label row\n  ['B4:L4', 'N4:X4'].forEach(range => {\n    const startCellAddress = range.split(':')[0];\n    const start = worksheet.getCell(startCellAddress);\n    if (start && typeof start.col === 'number') {\n      start.font = { size: 11 };\n      for (let col = start.col; col <= start.col + 10; col++) {\n        const cell = worksheet.getRow(4).getCell(col);\n        cell.alignment = { textRotation: 90, vertical: 'bottom' };\n        cell.border = {\n          top: { style: 'thin' as const },\n          left: { style: 'thin' as const },\n          right: { style: 'thin' as const },\n          bottom: { style: 'thin' as const } };\n      }\n    } else {\n      console.warn(`Could not find starting cell or its column for range: ${range}`);\n    }\n  });\n\n  const locations = [\n    'Fold Mill',\n    'Extrusion Room',\n    'Pipe Extrusion',\n    'Production',\n    'Back Car Park',\n    'Bulk Room',\n  ];\n  locations.forEach((loc, i) => {\n    worksheet.getRow(4).getCell(2 + i * 2).value = loc;\n    worksheet.getRow(4).getCell(2 + i * 2).font = { size: 11 };\n    worksheet.getRow(4).getCell(14 + i * 2).value = loc;\n    worksheet.getRow(4).getCell(14 + i * 2).font = { size: 11 };\n  });\n\n  worksheet.getCell('Z4').value = 'Product Code';\n  worksheet.getCell('AB4').value = 'TTL\\nQty';\n  worksheet.getCell('AD4').value = 'TTL\\nPLT';\n  worksheet.getCell('AF4').value = 'Pallet Ref. No\\nGoods In No';\n  worksheet.getCell('AH4').value = 'Clock Card No';\n  worksheet.getCell('AF4').font = { size: 11 };\n  worksheet.getCell('AH4').font = { size: 11 };\n  worksheet.getCell('AF4').alignment = { wrapText: true };\n  worksheet.getCell('AH4').alignment = { wrapText: true };\n  ['Z4', 'AB4', 'AD4', 'AF4', 'AH4'].forEach(addr => {\n    const cell = worksheet.getCell(addr);\n    cell.font = { size: 11 };\n    cell.alignment = { vertical: 'bottom' };\n  });\n\n  worksheet.getCell('Z4').alignment = { horizontal: 'center', vertical: 'bottom' };\n  worksheet.getCell('AD4').alignment = { textRotation: 90, vertical: 'bottom' };\n  worksheet.getCell('AF4').alignment = { wrapText: true, vertical: 'bottom' };\n\n  // 🆕 數據填充邏輯\n  if (reportData && reportData.transfers && reportData.transfers.length > 0) {\n    let currentRow = 5;\n    const maxRows = 27;\n\n    // 🆕 計算相同條件的總板數和總數量\n    const groupedTransfers = new Map<string, number>();\n    const groupedQuantitiesByEmployee = new Map<string, number>(); // 🆕 按員工+產品代碼分組\n\n    reportData.transfers.forEach(transfer => {\n      // 🆕 處理 f_loc 為 \"Await\" 或 \"await_grn\" 的特殊條件\n      let actualFromLocation = transfer.from_location;\n      if (transfer.from_location.toLowerCase() === 'await') {\n        actualFromLocation = 'Production';\n      } else if (transfer.from_location.toLowerCase() === 'await_grn') {\n        actualFromLocation = 'Fold Mill';\n      } else if (transfer.from_location.toLowerCase() === 'pipeline') {\n        actualFromLocation = 'Pipe Extrusion';\n      }\n\n      const transferKey = `${transfer.product_code}|${transfer.operator_name}|${actualFromLocation}|${transfer.to_location}`;\n      const employeeProductKey = `${transfer.operator_name}|${transfer.product_code}`; // 🆕 員工+產品代碼組合\n\n      // 計算板數（按轉移路線分組）\n      groupedTransfers.set(transferKey, (groupedTransfers.get(transferKey) || 0) + 1);\n\n      // 🆕 計算總數量（按員工+產品代碼分組）- 這才是 TTL Qty 應該顯示的數值\n      groupedQuantitiesByEmployee.set(\n        employeeProductKey,\n        (groupedQuantitiesByEmployee.get(employeeProductKey) || 0) + Number(transfer.quantity)\n      );\n    });\n\n    // 🆕 去重並填充數據\n    const uniqueTransfers = new Map<string, Record<string, unknown>>();\n\n    reportData.transfers.forEach(transfer => {\n      // 🆕 處理 f_loc 為 \"Await\" 或 \"await_grn\" 的特殊條件\n      let actualFromLocation = transfer.from_location;\n      if (transfer.from_location.toLowerCase() === 'await') {\n        actualFromLocation = 'Production';\n      } else if (transfer.from_location.toLowerCase() === 'await_grn') {\n        actualFromLocation = 'Fold Mill';\n      } else if (transfer.from_location.toLowerCase() === 'pipeline') {\n        actualFromLocation = 'Pipe Extrusion';\n      }\n\n      const transferKey = `${transfer.product_code}|${transfer.operator_name}|${actualFromLocation}|${transfer.to_location}`;\n      const employeeProductKey = `${transfer.operator_name}|${transfer.product_code}`;\n\n      if (!uniqueTransfers.has(transferKey)) {\n        uniqueTransfers.set(transferKey, {\n          ...transfer,\n          actualFromLocation, // 🆕 保存處理後的位置\n          totalPallets: groupedTransfers.get(transferKey) || 1,\n          totalQuantity:\n            groupedQuantitiesByEmployee.get(employeeProductKey) || Number(transfer.quantity), // 🆕 該員工該產品代碼的總數量\n        });\n      }\n    });\n\n    Array.from(uniqueTransfers.values()).forEach((transfer, _index) => {\n      if (currentRow > maxRows) return; // 防止超出表格範圍\n\n      const row = worksheet.getRow(currentRow);\n\n      // 根據處理後的 from_location 在 B-L 欄位標記（藍色 ✓）\n      const fromIndex = locations.indexOf(transfer.actualFromLocation as string);\n      if (fromIndex >= 0) {\n        const fromCol = 2 + fromIndex * 2; // B, D, F, H, J, L\n        row.getCell(fromCol).value = '✓';\n        row.getCell(fromCol).font = { size: 14, bold: true, color: { argb: 'FF0066CC' } };\n      }\n\n      // 根據 to_location 在 N-X 欄位標記（綠色 ✓）\n      // 處理 PipeLine -> Pipe Extrusion 的映射\n      let actualToLocation = transfer.to_location;\n      if ((transfer.to_location as string).toLowerCase() === 'pipeline') {\n        actualToLocation = 'Pipe Extrusion';\n      }\n\n      const toIndex = locations.indexOf(actualToLocation as string);\n      if (toIndex >= 0) {\n        const toCol = 14 + toIndex * 2; // N, P, R, T, V, X\n        row.getCell(toCol).value = '✓';\n        row.getCell(toCol).font = { size: 14, bold: true, color: { argb: 'FF009900' } };\n      }\n\n      // 填充產品資訊\n      row.getCell('Z').value = String(transfer.product_code); // Product Code\n\n      // TTL Qty - 顯示該員工該產品代碼的 Transfer 總數量\n      row.getCell('AB').value = Number(transfer.totalQuantity); // 🆕 該員工該產品代碼的總數量\n      row.getCell('AB').font = { size: 14 };\n\n      row.getCell('AD').value = Number(transfer.totalPallets); // 🆕 相同條件的總板數\n      row.getCell('AD').font = { size: 14 };\n      // AF 欄位留空（Pallet Reference No）\n\n      // 🆕 修改 AH 欄：顯示操作員姓名和 clock number，格式為 \"Alex[換行]（5997）\"\n      const operatorDisplayText = `${transfer.operator_name}\\n（${transfer.operator_id}）`;\n      row.getCell('AH').value = operatorDisplayText; // Operator Name + Clock Number\n      row.getCell('AH').font = { size: 12 };\n      row.getCell('AH').alignment = {\n        vertical: 'middle',\n        horizontal: 'center',\n        wrapText: true, // 啟用文字換行\n      };\n\n      currentRow++;\n    });\n  }\n\n  // 添加邊框到數據區域\n  for (let i = 5; i <= 27; i++) {\n    const cols = [\n      'B',\n      'D',\n      'F',\n      'H',\n      'J',\n      'L',\n      'N',\n      'P',\n      'R',\n      'T',\n      'V',\n      'X',\n      'Z',\n      'AB',\n      'AD',\n      'AF',\n      'AH',\n    ];\n    cols.forEach(letter => {\n      const cell = worksheet.getCell(`${letter}${i}`);\n      cell.border = {\n        top: { style: 'thin' as const },\n        left: { style: 'thin' as const },\n        right: { style: 'thin' as const },\n        bottom: { style: 'thin' as const } };\n    });\n  }\n\n  worksheet.pageSetup = {\n    margins: {\n      left: 0.2,\n      right: 0.2,\n      top: 0.2,\n      bottom: 0.75,\n      header: 0.3,\n      footer: 0.3 },\n    orientation: 'portrait',\n    paperSize: 9,\n    fitToPage: true,\n    fitToWidth: 1,\n    fitToHeight: 0,\n    horizontalCentered: false,\n    verticalCentered: false,\n    blackAndWhite: false,\n    printArea: 'A1:AH27' };\n\n  const buffer = await workbook.xlsx.writeBuffer();\n  return Buffer.from(buffer);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/chun/Documents/PennineWMS/online-stock-control-system/lib/printing/hooks/usePrinting.ts",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useCallback has an unnecessary dependency: 'error'. Either exclude it or remove the dependency array.",
        "line": 250,
        "column": 5,
        "nodeType": "ArrayExpression",
        "endLine": 250,
        "endColumn": 21,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [onError]",
            "fix": { "range": [7476, 7492], "text": "[onError]" }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useCallback has an unnecessary dependency: 'error'. Either exclude it or remove the dependency array.",
        "line": 334,
        "column": 5,
        "nodeType": "ArrayExpression",
        "endLine": 334,
        "endColumn": 21,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [onError]",
            "fix": { "range": [9862, 9878], "text": "[onError]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * React Hook for Unified Printing Service\n * Updated to work with new unified print service\n */\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { getUnifiedPrintService } from '../unified-print-service';\nimport type { PrintRequest, PrintResult } from '../unified-print-service';\nimport {\n  adaptPrintRequest,\n  isOldPrintRequest,\n  isNewPrintRequest } from '../adapters/print-request-adapter';\nimport type { PrintRequest as OldPrintRequest } from '../types';\n\n// Keep compatibility types\nexport interface PrintJobStatus {\n  jobId: string;\n  status: 'queued' | 'processing' | 'completed' | 'failed' | 'cancelled';\n  message?: string;\n  progress?: number;\n  createdAt?: string;\n  completedAt?: string;\n}\n\nexport interface BatchPrintRequest {\n  requests: (PrintRequest | OldPrintRequest)[];\n  options?: {\n    parallel?: boolean;\n    stopOnError?: boolean;\n    groupByType?: boolean;\n  };\n}\n\nexport interface BatchPrintResult {\n  totalJobs: number;\n  successful: number;\n  failed: number;\n  results: PrintResult[];\n  duration: number;\n}\n\nexport interface UsePrintingOptions {\n  autoInitialize?: boolean;\n  onStatusUpdate?: (status: PrintJobStatus) => void;\n  onError?: (error: Error) => void;\n}\n\nexport interface UsePrintingReturn {\n  // Print operations - accepts both old and new formats\n  print: (request: PrintRequest | OldPrintRequest) => Promise<PrintResult>;\n  batchPrint: (batch: BatchPrintRequest) => Promise<BatchPrintResult>;\n  cancelJob: (jobId: string) => Promise<boolean>;\n\n  // Status\n  printing: boolean;\n  progress: number;\n  status: string;\n  activeJobs: PrintJobStatus[];\n\n  // Queue info\n  queueStatus: {\n    pending: number;\n    processing: number;\n    completed: number;\n    failed: number;\n  } | null;\n\n  // Error\n  error: Error | null;\n}\n\nexport function usePrinting(options: UsePrintingOptions = {}): UsePrintingReturn {\n  const { autoInitialize = true, onStatusUpdate, onError } = options;\n\n  const [printing, setPrinting] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [status, setStatus] = useState('');\n  const [activeJobs, setActiveJobs] = useState<PrintJobStatus[]>([]);\n  const [queueStatus, setQueueStatus] = useState<UsePrintingReturn['queueStatus']>(null);\n  const [error, setError] = useState<Error | null>(null);\n\n  const serviceRef = useRef<ReturnType<typeof getUnifiedPrintService> | null>(null);\n  const initRef = useRef(false);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Lazy initialization for service\n  const getService = () => {\n    if (!serviceRef.current && typeof window !== 'undefined') {\n      serviceRef.current = getUnifiedPrintService();\n    }\n    return serviceRef.current;\n  };\n\n  // Initialize service\n  useEffect(() => {\n    if (!autoInitialize || initRef.current) return;\n\n    const initialize = async () => {\n      try {\n        const service = getService();\n        if (!service) return;\n        await service.initialize();\n        initRef.current = true;\n      } catch (error) {\n        const _error = err instanceof Error ? err : new Error(String(err));\n        setError(error);\n        onError?.(error);\n      }\n    };\n\n    initialize();\n  }, [autoInitialize, onError, error]);\n\n  // Subscribe to status updates from service\n  useEffect(() => {\n    const service = getService();\n    if (!service) return;\n\n    const handleJobQueued = ({ jobId, request }: { jobId: string; request?: unknown }) => {\n      const job: PrintJobStatus = {\n        jobId,\n        status: 'queued',\n        createdAt: new Date().toISOString() };\n      setActiveJobs(prev => [...prev, job]);\n      onStatusUpdate?.(job);\n    };\n\n    const handleJobProcessing = ({ jobId }: { jobId: string }) => {\n      setActiveJobs(prev =>\n        prev.map(job => (job.jobId === jobId ? { ...job, status: 'processing' as const } : job))\n      );\n    };\n\n    const handleJobCompleted = ({ jobId }: { jobId: string }) => {\n      setActiveJobs(prev =>\n        prev.map(job =>\n          job.jobId === jobId\n            ? { ...job, status: 'completed' as const, completedAt: new Date().toISOString() }\n            : job\n        )\n      );\n      // Remove completed job after 5 seconds\n      setTimeout(() => {\n        setActiveJobs(prev => prev.filter(job => job.jobId !== jobId));\n      }, 5000);\n    };\n\n    const handleJobFailed = ({ jobId, error }: { jobId: string; error?: Error }) => {\n      setActiveJobs(prev =>\n        prev.map(job =>\n          job.jobId === jobId ? { ...job, status: 'failed' as const, message: error?.message } : job\n        )\n      );\n    };\n\n    service.on('job.queued', handleJobQueued);\n    service.on('job.processing', handleJobProcessing);\n    service.on('job.completed', handleJobCompleted);\n    service.on('job.failed', handleJobFailed);\n\n    return () => {\n      service.off('job.queued', handleJobQueued);\n      service.off('job.processing', handleJobProcessing);\n      service.off('job.completed', handleJobCompleted);\n      service.off('job.failed', handleJobFailed);\n    };\n  }, [onStatusUpdate]);\n\n  // Update queue status periodically\n  useEffect(() => {\n    // Wait for initialization before starting queue status updates\n    if (!initRef.current && autoInitialize) return;\n\n    const updateQueueStatus = async () => {\n      try {\n        const service = getService();\n        if (!service) return;\n\n        // Check if service is initialized\n        if (!service.isInitialized()) {\n          console.log('[usePrinting] Service not initialized yet, skipping queue status update');\n          return;\n        }\n\n        const status = await service.getQueueStatus();\n        setQueueStatus(status);\n      } catch (error) {\n        console.warn('[usePrinting] Failed to get queue status:', err);\n      }\n    };\n\n    // Delay initial update to allow initialization\n    const startTimeout = setTimeout(() => {\n      updateQueueStatus();\n\n      // 🛑 完全禁用自動更新：按用戶要求，不使用任何定時器\n      // const interval = setInterval(updateQueueStatus, 2000); // 完全禁用\n      // 只在初始載入時檢查一次，不再定時更新\n\n      // 無需存儲 interval，因為已完全禁用定時器\n      intervalRef.current = null;\n    }, 1000);\n\n    return () => {\n      clearTimeout(startTimeout);\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [autoInitialize]);\n\n  // Print function - handles both old and new formats\n  const print = useCallback(\n    async (request: PrintRequest | OldPrintRequest): Promise<PrintResult> => {\n      try {\n        setPrinting(true);\n        setProgress(0);\n        setStatus('Preparing print job...');\n        setError(null);\n\n        // Convert old format to new format if needed\n        let printRequest: PrintRequest;\n        if (isOldPrintRequest(_request)) {\n          printRequest = adaptPrintRequest(_request);\n        } else if (isNewPrintRequest(_request)) {\n          printRequest = request;\n        } else {\n          throw new Error('Invalid print request format');\n        }\n\n        const service = getService();\n        if (!service) throw new Error('Printing service not available');\n        const _result = await service.print(printRequest);\n\n        if (!result.success) {\n          throw new Error(result.error || 'Print failed');\n        }\n\n        return result;\n      } catch (error) {\n        const _error = err instanceof Error ? err : new Error(String(err));\n        setError(error);\n        onError?.(error);\n        throw error;\n      } finally {\n        setPrinting(false);\n        setProgress(100);\n      }\n    },\n    [onError, error]\n  );\n\n  // Batch print function - simulate for compatibility\n  const batchPrint = useCallback(\n    async (batch: BatchPrintRequest): Promise<BatchPrintResult> => {\n      const startTime = Date.now();\n      const results: PrintResult[] = [];\n      let successful = 0;\n      let failed = 0;\n\n      try {\n        setPrinting(true);\n        setProgress(0);\n        setStatus(`Preparing ${batch.requests.length} print jobs...`);\n        setError(null);\n\n        // Process each request\n        for (let i = 0; i < batch.requests.length; i++) {\n          const request = batch.requests[i];\n\n          try {\n            const _result = await print(_request);\n            results.push(result);\n            if (result.success) successful++;\n            else failed++;\n\n            setProgress(((i + 1) / batch.requests.length) * 100);\n\n            if (!result.success && batch.options?.stopOnError) {\n              break;\n            }\n          } catch (error) {\n            failed++;\n            results.push({\n              success: false,\n              jobId: `batch-${Date.now()}-${i}`,\n              error: error instanceof Error ? error.message : 'Unknown error' });\n\n            if (batch.options?.stopOnError) break;\n          }\n        }\n\n        const batchResult: BatchPrintResult = {\n          totalJobs: batch.requests.length,\n          successful,\n          failed,\n          results,\n          duration: Date.now() - startTime };\n\n        if (failed > 0) {\n          setStatus(`Completed with ${failed} failures`);\n        } else {\n          setStatus('All jobs completed successfully');\n        }\n\n        return batchResult;\n      } catch (err) {\n        const printError = err instanceof Error ? err : new Error(String(err));\n        setError(printError);\n        onError?.(printError);\n        throw printError;\n      } finally {\n        setPrinting(false);\n        setProgress(100);\n      }\n    },\n    [print, onError]\n  );\n\n  // Cancel job function\n  const cancelJob = useCallback(\n    async (jobId: string): Promise<boolean> => {\n      try {\n        const service = getService();\n        if (!service) return false;\n        return await service.cancelJob(jobId);\n      } catch (error) {\n        const _error = err instanceof Error ? err : new Error(String(err));\n        setError(error);\n        onError?.(error);\n        return false;\n      }\n    },\n    [onError, error]\n  );\n\n  return {\n    print,\n    batchPrint,\n    cancelJob,\n    printing,\n    progress,\n    status,\n    activeJobs,\n    queueStatus,\n    error };\n}\n",
    "usedDeprecatedRules": []
  }
]
