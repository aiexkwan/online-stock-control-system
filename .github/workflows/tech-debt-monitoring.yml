name: Tech Debt Monitoring

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # 每日凌晨 2:00 運行定時檢查
    - cron: '0 2 * * *'
  workflow_dispatch:
    # 允許手動觸發

env:
  NODE_VERSION: '20.x'

jobs:
  tech-debt-analysis:
    name: Technical Debt Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 獲取完整歷史，用於趨勢分析

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Collect TypeScript errors
      id: typescript
      run: |
        echo "Running TypeScript analysis..."
        npx tsc --noEmit --pretty false > typescript-errors.txt 2>&1 || true
        ERROR_COUNT=$(grep -c "error TS" typescript-errors.txt || echo "0")
        echo "typescript_errors=$ERROR_COUNT" >> $GITHUB_OUTPUT
        echo "Found $ERROR_COUNT TypeScript errors"

    - name: Run ESLint analysis
      id: eslint
      run: |
        echo "Running ESLint analysis..."
        npx eslint . --format json --ext .ts,.tsx,.js,.jsx > eslint-results.json 2>/dev/null || echo "[]" > eslint-results.json
        ERROR_COUNT=$(jq '[.[] | .messages[] | select(.severity == 2)] | length' eslint-results.json)
        WARNING_COUNT=$(jq '[.[] | .messages[] | select(.severity == 1)] | length' eslint-results.json)
        FIXABLE_COUNT=$(jq '[.[] | .messages[] | select(.fix != null)] | length' eslint-results.json)
        echo "eslint_errors=$ERROR_COUNT" >> $GITHUB_OUTPUT
        echo "eslint_warnings=$WARNING_COUNT" >> $GITHUB_OUTPUT
        echo "eslint_fixable=$FIXABLE_COUNT" >> $GITHUB_OUTPUT
        echo "Found $ERROR_COUNT ESLint errors, $WARNING_COUNT warnings ($FIXABLE_COUNT fixable)"

    - name: Run test analysis
      id: tests
      run: |
        echo "Running test analysis..."
        npm run test:ci > test-results.txt 2>&1 || true
        if grep -q "Tests:" test-results.txt; then
          TOTAL_TESTS=$(grep "Tests:" test-results.txt | grep -o '[0-9]\+ total' | grep -o '[0-9]\+' || echo "0")
          PASSED_TESTS=$(grep "Tests:" test-results.txt | grep -o '[0-9]\+ passed' | grep -o '[0-9]\+' || echo "0")
          FAILED_TESTS=$(grep "Tests:" test-results.txt | grep -o '[0-9]\+ failed' | grep -o '[0-9]\+' || echo "0")
        else
          TOTAL_TESTS="0"
          PASSED_TESTS="0"
          FAILED_TESTS="0"
        fi
        echo "total_tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
        echo "passed_tests=$PASSED_TESTS" >> $GITHUB_OUTPUT
        echo "failed_tests=$FAILED_TESTS" >> $GITHUB_OUTPUT
        echo "Found $PASSED_TESTS/$TOTAL_TESTS tests passing"

    - name: Collect comprehensive tech debt metrics
      run: |
        echo "Collecting comprehensive tech debt metrics..."
        npm run tech-debt:collect:fast

    - name: Upload tech debt report
      uses: actions/upload-artifact@v4
      with:
        name: tech-debt-report-${{ github.sha }}
        path: tech-debt-report.json
        retention-days: 30

    - name: Analyze tech debt trends
      if: github.event_name == 'push'
      run: |
        echo "Analyzing tech debt trends..."
        CURRENT_TS_ERRORS="${{ steps.typescript.outputs.typescript_errors }}"
        CURRENT_ESLINT_ERRORS="${{ steps.eslint.outputs.eslint_errors }}"

        # 儲存當前指標到文件（用於趨勢分析）
        mkdir -p .tech-debt-history
        echo "{
          \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
          \"commit\": \"${{ github.sha }}\",
          \"branch\": \"${{ github.ref_name }}\",
          \"typescript_errors\": $CURRENT_TS_ERRORS,
          \"eslint_errors\": $CURRENT_ESLINT_ERRORS,
          \"eslint_warnings\": ${{ steps.eslint.outputs.eslint_warnings }},
          \"total_tests\": ${{ steps.tests.outputs.total_tests }},
          \"passed_tests\": ${{ steps.tests.outputs.passed_tests }}
        }" > .tech-debt-history/$(date +%Y-%m-%d)-${{ github.sha }}.json

    - name: Tech debt quality gate
      run: |
        echo "Checking tech debt quality gates..."

        TS_ERRORS="${{ steps.typescript.outputs.typescript_errors }}"
        ESLINT_ERRORS="${{ steps.eslint.outputs.eslint_errors }}"
        FAILED_TESTS="${{ steps.tests.outputs.failed_tests }}"

        # 設定閾值
        MAX_TS_ERRORS=500
        MAX_ESLINT_ERRORS=100
        MAX_FAILED_TESTS=0

        GATE_PASSED=true

        if [ "$TS_ERRORS" -gt "$MAX_TS_ERRORS" ]; then
          echo "❌ TypeScript errors ($TS_ERRORS) exceed threshold ($MAX_TS_ERRORS)"
          GATE_PASSED=false
        else
          echo "✅ TypeScript errors ($TS_ERRORS) within threshold ($MAX_TS_ERRORS)"
        fi

        if [ "$ESLINT_ERRORS" -gt "$MAX_ESLINT_ERRORS" ]; then
          echo "❌ ESLint errors ($ESLINT_ERRORS) exceed threshold ($MAX_ESLINT_ERRORS)"
          GATE_PASSED=false
        else
          echo "✅ ESLint errors ($ESLINT_ERRORS) within threshold ($MAX_ESLINT_ERRORS)"
        fi

        if [ "$FAILED_TESTS" -gt "$MAX_FAILED_TESTS" ]; then
          echo "❌ Failed tests ($FAILED_TESTS) exceed threshold ($MAX_FAILED_TESTS)"
          GATE_PASSED=false
        else
          echo "✅ Test failures ($FAILED_TESTS) within threshold ($MAX_FAILED_TESTS)"
        fi

        if [ "$GATE_PASSED" = "false" ]; then
          echo "🚨 Tech debt quality gate FAILED"
          exit 1
        else
          echo "🎉 Tech debt quality gate PASSED"
        fi

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const tsErrors = ${{ steps.typescript.outputs.typescript_errors }};
          const eslintErrors = ${{ steps.eslint.outputs.eslint_errors }};
          const eslintWarnings = ${{ steps.eslint.outputs.eslint_warnings }};
          const eslintFixable = ${{ steps.eslint.outputs.eslint_fixable }};
          const totalTests = ${{ steps.tests.outputs.total_tests }};
          const passedTests = ${{ steps.tests.outputs.passed_tests }};
          const failedTests = ${{ steps.tests.outputs.failed_tests }};

          const healthScore = Math.max(0, 100 - (tsErrors * 0.3) - (eslintErrors * 0.2) - (eslintWarnings * 0.1) - (failedTests * 5));

          const comment = `## 🔍 Technical Debt Analysis

          ### 📊 Code Quality Metrics
          - **TypeScript Errors**: ${tsErrors}
          - **ESLint Errors**: ${eslintErrors}
          - **ESLint Warnings**: ${eslintWarnings} (${eslintFixable} fixable)
          - **Test Results**: ${passedTests}/${totalTests} passing (${failedTests} failed)
          - **Health Score**: ${healthScore.toFixed(1)}/100

          ### 🎯 Recommendations
          ${tsErrors > 0 ? `- 🔴 Fix ${tsErrors} TypeScript errors` : '- ✅ No TypeScript errors'}
          ${eslintErrors > 0 ? `- 🟡 Fix ${eslintErrors} ESLint errors` : '- ✅ No ESLint errors'}
          ${eslintFixable > 0 ? `- 🔧 Run \`npm run lint --fix\` to auto-fix ${eslintFixable} issues` : ''}
          ${failedTests > 0 ? `- ❌ Fix ${failedTests} failing tests` : '- ✅ All tests passing'}

          ### 📈 Quality Gates
          ${tsErrors <= 500 ? '✅' : '❌'} TypeScript errors (≤500)
          ${eslintErrors <= 100 ? '✅' : '❌'} ESLint errors (≤100)
          ${failedTests === 0 ? '✅' : '❌'} Test failures (=0)

          ---
          *This analysis was generated automatically by the Tech Debt Monitoring workflow.*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  scheduled-monitoring:
    name: Scheduled Tech Debt Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Collect comprehensive metrics
      run: |
        echo "Running scheduled tech debt collection..."
        npm run tech-debt:collect:verbose

    - name: Push metrics to monitoring system
      run: |
        echo "Pushing metrics to monitoring system..."
        # 這裡可以添加推送到外部監控系統的邏輯
        # npm run tech-debt:push

    - name: Archive metrics
      uses: actions/upload-artifact@v4
      with:
        name: scheduled-tech-debt-report-${{ github.run_number }}
        path: tech-debt-report.json
        retention-days: 90

    - name: Generate trend report
      run: |
        echo "Generating tech debt trend report..."
        # 這裡可以添加趨勢分析邏輯
        echo "Scheduled monitoring completed at $(date)"
