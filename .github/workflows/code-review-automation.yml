name: Automated Code Review

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '20.x'

jobs:
  code-review:
    name: Automated Code Review
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v44
      with:
        files: |
          **/*.ts
          **/*.tsx
          **/*.js
          **/*.jsx
          **/*.json
          **/*.md

    - name: Run TypeScript analysis on changed files
      if: steps.changed-files.outputs.any_changed == 'true'
      id: typescript-analysis
      run: |
        echo "Analyzing TypeScript files..."
        npx tsc --noEmit --pretty false > typescript-results.txt 2>&1 || true

        # Count errors in changed files only
        CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"
        TS_ERRORS=0

        for file in $CHANGED_FILES; do
          if [[ "$file" =~ \.(ts|tsx)$ ]]; then
            ERROR_COUNT=$(grep -c "$file.*error TS" typescript-results.txt || echo "0")
            TS_ERRORS=$((TS_ERRORS + ERROR_COUNT))
          fi
        done

        echo "typescript_errors_in_pr=$TS_ERRORS" >> $GITHUB_OUTPUT
        echo "Found $TS_ERRORS TypeScript errors in changed files"

    - name: Run ESLint analysis on changed files
      if: steps.changed-files.outputs.any_changed == 'true'
      id: eslint-analysis
      run: |
        echo "Analyzing ESLint issues..."
        CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"
        ESLINT_ERRORS=0
        ESLINT_WARNINGS=0
        FIXABLE_ISSUES=0

        # Create temp file for ESLint results
        echo "[]" > eslint-results.json

        # Run ESLint on changed files only
        for file in $CHANGED_FILES; do
          if [[ "$file" =~ \.(ts|tsx|js|jsx)$ ]] && [[ -f "$file" ]]; then
            npx eslint "$file" --format json >> temp-eslint.json 2>/dev/null || true
          fi
        done

        # Process ESLint results if file exists
        if [[ -f temp-eslint.json ]]; then
          # Combine all results into valid JSON array
          echo "[" > eslint-results.json
          cat temp-eslint.json | grep -v "^$" | sed '$ ! s/$/,/' >> eslint-results.json
          echo "]" >> eslint-results.json

          # Count errors and warnings
          ESLINT_ERRORS=$(jq '[.[] | .messages[]? | select(.severity == 2)] | length' eslint-results.json 2>/dev/null || echo "0")
          ESLINT_WARNINGS=$(jq '[.[] | .messages[]? | select(.severity == 1)] | length' eslint-results.json 2>/dev/null || echo "0")
          FIXABLE_ISSUES=$(jq '[.[] | .messages[]? | select(.fix != null)] | length' eslint-results.json 2>/dev/null || echo "0")
        fi

        echo "eslint_errors_in_pr=$ESLINT_ERRORS" >> $GITHUB_OUTPUT
        echo "eslint_warnings_in_pr=$ESLINT_WARNINGS" >> $GITHUB_OUTPUT
        echo "eslint_fixable_in_pr=$FIXABLE_ISSUES" >> $GITHUB_OUTPUT
        echo "Found $ESLINT_ERRORS errors, $ESLINT_WARNINGS warnings ($FIXABLE_ISSUES fixable) in changed files"

    - name: Check code complexity
      if: steps.changed-files.outputs.any_changed == 'true'
      id: complexity-check
      run: |
        echo "Checking code complexity..."
        CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"
        LARGE_FILES=0
        COMPLEX_FILES=""

        for file in $CHANGED_FILES; do
          if [[ "$file" =~ \.(ts|tsx|js|jsx)$ ]] && [[ -f "$file" ]]; then
            LINES=$(wc -l < "$file" 2>/dev/null || echo "0")
            if [[ $LINES -gt 300 ]]; then
              LARGE_FILES=$((LARGE_FILES + 1))
              COMPLEX_FILES="$COMPLEX_FILES\n- $file ($LINES lines)"
            fi
          fi
        done

        echo "large_files_in_pr=$LARGE_FILES" >> $GITHUB_OUTPUT
        echo "complex_files_list<<EOF" >> $GITHUB_OUTPUT
        echo -e "$COMPLEX_FILES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "Found $LARGE_FILES large files (>300 lines)"

    - name: Security scan on changed files
      if: steps.changed-files.outputs.any_changed == 'true'
      id: security-scan
      run: |
        echo "Running security scan on changed files..."
        CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"
        SECURITY_ISSUES=0
        SECURITY_DETAILS=""

        # Check for potential security issues
        for file in $CHANGED_FILES; do
          if [[ -f "$file" ]]; then
            # Check for hardcoded secrets patterns
            if grep -q -E "(password|secret|key|token)\s*=\s*['\"][^'\"]*['\"]" "$file" 2>/dev/null; then
              SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
              SECURITY_DETAILS="$SECURITY_DETAILS\n- $file: Potential hardcoded credentials"
            fi

            # Check for SQL injection patterns
            if grep -q -E "\\\$.*SELECT|query.*\\\$" "$file" 2>/dev/null; then
              SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
              SECURITY_DETAILS="$SECURITY_DETAILS\n- $file: Potential SQL injection risk"
            fi
          fi
        done

        echo "security_issues_in_pr=$SECURITY_ISSUES" >> $GITHUB_OUTPUT
        echo "security_details<<EOF" >> $GITHUB_OUTPUT
        echo -e "$SECURITY_DETAILS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "Found $SECURITY_ISSUES potential security issues"

    - name: Generate code review summary
      if: steps.changed-files.outputs.any_changed == 'true'
      id: review-summary
      run: |
        TS_ERRORS="${{ steps.typescript-analysis.outputs.typescript_errors_in_pr }}"
        ESLINT_ERRORS="${{ steps.eslint-analysis.outputs.eslint_errors_in_pr }}"
        ESLINT_WARNINGS="${{ steps.eslint-analysis.outputs.eslint_warnings_in_pr }}"
        ESLINT_FIXABLE="${{ steps.eslint-analysis.outputs.eslint_fixable_in_pr }}"
        LARGE_FILES="${{ steps.complexity-check.outputs.large_files_in_pr }}"
        SECURITY_ISSUES="${{ steps.security-scan.outputs.security_issues_in_pr }}"

        # Calculate review score (0-100)
        SCORE=100
        SCORE=$((SCORE - TS_ERRORS * 2))
        SCORE=$((SCORE - ESLINT_ERRORS * 1))
        SCORE=$((SCORE - ESLINT_WARNINGS / 2))
        SCORE=$((SCORE - LARGE_FILES * 5))
        SCORE=$((SCORE - SECURITY_ISSUES * 10))
        SCORE=$(( SCORE < 0 ? 0 : SCORE ))

        echo "review_score=$SCORE" >> $GITHUB_OUTPUT

        # Determine review status
        if [[ $SECURITY_ISSUES -gt 0 ]]; then
          echo "review_status=CHANGES_REQUESTED" >> $GITHUB_OUTPUT
          echo "review_decision=Security issues found - changes required"
        elif [[ $TS_ERRORS -gt 10 ]] || [[ $ESLINT_ERRORS -gt 20 ]]; then
          echo "review_status=CHANGES_REQUESTED" >> $GITHUB_OUTPUT
          echo "review_decision=Too many errors - please fix before merge"
        elif [[ $SCORE -lt 70 ]]; then
          echo "review_status=COMMENT" >> $GITHUB_OUTPUT
          echo "review_decision=Code quality could be improved"
        else
          echo "review_status=APPROVE" >> $GITHUB_OUTPUT
          echo "review_decision=Code looks good!"
        fi

    - name: Post automated review comment
      if: steps.changed-files.outputs.any_changed == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const tsErrors = ${{ steps.typescript-analysis.outputs.typescript_errors_in_pr || 0 }};
          const eslintErrors = ${{ steps.eslint-analysis.outputs.eslint_errors_in_pr || 0 }};
          const eslintWarnings = ${{ steps.eslint-analysis.outputs.eslint_warnings_in_pr || 0 }};
          const eslintFixable = ${{ steps.eslint-analysis.outputs.eslint_fixable_in_pr || 0 }};
          const largeFiles = ${{ steps.complexity-check.outputs.large_files_in_pr || 0 }};
          const securityIssues = ${{ steps.security-scan.outputs.security_issues_in_pr || 0 }};
          const reviewScore = ${{ steps.review-summary.outputs.review_score || 0 }};
          const reviewStatus = "${{ steps.review-summary.outputs.review_status }}";

          const complexFiles = `${{ steps.complexity-check.outputs.complex_files_list }}`;
          const securityDetails = `${{ steps.security-scan.outputs.security_details }}`;

          let scoreIcon = "🟢";
          if (reviewScore < 70) scoreIcon = "🟡";
          if (reviewScore < 50) scoreIcon = "🔴";

          let statusIcon = "✅";
          if (reviewStatus === "COMMENT") statusIcon = "💬";
          if (reviewStatus === "CHANGES_REQUESTED") statusIcon = "❌";

          const comment = `## 🤖 Automated Code Review

          ### ${statusIcon} Review Status: ${reviewStatus}
          **Score: ${scoreIcon} ${reviewScore}/100**

          ### 📊 Analysis Results

          | Metric | Count | Status |
          |--------|-------|--------|
          | TypeScript Errors | ${tsErrors} | ${tsErrors === 0 ? '✅' : '❌'} |
          | ESLint Errors | ${eslintErrors} | ${eslintErrors === 0 ? '✅' : '❌'} |
          | ESLint Warnings | ${eslintWarnings} | ${eslintWarnings < 5 ? '✅' : '⚠️'} |
          | Large Files (>300 lines) | ${largeFiles} | ${largeFiles === 0 ? '✅' : '⚠️'} |
          | Security Issues | ${securityIssues} | ${securityIssues === 0 ? '✅' : '🔴'} |

          ### 🔧 Recommendations

          ${tsErrors > 0 ? `- 🔴 **Fix ${tsErrors} TypeScript errors** before merging` : ''}
          ${eslintErrors > 0 ? `- 🟡 **Fix ${eslintErrors} ESLint errors**` : ''}
          ${eslintFixable > 0 ? `- 🔧 **Run \`npm run lint --fix\`** to auto-fix ${eslintFixable} issues` : ''}
          ${largeFiles > 0 ? `- ⚠️ **Consider refactoring large files:**\n${complexFiles}` : ''}
          ${securityIssues > 0 ? `- 🔴 **Security concerns found:**\n${securityDetails}` : ''}

          ### 📚 Code Quality Guidelines

          - Keep files under 300 lines when possible
          - Fix TypeScript errors before merging
          - Address ESLint errors and warnings
          - Never commit secrets or credentials
          - Use meaningful variable and function names

          ---
          *This review was generated automatically by the Tech Debt Monitoring system.*
          *Manual review may still be required for complex changes.*`;

          // Find existing bot comment
          const comments = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });

          const botComment = comments.data.find(comment =>
            comment.user.type === 'Bot' &&
            comment.body.includes('🤖 Automated Code Review')
          );

          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              comment_id: botComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

    - name: Set PR status check
      if: steps.changed-files.outputs.any_changed == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const reviewStatus = "${{ steps.review-summary.outputs.review_status }}";
          const reviewScore = ${{ steps.review-summary.outputs.review_score || 0 }};

          let state = "success";
          let description = `Code review passed (${reviewScore}/100)`;

          if (reviewStatus === "CHANGES_REQUESTED") {
            state = "failure";
            description = `Code review failed (${reviewScore}/100) - changes required`;
          } else if (reviewStatus === "COMMENT") {
            state = "success";
            description = `Code review passed with suggestions (${reviewScore}/100)`;
          }

          await github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.payload.pull_request.head.sha,
            state: state,
            target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
            description: description,
            context: 'automated-code-review'
          });
