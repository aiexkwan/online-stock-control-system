name: Cards Migration CI/CD

on:
  push:
    branches: [main, develop, feature/cards-migration]
    paths:
      - 'app/**/cards/**'
      - 'app/**/widgets/**'
      - 'lib/graphql/**'
      - 'lib/api/**'
      - 'lib/feature-flags/configs/cards-migration.ts'
  pull_request:
    branches: [main, develop]
    paths:
      - 'app/**/cards/**'
      - 'app/**/widgets/**'
      - 'lib/graphql/**'
      - 'lib/api/**'
  schedule:
    # 每日運行一次，追蹤遷移進度
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      deployment_percentage:
        description: 'Feature flag rollout percentage'
        required: false
        default: '30'
        type: string

jobs:
  migration-status:
    name: Check Migration Status
    runs-on: ubuntu-latest
    outputs:
      cards_progress: ${{ steps.check.outputs.cards_progress }}
      widgets_remaining: ${{ steps.check.outputs.widgets_remaining }}
      api_progress: ${{ steps.check.outputs.api_progress }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Check Migration Progress
        id: check
        run: |
          # 統計 Cards 完成度
          CARDS_COUNT=$(find app -name "*.tsx" -path "*/cards/*" -not -path "*/node_modules/*" | wc -l)
          echo "cards_progress=${CARDS_COUNT}" >> $GITHUB_OUTPUT
          
          # 統計剩餘 Widgets
          WIDGETS_COUNT=$(find app -name "*.tsx" -path "*/widgets/*" -not -path "*/node_modules/*" | wc -l)
          echo "widgets_remaining=${WIDGETS_COUNT}" >> $GITHUB_OUTPUT
          
          # 統計 GraphQL resolvers
          RESOLVERS_COUNT=$(find lib/graphql/resolvers -name "*.ts" -not -name "*.test.ts" | wc -l)
          echo "api_progress=${RESOLVERS_COUNT}" >> $GITHUB_OUTPUT
          
          echo "### 🚀 Migration Status" >> $GITHUB_STEP_SUMMARY
          echo "- Cards Completed: ${CARDS_COUNT}/17" >> $GITHUB_STEP_SUMMARY
          echo "- Widgets Remaining: ${WIDGETS_COUNT}" >> $GITHUB_STEP_SUMMARY
          echo "- GraphQL Resolvers: ${RESOLVERS_COUNT}" >> $GITHUB_STEP_SUMMARY

  test-cards:
    name: Test Card Components
    runs-on: ubuntu-latest
    needs: migration-status
    strategy:
      matrix:
        card: [stats, chart, table, form, list, analysis, upload, config, search, alert, navigation, notification, report, departmentSelector, historyTree]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Test ${{ matrix.card }} Card
        run: |
          # 運行特定 Card 的測試
          npm test -- --testPathPattern="cards.*${{ matrix.card }}" --coverage
      
      - name: Upload Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.card }}
          path: coverage/

  test-graphql:
    name: Test GraphQL Schema & Resolvers
    runs-on: ubuntu-latest
    needs: migration-status
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Validate GraphQL Schema
        run: npm run validate-schema
      
      - name: Test GraphQL Resolvers
        run: npm test -- --testPathPattern="graphql.*resolver" --coverage
      
      - name: Check for Breaking Changes
        run: |
          # 下載上一個版本的 schema
          if [ -f "lib/graphql/schema.graphql" ]; then
            npx graphql-inspector diff \
              lib/graphql/schema.graphql \
              lib/graphql/schema.graphql \
              --rule suppressRemovalOfDeprecatedField
          fi

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [test-cards, test-graphql]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build
        run: npm run build
        env:
          SKIP_BUILD_PRODUCT_REDIRECTS: 1
      
      - name: Run Performance Tests
        run: |
          # 測試 Cards vs Widgets 性能
          npm run test:perf -- --testNamePattern="Card.*performance"
      
      - name: Bundle Size Analysis
        run: |
          npm run analyze -- --json > bundle-stats.json
          
          # 檢查 bundle size
          node -e "
          const stats = require('./bundle-stats.json');
          const cardsBundleSize = Object.entries(stats.assets)
            .filter(([name]) => name.includes('cards'))
            .reduce((sum, [, asset]) => sum + asset.size, 0);
          
          console.log('Cards Bundle Size:', (cardsBundleSize / 1024).toFixed(2), 'KB');
          
          if (cardsBundleSize > 500 * 1024) {
            console.error('❌ Cards bundle size exceeds 500KB limit!');
            process.exit(1);
          }
          "

  e2e-test:
    name: E2E Testing with Feature Flags
    runs-on: ubuntu-latest
    needs: [test-cards, test-graphql]
    strategy:
      matrix:
        flag_percentage: [0, 30, 50, 100]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright
        run: npx playwright install --with-deps
      
      - name: Run E2E Tests (Feature Flag: ${{ matrix.flag_percentage }}%)
        env:
          FEATURE_FLAG_CARDS_ROLLOUT: ${{ matrix.flag_percentage }}
        run: |
          npm run test:e2e -- --grep "cards|widgets" --reporter=html
      
      - name: Upload E2E Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-report-${{ matrix.flag_percentage }}
          path: playwright-report/

  widget-cleanup-check:
    name: Widget Cleanup Progress
    runs-on: ubuntu-latest
    needs: migration-status
    if: needs.migration-status.outputs.widgets_remaining > 0
    steps:
      - uses: actions/checkout@v4
      
      - name: Analyze Widget Dependencies
        run: |
          echo "### 📊 Widget Usage Analysis" >> $GITHUB_STEP_SUMMARY
          
          # 找出仍在使用的 Widgets
          echo "#### Active Widget Imports:" >> $GITHUB_STEP_SUMMARY
          grep -r "from.*widgets" app --include="*.tsx" --include="*.ts" \
            --exclude-dir=node_modules --exclude-dir=.next | \
            cut -d: -f1 | sort | uniq -c | \
            head -20 >> $GITHUB_STEP_SUMMARY || true
          
          # 列出需要遷移的 Widgets
          echo "#### Widgets to Migrate:" >> $GITHUB_STEP_SUMMARY
          find app -name "*.tsx" -path "*/widgets/*" -not -path "*/node_modules/*" | \
            xargs -I {} basename {} .tsx | \
            sort | uniq >> $GITHUB_STEP_SUMMARY

  progressive-deployment:
    name: Progressive Deployment
    runs-on: ubuntu-latest
    needs: [e2e-test, performance-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      
      - name: Update Feature Flag Rollout
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        run: |
          ROLLOUT_PERCENTAGE=${{ github.event.inputs.deployment_percentage || '30' }}
          
          echo "📈 Updating Cards rollout to ${ROLLOUT_PERCENTAGE}%"
          
          # 更新 feature flag 配置
          # 這裡應該調用 Supabase API 或其他配置管理系統
          
      - name: Notify Deployment Status
        uses: actions/github-script@v7
        with:
          script: |
            const rollout = '${{ github.event.inputs.deployment_percentage || '30' }}';
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `### 🚀 Cards Migration Deployment Update\n\n` +
                    `Feature flag rollout updated to **${rollout}%**\n\n` +
                    `- Cards Progress: ${{ needs.migration-status.outputs.cards_progress }}/17\n` +
                    `- Widgets Remaining: ${{ needs.migration-status.outputs.widgets_remaining }}\n` +
                    `- API Progress: ${{ needs.migration-status.outputs.api_progress }}/77`
            });

  migration-report:
    name: Generate Migration Report
    runs-on: ubuntu-latest
    needs: [migration-status, test-cards, test-graphql, performance-test]
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate Report
        run: |
          cat > migration-report.md << EOF
          # Cards Migration Report - $(date +%Y-%m-%d)
          
          ## 📊 Overall Progress
          
          | Component | Status | Progress |
          |-----------|--------|----------|
          | Cards Development | 🟢 Active | ${{ needs.migration-status.outputs.cards_progress }}/17 |
          | Widget Cleanup | 🔴 Pending | ${{ needs.migration-status.outputs.widgets_remaining }} remaining |
          | GraphQL Migration | 🟡 In Progress | ${{ needs.migration-status.outputs.api_progress }}/77 |
          
          ## ✅ Completed This Run
          
          - Cards tested: ${{ join(needs.test-cards.result.*, ', ') }}
          - GraphQL schema validated
          - Performance benchmarks passed
          
          ## 📋 Next Steps
          
          1. Complete remaining 2 Cards (UploadCard TODO)
          2. Start Widget cleanup process
          3. Accelerate GraphQL resolver implementation
          4. Increase feature flag rollout percentage
          
          ## 🔗 Resources
          
          - [Migration Plan](/docs/planning/系統架構全面遷移計劃.md)
          - [Card Architecture](/docs/integration/card-component-architecture.md)
          - [GraphQL Schema](/docs/integration/graphql-schema-design.md)
          EOF
      
      - name: Upload Report
        uses: actions/upload-artifact@v4
        with:
          name: migration-report
          path: migration-report.md
      
      - name: Update PR Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('migration-report.md', 'utf8');
            
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Cards Migration Report')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: report
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: report
              });
            }