name: Lighthouse CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  lighthouse:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Start application server
        run: |
          npm run start &
          sleep 10
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Run Lighthouse CI
        run: npm run lighthouse
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: |
            lighthouse-ci-reports/
            .lighthouseci/

      - name: Comment PR with results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');

            // Read the Lighthouse results
            const reportDir = './lighthouse-ci-reports';
            const files = fs.readdirSync(reportDir);
            const jsonFiles = files.filter(f => f.endsWith('.json'));

            let comment = '## 🚨 Lighthouse Performance Report\n\n';

            for (const file of jsonFiles) {
              const data = JSON.parse(fs.readFileSync(path.join(reportDir, file), 'utf-8'));
              
              if (data.categories) {
                const url = data.finalUrl || data.requestedUrl || 'Unknown URL';
                const scores = data.categories;
                
                comment += `### ${url}\n\n`;
                comment += '| Category | Score |\n';
                comment += '|----------|-------|\n';
                comment += `| Performance | ${Math.round(scores.performance.score * 100)}% |\n`;
                comment += `| Accessibility | ${Math.round(scores.accessibility.score * 100)}% |\n`;
                comment += `| Best Practices | ${Math.round(scores['best-practices'].score * 100)}% |\n`;
                comment += `| SEO | ${Math.round(scores.seo.score * 100)}% |\n\n`;
                
                // Core Web Vitals
                const audits = data.audits;
                comment += '**Core Web Vitals:**\n';
                comment += `- FCP: ${Math.round(audits['first-contentful-paint'].numericValue)}ms\n`;
                comment += `- LCP: ${Math.round(audits['largest-contentful-paint'].numericValue)}ms\n`;
                comment += `- TBT: ${Math.round(audits['total-blocking-time'].numericValue)}ms\n`;
                comment += `- CLS: ${audits['cumulative-layout-shift'].numericValue.toFixed(3)}\n`;
                comment += `- Speed Index: ${Math.round(audits['speed-index'].numericValue)}ms\n\n`;
              }
            }

            // Create or update comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Lighthouse Performance Report')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Performance regression check
        run: |
          node -e "
            const fs = require('fs');
            const reportDir = './lighthouse-ci-reports';
            const files = fs.readdirSync(reportDir);
            const jsonFiles = files.filter(f => f.endsWith('.json'));
            
            let hasRegression = false;
            const thresholds = {
              performance: 0.7,
              accessibility: 0.85,
              'best-practices': 0.8,
              seo: 0.8
            };
            
            for (const file of jsonFiles) {
              const data = JSON.parse(fs.readFileSync(\`\${reportDir}/\${file}\`, 'utf-8'));
              
              if (data.categories) {
                for (const [category, threshold] of Object.entries(thresholds)) {
                  const score = data.categories[category]?.score || 0;
                  if (score < threshold) {
                    console.error(\`❌ \${category} score (\${Math.round(score * 100)}%) is below threshold (\${Math.round(threshold * 100)}%)\`);
                    hasRegression = true;
                  }
                }
              }
            }
            
            if (hasRegression) {
              process.exit(1);
            } else {
              console.log('✅ All performance metrics meet thresholds');
            }
          "
