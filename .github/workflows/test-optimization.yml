name: 優化測試執行流程

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  JEST_CACHE_ENABLED: 'true'

jobs:
  # 並行測試作業
  test-parallel:
    name: 並行測試執行
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        test-group: [unit, integration, services]
      fail-fast: false

    steps:
      - name: Checkout 程式碼
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 設置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 安裝依賴
        run: npm ci --prefer-offline --no-audit

      - name: 恢復 Jest 緩存
        uses: actions/cache@v3
        with:
          path: |
            .jest-cache
            node_modules/.cache/jest
          key: jest-cache-${{ runner.os }}-${{ hashFiles('**/package-lock.json', 'jest.config.js') }}
          restore-keys: |
            jest-cache-${{ runner.os }}-

      - name: 運行測試 - ${{ matrix.test-group }}
        run: |
          case "${{ matrix.test-group }}" in
            "unit")
              npm run test:unit -- --ci --coverage --maxWorkers=2
              ;;
            "integration")
              npm run test:integration -- --ci --maxWorkers=1
              ;;
            "services")
              npm test -- --testPathPattern='app/services|app/void-pallet/services' --ci --coverage --maxWorkers=2
              ;;
          esac

      - name: 上傳覆蓋率報告
        if: matrix.test-group == 'unit' || matrix.test-group == 'services'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: ${{ matrix.test-group }}
          name: ${{ matrix.test-group }}-coverage

      - name: 上傳測試結果
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.test-group }}
          path: |
            coverage/
            junit.xml
          retention-days: 7

  # 性能測試作業
  performance-test:
    name: 性能測試
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout 程式碼
        uses: actions/checkout@v4

      - name: 設置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 安裝依賴
        run: npm ci --prefer-offline --no-audit

      - name: 運行性能測試
        run: npm run test:performance

      - name: 運行緩存統計
        run: npm run test:cache-stats

      - name: 生成性能報告
        run: |
          echo "## 測試性能報告" >> performance-report.md
          echo "測試時間: $(date)" >> performance-report.md
          echo "" >> performance-report.md
          npm run test:cache-stats >> performance-report.md

      - name: 上傳性能報告
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: performance-report.md

  # E2E 測試作業
  e2e-test:
    name: E2E 測試
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout 程式碼
        uses: actions/checkout@v4

      - name: 設置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 安裝依賴
        run: npm ci --prefer-offline --no-audit

      - name: 安裝 Playwright Browsers
        run: npx playwright install --with-deps

      - name: 運行 E2E 測試
        run: npm run test:e2e

      - name: 上傳 E2E 報告
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-report
          path: playwright-report/
          retention-days: 7

  # 測試結果摘要
  test-summary:
    name: 測試結果摘要
    runs-on: ubuntu-latest
    needs: [test-parallel, performance-test, e2e-test]
    if: always()

    steps:
      - name: Checkout 程式碼
        uses: actions/checkout@v4

      - name: 下載所有測試結果
        uses: actions/download-artifact@v3

      - name: 生成測試摘要
        run: |
          echo "# 🧪 測試執行摘要" > test-summary.md
          echo "執行時間: $(date)" >> test-summary.md
          echo "" >> test-summary.md

          echo "## 📊 覆蓋率統計" >> test-summary.md
          if [ -d "test-results-unit/coverage" ]; then
            echo "- 單元測試覆蓋率: 已生成" >> test-summary.md
          fi
          if [ -d "test-results-services/coverage" ]; then
            echo "- 服務測試覆蓋率: 已生成" >> test-summary.md
          fi

          echo "" >> test-summary.md
          echo "## ⚡ 性能指標" >> test-summary.md
          if [ -f "performance-report/performance-report.md" ]; then
            cat performance-report/performance-report.md >> test-summary.md
          fi

          echo "" >> test-summary.md
          echo "## 🎭 E2E 測試" >> test-summary.md
          if [ -d "e2e-report" ]; then
            echo "- E2E 測試報告: 已生成" >> test-summary.md
          fi

      - name: 發布測試摘要
        uses: actions/upload-artifact@v3
        with:
          name: final-test-summary
          path: test-summary.md

      - name: 評論 PR（如果是 PR）
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('test-summary.md')) {
              const summary = fs.readFileSync('test-summary.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }

  # 緩存清理作業（每週執行）
  cache-cleanup:
    name: 緩存清理
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
      - name: 清理過期緩存
        run: |
          echo "清理 GitHub Actions 緩存..."
          # 這裡可以添加清理邏輯

# 定期清理緩存（每週日執行）
on:
  schedule:
    - cron: '0 0 * * 0'  # 每週日午夜執行
