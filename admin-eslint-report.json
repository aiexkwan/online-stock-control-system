[{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/[theme]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/__tests__/ssr-integration-client.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/__tests__/ssr-integration.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/__tests__/ssr-server-prefetch.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/AcoOrderProgress/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/AdminErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/AdminHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/NewAdminDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2600,2603],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2600,2603],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * New Admin Dashboard Component\r\n * 使用固定佈局的新儀表板系統\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { useRouter, usePathname } from 'next/navigation';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { createClient } from '@/lib/supabase';\r\nimport { toast } from 'sonner';\r\nimport { ArrowPathIcon } from '@heroicons/react/24/outline';\r\nimport { useAuth } from '@/app/hooks/useAuth';\r\nimport { format, startOfDay, endOfDay } from 'date-fns';\r\n// Universal background is now handled at the app level\r\nimport { useDialog } from '@/app/contexts/DialogContext';\r\nimport { useVoidPallet } from '@/app/void-pallet/hooks/useVoidPallet';\r\nimport {\r\n  UniversalTimeRangeSelector,\r\n  TimeFrame,\r\n} from '@/app/components/admin/UniversalTimeRangeSelector';\r\nimport { AdminDashboardContent } from './dashboard/AdminDashboardContent';\r\nimport { LoadingScreen, FadeInContainer } from '@/components/ui/loading';\r\nimport { cn } from '@/lib/utils';\r\nimport { DashboardDataProvider } from '@/app/admin/contexts/DashboardDataContext';\r\n// import { MenuBar } from '@/components/ui/glow-menu'; // Removed - using dynamic action bar\r\n// import UniversalChatbot from '@/app/components/admin/UniversalChatbot'; // Removed - integrated into navigation\r\nimport {\r\n  HomeIcon as Home,\r\n  BeakerIcon as Beaker,\r\n  CubeIcon as Cube,\r\n  BuildingStorefrontIcon as Building,\r\n  CloudArrowUpIcon as Cloud,\r\n  PencilSquareIcon as Pencil,\r\n  ArchiveBoxIcon as Archive,\r\n  CogIcon as Cog,\r\n  ChartPieIcon as ChartPie,\r\n} from '@heroicons/react/24/outline';\r\n\r\n// Dashboard themes with glow menu configuration - v2.0.2: 簡化為3個主題\r\nconst DASHBOARD_THEMES = [\r\n  {\r\n    id: 'operations-monitoring',\r\n    label: 'Operations',\r\n    path: '/admin/operations-monitoring',\r\n    icon: Building,\r\n    gradient:\r\n      'radial-gradient(circle, rgba(168,85,247,0.15) 0%, rgba(147,51,234,0.06) 50%, rgba(126,34,206,0) 100%)',\r\n    iconColor: 'text-purple-500',\r\n  },\r\n  {\r\n    id: 'data-management',\r\n    label: 'Data Mgmt',\r\n    path: '/admin/data-management',\r\n    icon: Cloud,\r\n    gradient:\r\n      'radial-gradient(circle, rgba(6,182,212,0.15) 0%, rgba(8,145,178,0.06) 50%, rgba(14,116,144,0) 100%)',\r\n    iconColor: 'text-cyan-500',\r\n  },\r\n  {\r\n    id: 'analytics',\r\n    label: 'Analytics',\r\n    path: '/admin/analytics',\r\n    icon: ChartPie,\r\n    gradient:\r\n      'radial-gradient(circle, rgba(239,68,68,0.15) 0%, rgba(220,38,38,0.06) 50%, rgba(185,28,28,0) 100%)',\r\n    iconColor: 'text-red-500',\r\n  },\r\n];\r\n\r\ninterface NewAdminDashboardProps {\r\n  prefetchedData?: any; // SSR 預取數據\r\n  ssrMode?: boolean; // 是否為 SSR 模式\r\n}\r\n\r\nexport function NewAdminDashboard({ \r\n  prefetchedData, \r\n  ssrMode = false \r\n}: NewAdminDashboardProps = {}) {\r\n  const router = useRouter();\r\n  const pathname = usePathname();\r\n  const { isAuthenticated, loading } = useAuth();\r\n  const [isDashboardLoading, setIsDashboardLoading] = useState(false);\r\n  const [timeFrame, setTimeFrame] = useState<TimeFrame>({\r\n    label: format(new Date(), 'MMM d, yyyy'),\r\n    value: 'custom',\r\n    start: startOfDay(new Date()),\r\n    end: endOfDay(new Date()),\r\n  });\r\n\r\n  // Memoize dateRange to prevent infinite re-renders\r\n  const memoizedDateRange = useMemo(() => ({\r\n    startDate: timeFrame.start,\r\n    endDate: timeFrame.end\r\n  }), [timeFrame.start, timeFrame.end]);\r\n\r\n  // 從路徑判斷當前主題\r\n  const pathParts = pathname.split('/').filter(Boolean);\r\n  const lastPart = pathParts[pathParts.length - 1];\r\n  // If on /admin root, redirect to injection theme\r\n  const currentTheme =\r\n    pathParts.length === 1 && lastPart === 'admin' ? 'injection' : lastPart || 'injection';\r\n\r\n  // Navigation menu items grouped by category\r\n\r\n  // Universal background is handled at the app level\r\n\r\n  // Remove artificial loading state on theme change\r\n  // Theme switching should be instant without loading screen\r\n\r\n  // Dialog hooks\r\n  const { openDialog } = useDialog();\r\n\r\n  // Void Pallet Hook\r\n  const { state: voidState } = useVoidPallet();\r\n\r\n  // Loading state\r\n  if (loading) {\r\n    return (\r\n      <LoadingScreen isLoading={true} loadingText='Authenticating...' showMessages={false}>\r\n        <div />\r\n      </LoadingScreen>\r\n    );\r\n  }\r\n\r\n  // Not authenticated\r\n  if (!isAuthenticated) {\r\n    return (\r\n      <div className='min-h-screen'>\r\n        <div className='relative z-10 flex min-h-screen flex-col items-center justify-center p-4 text-white'>\r\n          <h1 className='mb-4 text-3xl font-bold text-orange-500'>Authentication Required</h1>\r\n          <p className='mb-6 text-lg'>Please log in to access the Admin Dashboard.</p>\r\n          <button\r\n            onClick={() => router.push('/main-login')}\r\n            className='rounded-lg bg-orange-500 px-6 py-3 text-white transition-colors hover:bg-orange-600'\r\n          >\r\n            Go to Login\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Main content\r\n  return (\r\n    <LoadingScreen isLoading={isDashboardLoading}>\r\n      <div className='min-h-screen'>\r\n        <div className='relative z-10 flex min-h-screen flex-col overflow-x-hidden text-white'>\r\n          {/* Navigation removed - using dynamic action bar */}\r\n\r\n          {/* Dashboard Content Area */}\r\n          <div className='flex-1 pb-8'>\r\n            <div className='mx-auto h-full max-w-[1920px] px-4 sm:px-6 lg:px-8'>\r\n              {/* 時間選擇器 - 除了 system 頁面 */}\r\n              {currentTheme !== 'system' && (\r\n                <div className='mb-6 flex items-center justify-end'>\r\n                  <UniversalTimeRangeSelector value={timeFrame} onChange={setTimeFrame} />\r\n                </div>\r\n              )}\r\n\r\n              {/* 主內容區域 */}\r\n              <div\r\n                className={\r\n                  // v2.0.2: 更新為新主題名\r\n                  currentTheme === 'operations-monitoring'\r\n                    ? ''\r\n                    : 'h-full'\r\n                }\r\n                style={\r\n                  // v2.0.2: 更新為新主題名\r\n                  currentTheme === 'operations-monitoring'\r\n                    ? {}\r\n                    : { minHeight: 'calc(100vh - 260px)' }\r\n                }\r\n              >\r\n                <DashboardDataProvider \r\n                  initialDateRange={memoizedDateRange}\r\n                  autoRefreshInterval={0}\r\n                  prefetchedData={prefetchedData}\r\n                  ssrMode={ssrMode}\r\n                >\r\n                  <AdminDashboardContent \r\n                    theme={currentTheme} \r\n                    timeFrame={timeFrame}\r\n                    prefetchedData={prefetchedData}\r\n                    ssrMode={ssrMode}\r\n                  />\r\n                </DashboardDataProvider>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Footer */}\r\n          <div className='relative z-10 py-8 text-center'>\r\n            <div className='inline-flex items-center space-x-2 text-sm text-slate-500'>\r\n              <div className='h-1 w-1 rounded-full bg-slate-500'></div>\r\n              <span>Pennine Manufacturing Stock Control System</span>\r\n              <div className='h-1 w-1 rounded-full bg-slate-500'></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Universal Chatbot removed - integrated into navigation bar */}\r\n      </div>\r\n    </LoadingScreen>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/PerformanceMonitor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/QuickSearch/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/StatsCard/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3761,3764],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3761,3764],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { ClockIcon, ChevronDownIcon } from '@heroicons/react/24/outline';\r\nimport { useTimeRange } from '../../hooks/useAdminDashboard';\r\nimport { DashboardStats } from '../../services/AdminDataService';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface StatsCardProps {\r\n  title: string;\r\n  icon: React.ReactNode;\r\n  stats: DashboardStats;\r\n  type: 'generated' | 'transferred';\r\n  colorScheme: {\r\n    gradient: string;\r\n    text: string;\r\n    hover: string;\r\n  };\r\n  loading?: boolean;\r\n}\r\n\r\nexport function StatsCard({\r\n  title,\r\n  icon,\r\n  stats,\r\n  type,\r\n  colorScheme,\r\n  loading = false,\r\n}: StatsCardProps) {\r\n  const { timeRange, setTimeRange, isOpen, setIsOpen, getDataForTimeRange } = useTimeRange();\r\n\r\n  const dropdownRef = React.useRef<HTMLDivElement>(null);\r\n\r\n  // Close dropdown when clicking outside\r\n  React.useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\r\n        setIsOpen(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => document.removeEventListener('mousedown', handleClickOutside);\r\n  }, [setIsOpen]);\r\n\r\n  const timeRangeOptions = ['Today', 'Yesterday', 'Past 3 days', 'This week'];\r\n  const value = getDataForTimeRange(stats, type);\r\n\r\n  return (\r\n    <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className='flex-1'>\r\n      <div className='group relative'>\r\n        <div className={`absolute inset-0 ${colorScheme.gradient} rounded-xl blur-xl`}></div>\r\n        <div\r\n          className={cn(\r\n            'relative rounded-xl border border-slate-700/50 bg-slate-800/40 p-4 shadow-xl backdrop-blur-xl',\r\n            colorScheme.hover,\r\n            'transition-all duration-300'\r\n          )}\r\n        >\r\n          <div className='absolute inset-0 rounded-xl bg-gradient-to-r from-green-500/5 via-transparent to-emerald-500/5 opacity-0 transition-opacity duration-500 group-hover:opacity-100'></div>\r\n\r\n          <div className='relative z-10'>\r\n            <div className='mb-3 flex items-center justify-between'>\r\n              <h3 className={cn('text-sm font-medium', colorScheme.text)}>\r\n                {icon}\r\n                {title}\r\n              </h3>\r\n\r\n              {/* Time Range Dropdown */}\r\n              <div className='relative z-50' ref={dropdownRef}>\r\n                <button\r\n                  onClick={e => {\r\n                    e.stopPropagation();\r\n                    setIsOpen(!isOpen);\r\n                  }}\r\n                  className='flex items-center gap-1 rounded-md border border-slate-600/30 bg-slate-700/50 px-2 py-1 text-xs text-slate-300 transition-all duration-300 hover:bg-slate-600/50 hover:text-white'\r\n                >\r\n                  <ClockIcon className='h-3 w-3' />\r\n                  {timeRange}\r\n                  <ChevronDownIcon\r\n                    className={`h-3 w-3 transition-transform ${isOpen ? 'rotate-180' : ''}`}\r\n                  />\r\n                </button>\r\n\r\n                <AnimatePresence>\r\n                  {isOpen && (\r\n                    <motion.div\r\n                      initial={{ opacity: 0, y: 10, scale: 0.95 }}\r\n                      animate={{ opacity: 1, y: 0, scale: 1 }}\r\n                      exit={{ opacity: 0, y: 10, scale: 0.95 }}\r\n                      transition={{ duration: 0.2 }}\r\n                      className='bg-slate-900/98 absolute right-0 top-full z-[99999] mt-1 min-w-[100px] rounded-xl border border-slate-600/50 shadow-2xl backdrop-blur-xl'\r\n                    >\r\n                      {timeRangeOptions.map((option: any) => (\r\n                        <button\r\n                          key={option}\r\n                          onClick={() => {\r\n                            setTimeRange(option);\r\n                            setIsOpen(false);\r\n                          }}\r\n                          className={`w-full px-3 py-2 text-left text-xs transition-all duration-300 first:rounded-t-xl last:rounded-b-xl hover:bg-slate-700/50 ${\r\n                            timeRange === option\r\n                              ? 'bg-slate-700/50 text-green-400'\r\n                              : 'text-slate-300'\r\n                          }`}\r\n                        >\r\n                          <div className='flex items-center justify-between'>\r\n                            <span>{option}</span>\r\n                            <span className='text-xs text-slate-400'>\r\n                              {getDataForTimeRange(stats, type)}\r\n                            </span>\r\n                          </div>\r\n                        </button>\r\n                      ))}\r\n                    </motion.div>\r\n                  )}\r\n                </AnimatePresence>\r\n              </div>\r\n            </div>\r\n\r\n            <div className='flex flex-1 items-center justify-center'>\r\n              {loading ? (\r\n                <div className='h-8 w-8 animate-spin rounded-full border-2 border-green-500 border-t-transparent'></div>\r\n              ) : (\r\n                <div className='text-5xl font-bold text-white'>{value}</div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </motion.div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/alerts/AlertDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":324,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":324,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10898,10901],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10898,10901],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":328,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":328,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11072,11075],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11072,11075],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Alert Management Dashboard\r\n * 告警管理儀表板 - 統一的告警管理界面\r\n */\r\n\r\n'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { AlertTriangle, CheckCircle, Clock, Bell, Settings, Plus, Play, Square } from 'lucide-react';\r\nimport { Alert, AlertLevel, AlertState } from '@/lib/alerts/types';\r\nimport { AlertRulesList } from './AlertRulesList';\r\n// Component not implemented yet\r\n// // Component not implemented yet\n// import { AlertHistoryView } from './AlertHistoryView';\r\n// Component not implemented yet\r\n// // Component not implemented yet\n// import { NotificationSettings } from './NotificationSettings';\r\n// Component not implemented yet\r\n// // Component not implemented yet\n// import { AlertSystemStatus } from './AlertSystemStatus';\r\n// Component not implemented yet\r\n// // Component not implemented yet\n// import { CreateAlertRuleDialog } from './CreateAlertRuleDialog';\r\n\r\ninterface AlertStats {\r\n  total: number;\r\n  active: number;\r\n  resolved: number;\r\n  acknowledged: number;\r\n  byLevel: Record<AlertLevel, number>;\r\n}\r\n\r\ninterface SystemStatus {\r\n  running: boolean;\r\n  uptime: number;\r\n  rulesCount: number;\r\n  activeAlertsCount: number;\r\n  lastEvaluation?: string;\r\n}\r\n\r\nexport function AlertDashboard() {\r\n  const [activeTab, setActiveTab] = useState<'overview' | 'rules' | 'history' | 'notifications' | 'settings'>('overview');\r\n  const [alertStats, setAlertStats] = useState<AlertStats>({\r\n    total: 0,\r\n    active: 0,\r\n    resolved: 0,\r\n    acknowledged: 0,\r\n    byLevel: {\r\n      info: 0,\r\n      warning: 0,\r\n      error: 0,\r\n      critical: 0\r\n    }\r\n  });\r\n  const [systemStatus, setSystemStatus] = useState<SystemStatus>({\r\n    running: false,\r\n    uptime: 0,\r\n    rulesCount: 0,\r\n    activeAlertsCount: 0\r\n  });\r\n  const [isCreateRuleOpen, setIsCreateRuleOpen] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // 載入告警統計\r\n  useEffect(() => {\r\n    loadAlertStats();\r\n    loadSystemStatus();\r\n    \r\n    // 每30秒更新一次\r\n    const interval = setInterval(() => {\r\n      loadAlertStats();\r\n      loadSystemStatus();\r\n    }, 30000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const loadAlertStats = async () => {\r\n    try {\r\n      const response = await fetch('/api/v1/alerts/history', {\r\n        method: 'POST'\r\n      });\r\n      const data = await response.json();\r\n      \r\n      if (data.success) {\r\n        setAlertStats(data.data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load alert stats:', error);\r\n    }\r\n  };\r\n\r\n  const loadSystemStatus = async () => {\r\n    try {\r\n      const response = await fetch('/api/v1/alerts/system/status');\r\n      const data = await response.json();\r\n      \r\n      if (data.success) {\r\n        setSystemStatus(data.data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load system status:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleStartSystem = async () => {\r\n    try {\r\n      const response = await fetch('/api/v1/alerts/system/start', {\r\n        method: 'POST'\r\n      });\r\n      const data = await response.json();\r\n      \r\n      if (data.success) {\r\n        await loadSystemStatus();\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to start system:', error);\r\n    }\r\n  };\r\n\r\n  const handleStopSystem = async () => {\r\n    try {\r\n      const response = await fetch('/api/v1/alerts/system/stop', {\r\n        method: 'POST'\r\n      });\r\n      const data = await response.json();\r\n      \r\n      if (data.success) {\r\n        await loadSystemStatus();\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to stop system:', error);\r\n    }\r\n  };\r\n\r\n  const formatUptime = (uptime: number) => {\r\n    const seconds = Math.floor(uptime / 1000);\r\n    const hours = Math.floor(seconds / 3600);\r\n    const minutes = Math.floor((seconds % 3600) / 60);\r\n    \r\n    if (hours > 0) {\r\n      return `${hours}h ${minutes}m`;\r\n    }\r\n    return `${minutes}m`;\r\n  };\r\n\r\n  const getLevelColor = (level: AlertLevel) => {\r\n    switch (level) {\r\n      case 'info': return 'bg-blue-100 text-blue-800';\r\n      case 'warning': return 'bg-yellow-100 text-yellow-800';\r\n      case 'error': return 'bg-red-100 text-red-800';\r\n      case 'critical': return 'bg-red-200 text-red-900';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (level: AlertLevel) => {\r\n    switch (level) {\r\n      case 'info': return <Bell className=\"w-4 h-4\" />;\r\n      case 'warning': return <AlertTriangle className=\"w-4 h-4\" />;\r\n      case 'error': return <AlertTriangle className=\"w-4 h-4\" />;\r\n      case 'critical': return <AlertTriangle className=\"w-4 h-4\" />;\r\n      default: return <Bell className=\"w-4 h-4\" />;\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      <div className=\"flex items-center justify-between mb-8\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold\">Alert Management</h1>\r\n          <p className=\"text-gray-600 mt-2\">Monitor and manage system alerts</p>\r\n        </div>\r\n        \r\n        <div className=\"flex gap-2\">\r\n          <Button\r\n            variant=\"outline\"\r\n            onClick={systemStatus.running ? handleStopSystem : handleStartSystem}\r\n            className=\"flex items-center gap-2\"\r\n          >\r\n            {systemStatus.running ? <Square className=\"w-4 h-4\" /> : <Play className=\"w-4 h-4\" />}\r\n            {systemStatus.running ? 'Stop' : 'Start'} System\r\n          </Button>\r\n          \r\n          <Button\r\n            onClick={() => setIsCreateRuleOpen(true)}\r\n            className=\"flex items-center gap-2\"\r\n          >\r\n            <Plus className=\"w-4 h-4\" />\r\n            Create Rule\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* System Status */}\r\n      <Card className=\"mb-6\">\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <div className={`w-3 h-3 rounded-full ${systemStatus.running ? 'bg-green-500' : 'bg-red-500'}`}></div>\r\n            System Status\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-blue-600\">{systemStatus.rulesCount}</div>\r\n              <div className=\"text-sm text-gray-600\">Active Rules</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-red-600\">{systemStatus.activeAlertsCount}</div>\r\n              <div className=\"text-sm text-gray-600\">Active Alerts</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-green-600\">{formatUptime(systemStatus.uptime)}</div>\r\n              <div className=\"text-sm text-gray-600\">Uptime</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-gray-600\">\r\n                {systemStatus.lastEvaluation ? \r\n                  new Date(systemStatus.lastEvaluation).toLocaleTimeString() : \r\n                  'Never'\r\n                }\r\n              </div>\r\n              <div className=\"text-sm text-gray-600\">Last Check</div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Alert Statistics */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\r\n        <Card>\r\n          <CardContent className=\"p-6\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-gray-600\">Total Alerts</p>\r\n                <p className=\"text-2xl font-bold\">{alertStats.total}</p>\r\n              </div>\r\n              <Bell className=\"w-8 h-8 text-blue-500\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-6\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-gray-600\">Active</p>\r\n                <p className=\"text-2xl font-bold text-red-600\">{alertStats.active}</p>\r\n              </div>\r\n              <AlertTriangle className=\"w-8 h-8 text-red-500\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-6\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-gray-600\">Resolved</p>\r\n                <p className=\"text-2xl font-bold text-green-600\">{alertStats.resolved}</p>\r\n              </div>\r\n              <CheckCircle className=\"w-8 h-8 text-green-500\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-6\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-gray-600\">Acknowledged</p>\r\n                <p className=\"text-2xl font-bold text-yellow-600\">{alertStats.acknowledged}</p>\r\n              </div>\r\n              <Clock className=\"w-8 h-8 text-yellow-500\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Alert Levels */}\r\n      <Card className=\"mb-8\">\r\n        <CardHeader>\r\n          <CardTitle>Alert Levels</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n            {Object.entries(alertStats.byLevel).map(([level, count]) => (\r\n              <div key={level} className=\"flex items-center gap-3\">\r\n                <Badge className={getLevelColor(level as AlertLevel)}>\r\n                  <div className=\"flex items-center gap-1\">\r\n                    {getStatusIcon(level as AlertLevel)}\r\n                    {level.toUpperCase()}\r\n                  </div>\r\n                </Badge>\r\n                <span className=\"text-lg font-semibold\">{count}</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Navigation Tabs */}\r\n      <div className=\"flex gap-2 mb-6\">\r\n        {[\r\n          { id: 'overview', label: 'Overview' },\r\n          { id: 'rules', label: 'Rules' },\r\n          { id: 'history', label: 'History' },\r\n          { id: 'notifications', label: 'Notifications' },\r\n          { id: 'settings', label: 'Settings' }\r\n        ].map((tab: any) => (\r\n          <Button\r\n            key={tab.id}\r\n            variant={activeTab === tab.id ? 'default' : 'outline'}\r\n            onClick={() => setActiveTab(tab.id as any)}\r\n          >\r\n            {tab.label}\r\n          </Button>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Tab Content */}\r\n      <div>\r\n        {activeTab === 'overview' && (\r\n          <div className=\"text-center py-8\">\r\n            <p className=\"text-muted-foreground\">AlertSystemStatus component not implemented yet</p>\r\n          </div>\r\n        )}\r\n        \r\n        {activeTab === 'rules' && (\r\n          <AlertRulesList />\r\n        )}\r\n        \r\n        {activeTab === 'history' && (\r\n          <div className=\"text-center py-8\">\r\n            <p className=\"text-muted-foreground\">AlertHistoryView component not implemented yet</p>\r\n          </div>\r\n        )}\r\n        \r\n        {activeTab === 'notifications' && (\r\n          <div className=\"text-center py-8\">\r\n            <p className=\"text-muted-foreground\">NotificationSettings component not implemented yet</p>\r\n          </div>\r\n        )}\r\n        \r\n        {activeTab === 'settings' && (\r\n          <div className=\"text-center py-8\">\r\n            <Settings className=\"w-16 h-16 mx-auto mb-4 text-gray-400\" />\r\n            <p className=\"text-gray-600\">System settings coming soon...</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Create Alert Rule Dialog */}\r\n      {/* CreateAlertRuleDialog component not implemented yet */}\r\n      {/*\r\n      <CreateAlertRuleDialog\r\n        isOpen={isCreateRuleOpen}\r\n        onClose={() => setIsCreateRuleOpen(false)}\r\n        onRuleCreated={() => {\r\n          setIsCreateRuleOpen(false);\r\n          loadAlertStats();\r\n          loadSystemStatus();\r\n        }}\r\n      />\r\n      */}\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/alerts/AlertRulesList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/AdminDashboardContent.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2685,2688],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2685,2688],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Admin Dashboard Content Component\r\n * 根據不同主題渲染對應的儀表板內容\r\n * Phase 3.1.2: 使用動態導入優化\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { lazy, Suspense, useEffect, useMemo } from 'react';\r\nimport { TimeFrame } from '@/app/components/admin/UniversalTimeRangeSelector';\r\nimport { adminDashboardLayouts } from './adminDashboardLayouts';\r\nimport { AdminWidgetRenderer } from './AdminWidgetRenderer';\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport { unifiedWidgetRegistry } from '@/lib/widgets/unified-registry';\r\nimport { useWidgetRegistry } from '@/app/hooks/useWidgetRegistry';\r\nimport { KeyboardNavigableGrid } from './KeyboardNavigableGrid';\r\n\r\n// 動態導入 theme layouts - 使用 webpack magic comments\r\nconst ThemeLayouts = {\r\n  injection: lazy(() =>\r\n    import(/* webpackChunkName: \"theme-injection\" */ './CustomThemeLayout').then(m => ({\r\n      default: m.CustomThemeLayout,\r\n    }))\r\n  ),\r\n  pipeline: lazy(() =>\r\n    import(/* webpackChunkName: \"theme-pipeline\" */ './CustomThemeLayout').then(m => ({\r\n      default: m.CustomThemeLayout,\r\n    }))\r\n  ),\r\n  warehouse: lazy(() =>\r\n    import(/* webpackChunkName: \"theme-warehouse\" */ './CustomThemeLayout').then(m => ({\r\n      default: m.CustomThemeLayout,\r\n    }))\r\n  ),\r\n  upload: lazy(() =>\r\n    import(/* webpackChunkName: \"theme-upload\" */ './UploadUpdateLayout').then(m => ({\r\n      default: m.UploadUpdateLayout,\r\n    }))\r\n  ),\r\n  update: lazy(() =>\r\n    import(/* webpackChunkName: \"theme-update\" */ './UploadUpdateLayout').then(m => ({\r\n      default: m.UploadUpdateLayout,\r\n    }))\r\n  ),\r\n  'stock-management': lazy(() =>\r\n    import(/* webpackChunkName: \"theme-stock\" */ './StockManagementLayout').then(m => ({\r\n      default: m.StockManagementLayout,\r\n    }))\r\n  ),\r\n  system: lazy(() =>\r\n    import(/* webpackChunkName: \"theme-system\" */ './SystemLayout').then(m => ({\r\n      default: m.SystemLayout,\r\n    }))\r\n  ),\r\n  analysis: lazy(() =>\r\n    import(/* webpackChunkName: \"theme-analysis\" */ './AnalysisLayout').then(m => ({\r\n      default: m.AnalysisLayout,\r\n    }))\r\n  ),\r\n};\r\n\r\n// Theme loading skeleton\r\nconst ThemeLoadingSkeleton = () => (\r\n  <div className='h-full w-full space-y-4 p-6'>\r\n    <div className='grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3'>\r\n      {[1, 2, 3, 4, 5, 6].map((i: Record<string, unknown>) => (\r\n        <div key={i} className='space-y-3'>\r\n          <Skeleton className='h-48 w-full bg-slate-700' />\r\n          <Skeleton className='h-4 w-3/4 bg-slate-700' />\r\n          <Skeleton className='h-4 w-1/2 bg-slate-700' />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\ninterface AdminDashboardContentProps {\r\n  theme: string;\r\n  timeFrame: TimeFrame;\r\n  prefetchedData?: any; // SSR 預取數據\r\n  ssrMode?: boolean; // 是否為 SSR 模式\r\n}\r\n\r\n// 定義 widget 優先級（用於延遲加載，不改變順序）- 移到組件外部以避免重新創建\r\nconst widgetPriority: Record<string, number> = {\r\n  // 核心統計 widgets - 最高優先級\r\n  StatsCardWidget: 1,\r\n  AwaitLocationQtyWidget: 1,\r\n  YesterdayTransferCountWidget: 1,\r\n  StillInAwaitWidget: 1,\r\n  StillInAwaitPercentageWidget: 1,\r\n\r\n  // 列表和表格 - 中優先級\r\n  OrderStateListWidgetV2: 2,\r\n  WarehouseTransferListWidget: 2,\r\n  OrdersListWidgetV2: 2,\r\n  OtherFilesListWidget: 2,\r\n\r\n  // 圖表 - 低優先級\r\n  StockDistributionChart: 3,\r\n  ProductionStatsWidget: 3,\r\n  InventoryAnalysisWidget: 3,\r\n  HistoryTreeV2: 3,\r\n  AnalysisExpandableCards: 3,\r\n};\r\n\r\nexport const AdminDashboardContent: React.FC<AdminDashboardContentProps> = ({\r\n  theme,\r\n  timeFrame,\r\n  prefetchedData,\r\n  ssrMode = false,\r\n}) => {\r\n  // 確保 widget registry 已初始化\r\n  const { isInitialized, error } = useWidgetRegistry();\r\n\r\n  // 預加載當前路由的 widgets\r\n  useEffect(() => {\r\n    if (!isInitialized) return;\r\n\r\n    const currentRoute = `/admin/${theme}`;\r\n\r\n    // 使用 SmartPreloader 進行智能預測預加載\r\n    unifiedWidgetRegistry.preloadForRoute(currentRoute).catch(console.error);\r\n  }, [theme, isInitialized]);\r\n\r\n  // 獲取對應的 Layout 組件\r\n  const ThemeLayout = useMemo(() => {\r\n    if (theme in ThemeLayouts) {\r\n      return ThemeLayouts[theme as keyof typeof ThemeLayouts];\r\n    }\r\n    return null;\r\n  }, [theme]);\r\n\r\n  // 獲取 layout 配置 - 使用 useMemo 穩定引用\r\n  const themeString = theme as string;\r\n  const layout = useMemo(() => adminDashboardLayouts[themeString], [themeString]);\r\n\r\n  // 穩定 widget 配置的引用，避免無限循環\r\n  const stableWidgets = useMemo(() => {\r\n    if (!layout) return [];\r\n    \r\n    return layout.widgets.map((widget, index) => {\r\n      // 為低優先級 widgets 添加延遲，但保持原有順序\r\n      const priority = widgetPriority[widget.component || ''] || 99;\r\n      const delay = priority > 2 ? (priority - 2) * 100 : 0;\r\n\r\n      return {\r\n        key: `${widget.gridArea}-${index}`,\r\n        config: widget,\r\n        delay,\r\n        index\r\n      };\r\n    });\r\n  }, [layout]);\r\n\r\n  // 如果正在初始化，顯示加載狀態\r\n  if (!isInitialized) {\r\n    return <ThemeLoadingSkeleton />;\r\n  }\r\n\r\n  // 如果初始化出錯，顯示錯誤\r\n  if (error) {\r\n    return (\r\n      <div className='flex h-full w-full items-center justify-center'>\r\n        <div className='text-center text-red-500'>\r\n          <h2 className='mb-2 text-xl font-semibold'>Failed to Initialize Widgets</h2>\r\n          <p>{(error as { message: string }).message}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // 如果沒有找到對應的 layout，顯示空狀態\r\n  if (!layout) {\r\n    return (\r\n      <div className='flex h-full w-full items-center justify-center'>\r\n        <div className='text-center text-gray-500'>\r\n          <h2 className='mb-2 text-xl font-semibold'>No Dashboard Available</h2>\r\n          <p>No dashboard layout is configured for the &quot;{theme}&quot; theme.</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // 渲染 widgets - 保持原有順序，只添加延遲加載\r\n  const renderWidgets = () => {\r\n         return stableWidgets.map(({ key, delay, config, index }) => (\r\n       <AdminWidgetRenderer\r\n         key={key}\r\n         config={config}\r\n         theme={theme}\r\n         timeFrame={timeFrame}\r\n         index={index}\r\n         delay={delay}\r\n       />\r\n     ));\r\n  };\r\n\r\n  // 如果有對應的 ThemeLayout 組件，使用動態加載\r\n  if (ThemeLayout) {\r\n    return (\r\n      <Suspense fallback={<ThemeLoadingSkeleton />}>\r\n        <ThemeLayout theme={theme} timeFrame={timeFrame}>\r\n          {renderWidgets()}\r\n        </ThemeLayout>\r\n      </Suspense>\r\n    );\r\n  }\r\n\r\n  // 默認佈局（如果沒有特定的 Layout 組件）\r\n  return (\r\n    <KeyboardNavigableGrid\r\n      className='h-full w-full'\r\n      gridColumns={8}\r\n      aria-label={`${theme} dashboard widgets`}\r\n    >\r\n      <div\r\n        className='h-full w-full'\r\n        style={{\r\n          display: 'grid',\r\n          gridTemplateColumns: 'repeat(8, 1fr)',\r\n          gridTemplateRows: '200px 300px 200px',\r\n          gap: '16px',\r\n          gridTemplateAreas: layout.gridTemplate,\r\n          height: '100%',\r\n          width: '100%',\r\n        }}\r\n      >\r\n        {renderWidgets()}\r\n      </div>\r\n    </KeyboardNavigableGrid>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/AdminWidgetRenderer.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":116,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3635,3638],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3635,3638],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":123,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4015,4018],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4015,4018],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":261,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":261,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8151,8154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8151,8154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":271,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":271,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8364,8367],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8364,8367],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":339,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":339,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10601,10604],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10601,10604],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":340,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":340,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10647,10650],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10647,10650],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":341,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":341,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10695,10698],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10695,10698],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":342,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":342,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10752,10755],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10752,10755],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":343,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":343,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10804,10807],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10804,10807],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":406,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":406,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12504,12507],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12504,12507],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Admin Widget Renderer - 簡化版本  \r\n * 使用專門的子渲染器處理不同類型的 Widget\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useState, useEffect, Suspense, useCallback, useMemo } from 'react';\nimport { DatabaseRecord } from '@/lib/types/database';\r\nimport { motion } from 'framer-motion';\r\nimport { AdminWidgetConfig } from './adminDashboardLayouts';\r\nimport { TimeFrame } from '@/app/components/admin/UniversalTimeRangeSelector';\r\nimport { createClient } from '@/lib/supabase';\r\nimport { useAdminRefresh } from '@/app/admin/contexts/AdminRefreshContext';\r\nimport { unifiedWidgetRegistry } from '@/lib/widgets/unified-registry';\r\nimport { \r\n  getWidgetCategory,\r\n  getThemeGlowColor,\r\n  createErrorFallback \r\n} from './widget-renderer-shared';\r\nimport { ChartWidgetRenderer } from './ChartWidgetRenderer';\r\nimport { StatsWidgetRenderer } from './StatsWidgetRenderer';\r\nimport { ListWidgetRenderer } from './ListWidgetRenderer';\r\nimport { WidgetSuspenseFallback } from './widgets/common/WidgetStates';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { \r\n  getProductByCode, \r\n  createProduct, \r\n  updateProduct,\r\n  ProductData \r\n} from '@/app/actions/productActions';\r\nimport { cn } from '@/lib/utils';\r\nimport { \r\n  ArrowPathIcon,\r\n  MagnifyingGlassIcon,\r\n  PencilIcon,\r\n  BuildingOfficeIcon\r\n} from '@heroicons/react/24/outline';\r\n\r\ninterface AdminWidgetRendererProps {\r\n  config: AdminWidgetConfig;\r\n  theme: string;\r\n  timeFrame: TimeFrame;\r\n  index?: number;\r\n  delay?: number;\r\n}\r\n\r\n// 統一的 Suspense Fallback 生成器\r\nconst createSuspenseFallback = (type: 'default' | 'stats' | 'chart' | 'table' | 'list' = 'default') => {\r\n  return <WidgetSuspenseFallback type={type} />;\r\n};\r\n\r\n// 統一的 Widget Wrapper Component\r\nconst UnifiedWidgetWrapper = React.memo<{\r\n  children: React.ReactNode;\r\n  theme: string;\r\n  title?: string;\r\n  isEditMode?: boolean;\r\n  onUpdate?: () => void;\r\n  onRemove?: () => void;\r\n}>(({ children, theme, title, isEditMode, onUpdate, onRemove }) => {\r\n  const glowColor = getThemeGlowColor(theme);\r\n  \r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0, scale: 0.9 }}\r\n      animate={{ opacity: 1, scale: 1 }}\r\n      transition={{ duration: 0.3 }}\r\n      className={cn(\r\n        \"relative h-full w-full rounded-lg border bg-card text-card-foreground shadow-sm\",\r\n        `glow-${glowColor}`,\r\n        \"focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\r\n      )}\r\n      data-widget-focusable=\"true\"\r\n      tabIndex={-1}\r\n      role=\"region\"\r\n      aria-label={title || 'Dashboard widget'}\r\n    >\r\n      {title && (\r\n        <div className=\"flex items-center justify-between p-4 pb-2\">\r\n          <h3 className=\"text-lg font-semibold\">{title}</h3>\r\n          {isEditMode && (\r\n            <div className=\"flex space-x-2\">\r\n              {onUpdate && (\r\n                <Button size=\"sm\" variant=\"outline\" onClick={onUpdate}>\r\n                  <PencilIcon className=\"h-4 w-4\" />\r\n                </Button>\r\n              )}\r\n              {onRemove && (\r\n                <Button size=\"sm\" variant=\"destructive\" onClick={onRemove}>\r\n                  ×\r\n                </Button>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n      <div className=\"p-4\">\r\n        {children}\r\n      </div>\r\n    </motion.div>\r\n  );\r\n});\r\n\r\nUnifiedWidgetWrapper.displayName = 'UnifiedWidgetWrapper';\r\n\r\nconst AdminWidgetRendererComponent: React.FC<AdminWidgetRendererProps> = ({ \r\n  config, \r\n  theme,\r\n  timeFrame,\r\n  index = 0,\r\n  delay = 0\r\n}) => {\r\n  const [data, setData] = useState<any>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [isDelayed, setIsDelayed] = useState(delay > 0);\r\n  const { refreshTrigger } = useAdminRefresh();\r\n  \r\n  // Helper function to render lazy component from unifiedWidgetRegistry\r\n  const renderLazyComponent = useCallback((componentName: string, props: any) => {\r\n    const Component = unifiedWidgetRegistry.getWidgetComponent(componentName);\r\n    if (!Component) {\r\n      console.error(`Component ${componentName} not found in unifiedWidgetRegistry.getWidgetComponent`);\r\n      return <div>Component {componentName} not found</div>;\r\n    }\r\n    return <Component {...props} />;\r\n  }, []);\r\n\r\n  // 處理延遲加載\r\n  useEffect(() => {\r\n    if (delay > 0) {\r\n      const timer = setTimeout(() => {\r\n        setIsDelayed(false);\r\n      }, delay);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [delay]);\r\n\r\n  // 穩定 config 的關鍵屬性以避免無限循環\r\n  const stableConfigKey = useMemo(() => {\r\n    return `${config.dataSource}-${config.title}-${config.type}-${JSON.stringify(config.metrics)}`;\r\n  }, [config.dataSource, config.title, config.type, config.metrics]);\r\n\r\n  // 根據數據源載入數據\r\n  useEffect(() => {\r\n    if (isDelayed) return;\r\n    \r\n    const loadData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n        \r\n        const supabase = createClient();\r\n        \r\n        // 根據不同的數據源載入真實數據\r\n        switch (config.dataSource) {\r\n          case 'record_palletinfo':\r\n          case 'record_inventory':\r\n          case 'record_transfer':\r\n          case 'stock_level':\r\n          case 'record_history':\r\n          case 'production_summary':\r\n          case 'production_details':\r\n          case 'work_level':\r\n          case 'pipeline_production_details':\r\n          case 'pipeline_work_level':\r\n          case 'data_customerorder':\r\n          case 'system_status':\r\n          case 'coming_soon':\r\n            // Data loading logic removed - loadWidgetData method not available\r\n            // Using null data for these widget types as they don't require data loading\r\n            setData(null);\r\n            break;\r\n            \r\n          default:\r\n            // 默認的假數據\r\n            setData(null);\r\n        }\r\n      } catch (err) {\r\n        console.error('Data loading error:', err);\r\n        setError(err instanceof Error ? (err as { message: string }).message : 'Unknown error');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadData();\r\n  }, [config.dataSource, stableConfigKey, timeFrame, refreshTrigger, isDelayed]);\r\n\r\n  // 如果還在延遲階段，顯示加載狀態\r\n  if (isDelayed) {\r\n    return (\r\n      <UnifiedWidgetWrapper theme={theme} title={config.title}>\r\n        <div className=\"flex items-center justify-center h-32\">\r\n          <ArrowPathIcon className=\"h-6 w-6 animate-spin text-gray-400\" />\r\n        </div>\r\n      </UnifiedWidgetWrapper>\r\n    );\r\n  }\r\n\r\n  // 根據 widget 類型選擇對應的渲染器\r\n  const widgetCategory = getWidgetCategory(config.type);\r\n  \r\n  const baseProps = {\r\n    config,\r\n    theme,\r\n    timeFrame,\r\n    data,\r\n    loading,\r\n    error,\r\n    renderLazyComponent\r\n  };\r\n\r\n  let renderedContent: JSX.Element;\r\n\r\n  try {\r\n    switch (widgetCategory) {\r\n      case 'chart':\r\n        renderedContent = <ChartWidgetRenderer {...baseProps} />;\r\n        break;\r\n        \r\n      case 'stats':\r\n        renderedContent = <StatsWidgetRenderer {...baseProps} />;\r\n        break;\r\n        \r\n      case 'list':\r\n        renderedContent = <ListWidgetRenderer {...baseProps} />;\r\n        break;\r\n        \r\n      case 'core':\r\n      default:\r\n        // 處理核心 widgets (上傳、產品更新等)\r\n        renderedContent = renderCoreWidget(config, theme, timeFrame, data, loading, error, renderLazyComponent);\r\n        break;\r\n    }\r\n  } catch (err) {\r\n    console.error('Widget rendering error:', err);\r\n    renderedContent = createErrorFallback(config.type, err instanceof Error ? (err as { message: string }).message : 'Unknown error');\r\n  }\r\n\r\n  return (\r\n    <UnifiedWidgetWrapper theme={theme} title={config.title}>\r\n      <Suspense fallback={createSuspenseFallback(widgetCategory as 'default' | 'stats' | 'chart' | 'table' | 'list')}>\r\n        {renderedContent}\r\n      </Suspense>\r\n    </UnifiedWidgetWrapper>\r\n  );\r\n};\r\n\r\n// 核心 Widget 渲染函數\r\nfunction renderCoreWidget(\r\n  config: AdminWidgetConfig,\r\n  theme: string,\r\n  timeFrame: TimeFrame,\r\n  data: DatabaseRecord[],\r\n  loading: boolean,\r\n  error: string | null,\r\n  renderLazyComponent: (componentName: string, props: any) => JSX.Element\r\n): JSX.Element {\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n  \r\n  if (error) {\r\n    return createErrorFallback(config.type, error);\r\n  }\r\n\r\n  const getComponentProps = (data?: any) => ({\r\n    config,\r\n    timeFrame,\r\n    theme,\r\n    data\r\n  });\r\n\r\n  switch (config.type) {\r\n    case 'UploadZone':\r\n      return renderLazyComponent('UploadZone', getComponentProps(data));\r\n      \r\n    case 'ProductUpdateWidget':\r\n    case 'ProductUpdateWidgetV2':\r\n      return <ProductUpdateWidget config={config} timeFrame={timeFrame} theme={theme} />;\r\n      \r\n    case 'SupplierUpdateWidget':\r\n      return <SupplierUpdateWidget config={config} timeFrame={timeFrame} theme={theme} />;\r\n      \r\n    case 'VoidPalletWidget':\r\n      return renderLazyComponent('VoidPalletWidget', getComponentProps(data));\r\n      \r\n    case 'AvailableSoonWidget':\r\n      return renderLazyComponent('AvailableSoonWidget', getComponentProps(data));\r\n      \r\n    case 'alerts':\r\n      return <AlertsWidget data={data} />;\r\n      \r\n    case 'preview':\r\n      return <PreviewWidget config={config} />;\r\n      \r\n    case 'report-generator':\r\n      return <ReportGeneratorWidget config={config} timeFrame={timeFrame} />;\r\n      \r\n    case 'coming_soon':\r\n    case 'available-soon':\r\n      return (\r\n        <div className=\"flex items-center justify-center h-32\">\r\n          <div className=\"text-center text-gray-500\">\r\n            <BuildingOfficeIcon className=\"h-12 w-12 mx-auto mb-2\" />\r\n            <p className=\"text-sm\">功能即將推出</p>\r\n          </div>\r\n        </div>\r\n      );\r\n      \r\n    default:\r\n      return createErrorFallback(`Unknown core widget type: ${config.type}`);\r\n  }\r\n}\r\n\r\n// 簡化的產品更新 Widget\r\nconst ProductUpdateWidget: React.FC<{\r\n  config: AdminWidgetConfig;\r\n  timeFrame: TimeFrame;\r\n  theme: string;\r\n}> = ({ config, timeFrame, theme }) => {\r\n  const [productCode, setProductCode] = useState('');\r\n  const [productData, setProductData] = useState<ProductData | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleSearch = async () => {\r\n    if (!productCode.trim()) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      const result = await getProductByCode(productCode);\r\n      if (result && typeof result === 'object' && 'code' in result && 'description' in result) {\r\n        // Transform result to match ProductData interface\r\n        const productData: ProductData = {\r\n          code: (result as any).code,\r\n          description: (result as any).description,\r\n          colour: (result as any).colour || null,\r\n          standard_qty: (result as any).standard_qty || 0,\r\n          type: (result as any).type || null,\r\n        };\r\n        setProductData(productData);\r\n      } else {\r\n        console.error('Invalid product data received:', result);\r\n        setProductData(null);\r\n      }\r\n    } catch (error) {\r\n      console.error('Product search error:', error);\r\n      setProductData(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"flex space-x-2\">\r\n        <Input\r\n          placeholder=\"輸入產品代碼\"\r\n          value={productCode}\r\n          onChange={(e) => setProductCode(e.target.value)}\r\n          onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\r\n        />\r\n        <Button onClick={handleSearch} disabled={loading}>\r\n          <MagnifyingGlassIcon className=\"h-4 w-4\" />\r\n        </Button>\r\n      </div>\r\n      \r\n      {productData && (\r\n        <div className=\"p-3 bg-gray-50 rounded-lg\">\r\n          <h4 className=\"font-medium\">{productData.code}</h4>\r\n          <p className=\"text-sm text-gray-600\">{productData.description}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// 簡化的供應商更新 Widget\r\nconst SupplierUpdateWidget: React.FC<{\r\n  config: AdminWidgetConfig;\r\n  timeFrame: TimeFrame;\r\n  theme: string;\r\n}> = ({ config, timeFrame, theme }) => {\r\n  return (\r\n    <div className=\"text-center text-gray-500\">\r\n      <p>供應商更新功能</p>\r\n    </div>\r\n  );\r\n};\r\n\r\n// 簡化的警報 Widget\r\nconst AlertsWidget: React.FC<{ data: DatabaseRecord[] }> = ({ data }) => {\r\n  const alerts = data || [];\r\n  \r\n  return (\r\n    <div className=\"space-y-2\">\r\n      {alerts.length === 0 ? (\r\n        <div className=\"text-center text-gray-500 py-4\">\r\n          暫無警報\r\n        </div>\r\n      ) : (\r\n        alerts.map((alert: any, index: number) => (\r\n          <div key={index} className=\"p-2 bg-yellow-50 border border-yellow-200 rounded text-sm\">\r\n            {(alert as { message: string }).message || `警報 ${index + 1}`}\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// 簡化的預覽 Widget\r\nconst PreviewWidget: React.FC<{ config: AdminWidgetConfig }> = ({ config }) => {\r\n  return (\r\n    <div className=\"text-center text-gray-500\">\r\n      <p>預覽功能</p>\r\n    </div>\r\n  );\r\n};\r\n\r\n// 簡化的報告生成器 Widget\r\nconst ReportGeneratorWidget: React.FC<{\r\n  config: AdminWidgetConfig;\r\n  timeFrame: TimeFrame;\r\n}> = ({ config, timeFrame }) => {\r\n  return (\r\n    <div className=\"text-center text-gray-500\">\r\n      <p>報告生成器</p>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Export AdminWidgetRenderer with React.memo\r\nexport const AdminWidgetRenderer = React.memo(AdminWidgetRendererComponent, (prevProps, nextProps) => {\r\n  // 自定義比較函數\r\n  return (\r\n    JSON.stringify(prevProps.config) === JSON.stringify(nextProps.config) &&\r\n    prevProps.theme === nextProps.theme &&\r\n    JSON.stringify(prevProps.timeFrame) === JSON.stringify(nextProps.timeFrame) &&\r\n    prevProps.index === nextProps.index &&\r\n    prevProps.delay === nextProps.delay\r\n  );\r\n});\r\n\r\nAdminWidgetRenderer.displayName = \"AdminWidgetRenderer\";","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/AnalysisLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/ChartWidgetRenderer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/ChartWrapper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/CustomThemeLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/KeyboardNavigableGrid.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1818,1821],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1818,1821],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/display-name","severity":2,"message":"Component definition is missing display name","line":74,"column":10,"nodeType":"CallExpression","messageId":"noDisplayName","endLine":86,"endColumn":5},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1868,1871],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1868,1871],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * KeyboardNavigableGrid Component\n * 為 Dashboard widgets 提供鍵盤導航功能\n */\n\n'use client';\n\nimport React, { useRef, useEffect, ReactNode } from 'react';\nimport { useDirectionalNavigation } from '@/lib/accessibility';\nimport { cn } from '@/lib/utils';\n\ninterface KeyboardNavigableGridProps {\n  children: ReactNode;\n  className?: string;\n  gridColumns?: number;\n  'aria-label'?: string;\n}\n\nexport function KeyboardNavigableGrid({\n  children,\n  className,\n  gridColumns = 8, // 根據 adminDashboardLayouts 的預設網格列數\n  'aria-label': ariaLabel = 'Dashboard widgets',\n}: KeyboardNavigableGridProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  \n  // 使用方向導航 hook\n  const {\n    currentIndex,\n    moveToIndex,\n  } = useDirectionalNavigation({\n    containerRef,\n    itemSelector: '[data-widget-focusable=\"true\"]',\n    columns: gridColumns,\n    wrap: true,\n  });\n  \n  // 添加焦點指示器\n  useEffect(() => {\n    const updateFocusIndicator = () => {\n      const widgets = containerRef.current?.querySelectorAll('[data-widget-focusable=\"true\"]');\n      widgets?.forEach((widget, index) => {\n        if (index === currentIndex) {\n          widget.classList.add('ring-2', 'ring-blue-500', 'ring-offset-2');\n          widget.setAttribute('tabindex', '0');\n        } else {\n          widget.classList.remove('ring-2', 'ring-blue-500', 'ring-offset-2');\n          widget.setAttribute('tabindex', '-1');\n        }\n      });\n    };\n    \n    updateFocusIndicator();\n  }, [currentIndex]);\n  \n  return (\n    <div\n      ref={containerRef}\n      className={cn('relative', className)}\n      role=\"grid\"\n      aria-label={ariaLabel}\n      id=\"dashboard-widgets\"\n    >\n      {children}\n    </div>\n  );\n}\n\n/**\n * KeyboardNavigableWidget HOC\n * 包裝單個 widget 以支援鍵盤導航\n */\nexport function makeWidgetKeyboardNavigable(WrappedComponent: React.ComponentType<any>) {\n  return React.forwardRef<HTMLDivElement, any>((props, ref) => {\n    return (\n      <div\n        ref={ref}\n        data-widget-focusable=\"true\"\n        tabIndex={-1}\n        className=\"focus:outline-none\"\n        role=\"gridcell\"\n      >\n        <WrappedComponent {...props} />\n      </div>\n    );\n  });\n}\n\nexport default KeyboardNavigableGrid;","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/LazyWidgetLoader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/ListWidgetRenderer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/StatsWidgetRenderer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/StockManagementLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/SystemLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/UnifiedWidgetLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/UniversalWidgetCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/UploadLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/UploadUpdateLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/WidgetCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/WidgetErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/WidgetTypography.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/adminDashboardLayouts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/charts/AcoOrderProgressCards.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[868,871],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[868,871],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[934,937],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[934,937],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState, useEffect, useMemo } from 'react';\r\nimport { motion } from 'framer-motion';\r\n// Migrated to REST API - GraphQL hooks removed\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { AlertCircle, CheckCircle, ClipboardList } from 'lucide-react';\r\nimport { restRequest } from '@/lib/api/unified-api-client';\r\n\r\ninterface AcoOrderProgressCard {\r\n  id: string;\r\n  title: string;\r\n  value: number;\r\n  previousValue?: number;\r\n  percentageChange?: number;\r\n  trend?: 'up' | 'down' | 'stable';\r\n  description?: string;\r\n  category?: string;\r\n  icon?: string;\r\n  color?: string;\r\n}\r\n\r\ninterface AcoOrderProgressCardsResponse {\r\n  cards: AcoOrderProgressCard[];\r\n  totalCards: number;\r\n  dateRange?: string;\r\n  lastUpdated: string;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\ninterface AcoOrderProgressCardsProps {\r\n  timeFrame?: any;\r\n  useGraphQL?: boolean;\r\n}\r\n\r\nexport default function AcoOrderProgressCards({ timeFrame, useGraphQL = false }: AcoOrderProgressCardsProps) {\r\n  const [data, setData] = useState<AcoOrderProgressCardsResponse | null>(null);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n        \r\n        const response = await restRequest<AcoOrderProgressCardsResponse>(\r\n          'GET',\r\n          '/analysis/aco-order-progress-cards',\r\n          undefined,\r\n          {\r\n            startDate: timeFrame?.startDate,\r\n            endDate: timeFrame?.endDate,\r\n            warehouse: timeFrame?.warehouse,\r\n          }\r\n        );\r\n\r\n        if (response.success && response.data) {\r\n          setData(response.data);\r\n        } else {\r\n          setError(response.error || 'Failed to fetch data');\r\n        }\r\n      } catch (err) {\r\n        setError(err instanceof Error ? (err as { message: string }).message : 'Unknown error');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n    \r\n    // Poll every 5 minutes\r\n    const interval = setInterval(fetchData, 300000);\r\n    \r\n    return () => clearInterval(interval);\r\n  }, [timeFrame]);\r\n\r\n  const displayCards = useMemo(() => {\r\n    if (!data?.cards) return [];\r\n    \r\n    // Format cards for display\r\n    return data.cards.map((card) => ({\r\n      ...card,\r\n      completionPercentage: card.value,\r\n      orderRef: card.title.replace('Order ', ''),\r\n    }));\r\n  }, [data]);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className='space-y-3'>\r\n        {[...Array(3)].map((_, i) => (\r\n          <Skeleton key={i} className='h-32 w-full bg-slate-700/50' />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Alert variant='destructive' className='border-red-500/50 bg-red-900/20'>\r\n        <AlertCircle className='h-4 w-4' />\r\n        <AlertDescription className='text-red-300'>\r\n          Failed to load order data: {error}\r\n        </AlertDescription>\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  if (displayCards.length === 0) {\r\n    return (\r\n      <div className='py-8 text-center'>\r\n        <CheckCircle className='mx-auto mb-3 h-12 w-12 text-green-500' />\r\n        <p className='text-slate-400'>All ACO orders completed</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className='custom-scrollbar max-h-[600px] space-y-4 overflow-y-auto pr-2'>\r\n      {displayCards.map((card, index) => {\r\n        const completionPercentage = Math.round(card.completionPercentage);\r\n        const trendColor = card.trend === 'up' ? 'text-green-400' : \r\n                          card.trend === 'down' ? 'text-red-400' : 'text-slate-400';\r\n        \r\n        return (\r\n          <motion.div\r\n            key={card.id}\r\n            initial={{ opacity: 0, x: -20 }}\r\n            animate={{ opacity: 1, x: 0 }}\r\n            transition={{ delay: index * 0.1 }}\r\n            className={`rounded-lg border border-slate-600/30 bg-slate-700/30 p-4 transition-all duration-300 hover:border-orange-500/30 ${card.color ? `border-${card.color}-500/20` : ''}`}\r\n          >\r\n            <div className='mb-3 flex items-center justify-between'>\r\n              <h3 className='flex items-center gap-2 text-lg font-semibold text-orange-300'>\r\n                <ClipboardList className='h-5 w-5' />\r\n                {card.title}\r\n              </h3>\r\n              <div className='flex items-center gap-3'>\r\n                {card.description && (\r\n                  <span className='text-sm text-slate-400'>\r\n                    {card.description}\r\n                  </span>\r\n                )}\r\n                <div className='rounded-lg border border-orange-400/30 bg-orange-500/20 px-3 py-1 text-sm font-medium text-orange-300'>\r\n                  {completionPercentage}%\r\n                </div>\r\n                {card.percentageChange && (\r\n                  <div className={`text-xs ${trendColor}`}>\r\n                    {card.percentageChange > 0 ? '+' : ''}{card.percentageChange.toFixed(1)}%\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Progress bar */}\r\n            <div className='mb-4 h-2 w-full rounded-full bg-slate-600/50'>\r\n              <motion.div\r\n                className='h-2 rounded-full bg-gradient-to-r from-orange-500 to-amber-500'\r\n                initial={{ width: 0 }}\r\n                animate={{ width: `${completionPercentage}%` }}\r\n                transition={{ duration: 0.8, ease: 'easeOut' }}\r\n              />\r\n            </div>\r\n\r\n            {/* Card details */}\r\n            <div className='grid grid-cols-1 gap-3 md:grid-cols-2 lg:grid-cols-3'>\r\n              <div className='rounded-lg border border-slate-600/20 bg-slate-800/50 p-3'>\r\n                <div className='mb-2 flex items-center justify-between'>\r\n                  <span className='font-medium text-slate-200'>Value</span>\r\n                  <span className='text-xs text-slate-400'>{card.value}</span>\r\n                </div>\r\n                {card.previousValue && (\r\n                  <div className='mb-2 text-sm text-slate-400'>\r\n                    Previous: {card.previousValue}\r\n                  </div>\r\n                )}\r\n                <div className='h-1 w-full rounded-full bg-slate-600/50'>\r\n                  <motion.div\r\n                    className='h-1 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500'\r\n                    initial={{ width: 0 }}\r\n                    animate={{ width: `${completionPercentage}%` }}\r\n                    transition={{ duration: 0.8, ease: 'easeOut', delay: 0.2 + index * 0.1 }}\r\n                  />\r\n                </div>\r\n              </div>\r\n              \r\n              {card.category && (\r\n                <div className='rounded-lg border border-slate-600/20 bg-slate-800/50 p-3'>\r\n                  <div className='mb-2 flex items-center justify-between'>\r\n                    <span className='font-medium text-slate-200'>Category</span>\r\n                  </div>\r\n                  <div className='text-sm text-slate-400'>\r\n                    {card.category}\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </motion.div>\r\n        );\r\n      })}\r\n\r\n      <style jsx>{`\r\n        .custom-scrollbar::-webkit-scrollbar {\r\n          width: 6px;\r\n        }\r\n\r\n        .custom-scrollbar::-webkit-scrollbar-track {\r\n          background: #374151;\r\n          border-radius: 3px;\r\n        }\r\n\r\n        .custom-scrollbar::-webkit-scrollbar-thumb {\r\n          background: #6b7280;\r\n          border-radius: 3px;\r\n        }\r\n\r\n        .custom-scrollbar::-webkit-scrollbar-thumb:hover {\r\n          background: #9ca3af;\r\n        }\r\n      `}</style>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/charts/AcoOrderProgressChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[859,862],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[859,862],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useMemo } from 'react';\r\nimport useSWR from 'swr';\r\n\r\n// Recharts components - using unified dynamic import module\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  Cell\r\n} from '@/lib/recharts-dynamic';\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { AlertCircle } from 'lucide-react';\r\nimport { \r\n  brandColors, \r\n  widgetColors, \r\n  semanticColors,\r\n  getWidgetCategoryColor \r\n} from '@/lib/design-system/colors';\r\nimport { textClasses, getTextClass } from '@/lib/design-system/typography';\r\nimport { spacing, widgetSpacing, spacingUtilities } from '@/lib/design-system/spacing';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface AcoOrderProgressChartProps {\r\n  timeFrame?: any;\r\n}\r\n\r\ninterface ChartDataPoint {\r\n  date: string;\r\n  value: number;\r\n  previousValue?: number;\r\n  metadata?: {\r\n    orderCount: number;\r\n    completedCount: number;\r\n  };\r\n}\r\n\r\ninterface ChartConfig {\r\n  type: string;\r\n  title: string;\r\n  xAxisLabel: string;\r\n  yAxisLabel: string;\r\n  colors: string[];\r\n  height: number;\r\n}\r\n\r\ninterface AcoOrderProgressChartResponse {\r\n  data: ChartDataPoint[];\r\n  config: ChartConfig;\r\n  totalDataPoints: number;\r\n  dateRange: string;\r\n  summary: {\r\n    average: number;\r\n    minimum: number;\r\n    maximum: number;\r\n    trend: 'increasing' | 'decreasing' | 'stable';\r\n  };\r\n  lastUpdated: string;\r\n  queryParams: {\r\n    timeframe: string;\r\n    metric: string;\r\n    warehouse: string;\r\n    status: string;\r\n    customerRef: string;\r\n  };\r\n}\r\n\r\nexport default function AcoOrderProgressChart({ timeFrame }: AcoOrderProgressChartProps) {\r\n  // Fetcher function for SWR\r\n  const fetcher = async (url: string) => {\r\n    const token = localStorage.getItem('authToken') || sessionStorage.getItem('authToken');\r\n    const response = await fetch(url, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`API Error: ${response.status}`);\r\n    }\r\n    \r\n    return response.json();\r\n  };\r\n\r\n  // Use SWR for ACO order progress chart data\r\n  const {\r\n    data: chartApiData,\r\n    error,\r\n    isLoading\r\n  } = useSWR<AcoOrderProgressChartResponse>(\r\n    '/api/v1/analysis/aco-order-progress-chart?timeframe=daily&metric=completion_rate&limit=10',\r\n    fetcher,\r\n    {\r\n      refreshInterval: 300000, // 5 minutes\r\n      revalidateOnFocus: false\r\n    }\r\n  );\r\n\r\n  const chartData = useMemo(() => {\r\n    if (!chartApiData?.data) return [];\r\n\r\n    return chartApiData.data.map((point, index) => ({\r\n      orderRef: `Day ${index + 1}`,\r\n      date: point.date,\r\n      completed: point.metadata?.completedCount || 0,\r\n      remaining: (point.metadata?.orderCount || 0) - (point.metadata?.completedCount || 0),\r\n      total: point.metadata?.orderCount || 0,\r\n      completionRate: Math.round(point.value),\r\n    }));\r\n  }, [chartApiData]);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className='flex h-full w-full flex-col gap-4'>\r\n        <Skeleton className='h-8 w-48' />\r\n        <Skeleton className='flex-1' />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Alert variant='destructive'>\r\n        <AlertCircle className='h-4 w-4' />\r\n        <AlertDescription>Failed to load order data: {(error as { message: string }).message}</AlertDescription>\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  const getBarColor = (completionRate: number) => {\r\n    if (completionRate >= 80) return semanticColors.success.DEFAULT;\r\n    if (completionRate >= 50) return semanticColors.warning.DEFAULT;\r\n    return semanticColors.error.DEFAULT;\r\n  };\r\n\r\n  return (\r\n    <div className='flex h-full w-full flex-col'>\r\n      <div className={cn(spacingUtilities.margin.bottom.medium)}>\r\n        <p className={cn(textClasses['body-small'], 'text-muted-foreground')}>\r\n          {chartApiData?.config?.title || 'ACO Order Completion Progress'}\r\n        </p>\r\n        {chartApiData?.summary && (\r\n          <p className={cn(textClasses['label-small'], 'text-muted-foreground mt-1')}>\r\n            Average: {chartApiData.summary.average.toFixed(1)}% • Trend: {chartApiData.summary.trend} • {chartApiData.dateRange}\r\n          </p>\r\n        )}\r\n      </div>\r\n\r\n      <div className='flex-1'>\r\n        <ResponsiveContainer width='100%' height='100%'>\r\n          <BarChart data={chartData} margin={{ top: 20, right: 30, left: 20, bottom: 60 }}>\r\n            <CartesianGrid strokeDasharray='3 3' opacity={0.3} />\r\n            <XAxis\r\n              dataKey='orderRef'\r\n              angle={-45}\r\n              textAnchor='end'\r\n              height={80}\r\n              fontSize={12}\r\n            />\r\n            <YAxis\r\n              label={{\r\n                value: chartApiData?.config?.yAxisLabel || 'Completion Rate (%)',\r\n                angle: -90,\r\n                position: 'insideLeft',\r\n                style: { fontSize: '12px' },\r\n              }}\r\n              domain={[0, 100]}\r\n            />\r\n            <Tooltip\r\n              content={({ active, payload }) => {\r\n                if (active && payload && payload[0]) {\r\n                  const data = payload[0].payload;\r\n                  return (\r\n                    <div className={cn(\r\n                      'rounded-lg border bg-card/95 p-3 shadow-lg backdrop-blur-sm',\r\n                      'border-border'\r\n                    )}>\r\n                      <p className={cn(textClasses['body-small'], 'font-medium text-foreground')}>{data.orderRef}</p>\r\n                      <p className={cn(textClasses['label-small'], 'text-muted-foreground')}>Product: {data.code}</p>\r\n                      <p className={cn(textClasses['label-small'], 'text-foreground')}>\r\n                        Completed: {data.completed}/{data.total}\r\n                      </p>\r\n                      <p className={cn(textClasses['label-small'], 'font-medium text-primary')}>\r\n                        Completion Rate: {data.completionRate}%\r\n                      </p>\r\n                    </div>\r\n                  );\r\n                }\r\n                return null;\r\n              }}\r\n            />\r\n            <Legend\r\n              content={() => (\r\n                <div className={cn(\r\n                  'mt-4 flex justify-center gap-4'\r\n                )}>\r\n                  <div className={cn('flex items-center gap-2')}>\r\n                    <div className={cn('h-3 w-3 rounded')} style={{ backgroundColor: semanticColors.success.DEFAULT }} />\r\n                    <span className={cn(textClasses['label-small'], 'text-foreground')}>≥80%</span>\r\n                  </div>\r\n                  <div className={cn('flex items-center gap-2')}>\r\n                    <div className={cn('h-3 w-3 rounded')} style={{ backgroundColor: semanticColors.warning.DEFAULT }} />\r\n                    <span className={cn(textClasses['label-small'], 'text-foreground')}>50-79%</span>\r\n                  </div>\r\n                  <div className={cn('flex items-center gap-2')}>\r\n                    <div className={cn('h-3 w-3 rounded')} style={{ backgroundColor: semanticColors.error.DEFAULT }} />\r\n                    <span className={cn(textClasses['label-small'], 'text-foreground')}>&lt;50%</span>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            />\r\n            <Bar dataKey='completionRate' radius={[4, 4, 0, 0]}>\r\n              {chartData.map((entry, index) => (\r\n                <Cell key={`cell-${index}`} fill={getBarColor(entry.completionRate)} />\r\n              ))}\r\n            </Bar>\r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/charts/InventoryTurnoverAnalysis.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[880,883],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[880,883],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useMemo } from 'react';\r\n\r\n// Recharts components - using unified dynamic import module\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer\r\n} from '@/lib/recharts-dynamic';\r\n\r\n// Note: Migrated to REST API - GraphQL hooks removed\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { AlertCircle } from 'lucide-react';\r\nimport { \r\n  brandColors, \r\n  widgetColors, \r\n  semanticColors,\r\n  getWidgetCategoryColor \r\n} from '@/lib/design-system/colors';\r\nimport { textClasses, getTextClass } from '@/lib/design-system/typography';\r\nimport { componentSpacing, spacingUtilities } from '@/lib/design-system/spacing';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface InventoryTurnoverAnalysisProps {\r\n  timeFrame?: any;\r\n}\r\n\r\nexport default function InventoryTurnoverAnalysis({ timeFrame }: InventoryTurnoverAnalysisProps) {\r\n  // Feature flag removed - using REST API only\r\n\r\n  // Temporary disabled - migrated to REST API\r\n  const data = null;\r\n  const loading = false;\r\n  const error = null;\r\n\r\n  const chartData = useMemo(() => {\r\n    // TODO: Replace GraphQL - migrated to REST API\r\n    return [];\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex h-full w-full flex-col space-y-4\">\r\n        <Skeleton className=\"h-6 w-48\" />\r\n        <Skeleton className=\"h-[300px] w-full\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Alert variant=\"destructive\">\r\n        <AlertCircle className=\"h-4 w-4\" />\r\n        <AlertDescription>Failed to load turnover data: {(error as { message: string }).message}</AlertDescription>\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex h-full w-full flex-col\">\r\n      <div className={cn(spacingUtilities.margin.bottom.medium)}>\r\n        <p className={cn(textClasses['body-small'], 'text-muted-foreground')}>\r\n          Inventory Turnover = Order Demand ÷ Current Inventory (higher ratio indicates higher\r\n          demand)\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"flex-1\">\r\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n          <LineChart data={chartData}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"code\" />\r\n            <YAxis />\r\n            <Tooltip\r\n              content={({ active, payload }) => {\r\n                if (active && payload && payload[0]) {\r\n                  const data = payload[0].payload;\r\n                  return (\r\n                    <div className={cn(\r\n                      'rounded-lg border bg-card/95 p-3 shadow-lg backdrop-blur-sm',\r\n                      'border-border'\r\n                    )}>\r\n                      <p className={cn(textClasses['body-small'], 'font-medium text-foreground')}>{data.code}</p>\r\n                      <div className={cn('mt-2 space-y-1')}>\r\n                        <p className={cn(textClasses['label-small'])} style={{ color: widgetColors.charts.text }}>Inventory: {data.inventory}</p>\r\n                        <p className={cn(textClasses['label-small'])} style={{ color: semanticColors.warning.DEFAULT }}>Demand: {data.demand}</p>\r\n                        <p className={cn(textClasses['label-small'], 'font-medium text-foreground')}>Turnover Rate: {data.turnoverRatio}</p>\r\n                        <p className={cn(textClasses['label-small'], 'text-muted-foreground')}>\r\n                          Status:{' '}\r\n                          {(data as { status: string }).status === 'high-demand'\r\n                            ? 'High Demand'\r\n                            : (data as { status: string }).status === 'overstocked'\r\n                              ? 'Overstocked'\r\n                              : 'Balanced'}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                }\r\n                return null;\r\n              }}\r\n            />\r\n            <Line\r\n              type=\"monotone\"\r\n              dataKey=\"turnoverRatio\"\r\n              stroke={brandColors.primary[500]}\r\n              strokeWidth={2}\r\n              dot={{ r: 4 }}\r\n            />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n\r\n      <div className={cn(\r\n        'mt-4 grid grid-cols-3 gap-4'\r\n      )}>\r\n        <div className=\"text-center\">\r\n          <div className={cn(textClasses['label-small'], 'font-medium')} style={{ color: semanticColors.error.DEFAULT }}>High Demand Products</div>\r\n          <div className={cn(textClasses['label-small'], 'text-foreground')}>{chartData.filter((d: Record<string, unknown>) => (d as { status: string }).status === 'high-demand').length} items</div>\r\n        </div>\r\n        <div className=\"text-center\">\r\n          <div className={cn(textClasses['label-small'], 'font-medium')} style={{ color: semanticColors.success.DEFAULT }}>Balanced Supply</div>\r\n          <div className={cn(textClasses['label-small'], 'text-foreground')}>{chartData.filter((d: Record<string, unknown>) => (d as { status: string }).status === 'balanced').length} items</div>\r\n        </div>\r\n        <div className=\"text-center\">\r\n          <div className={cn(textClasses['label-small'], 'font-medium')} style={{ color: semanticColors.warning.DEFAULT }}>Overstocked</div>\r\n          <div className={cn(textClasses['label-small'], 'text-foreground')}>{chartData.filter((d: Record<string, unknown>) => (d as { status: string }).status === 'overstocked').length} items</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/charts/RealTimeInventoryMap.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1063,1066],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1063,1066],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":131,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4413,4416],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4413,4416],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useMemo } from 'react';\r\n// Note: Migrated to REST API - GraphQL hooks removed\r\n// Type removed with GraphQL migration\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { AlertCircle, Package } from 'lucide-react';\r\n\r\ninterface LocationData {\r\n  name: string;\r\n  key: string;\r\n  row: number;\r\n  col: number;\r\n  span?: number;\r\n}\r\n\r\nconst WAREHOUSE_LOCATIONS: LocationData[] = [\r\n  { name: 'Await Area', key: 'await', row: 1, col: 1 },\r\n  { name: 'Await GRN', key: 'await_grn', row: 1, col: 2 },\r\n  { name: 'Back Car Park', key: 'backcarpark', row: 1, col: 3, span: 2 },\r\n  { name: 'Bulk Area', key: 'bulk', row: 2, col: 1, span: 2 },\r\n  { name: 'Fold Area', key: 'fold', row: 2, col: 3 },\r\n  { name: 'Injection Area', key: 'injection', row: 2, col: 4 },\r\n  { name: 'Pipeline', key: 'pipeline', row: 3, col: 1, span: 2 },\r\n  { name: 'Pre-book Area', key: 'prebook', row: 3, col: 3, span: 2 },\r\n];\r\n\r\ninterface RealTimeInventoryMapProps {\r\n  timeFrame?: any;\r\n}\r\n\r\nexport default function RealTimeInventoryMap({ timeFrame }: RealTimeInventoryMapProps) {\r\n  // Feature flag removed - using REST API only\r\n\r\n// Migrated to REST API - GraphQL removed\r\n  const data = null;\r\n  const loading = false;\r\n  const error = null;\r\n\r\n  const locationStats = useMemo(() => {\r\n    // REST API implementation needed - return empty map for now\r\n\r\n    const stats = new Map<string, { total: number; products: Set<string> }>();\r\n\r\n    // Initialize all locations\r\n    WAREHOUSE_LOCATIONS.forEach(loc => {\r\n      stats.set(loc.key, { total: 0, products: new Set() });\r\n    });\r\n\r\n    // Calculate totals for each location\r\n    // REST API implementation needed - placeholder for data processing\r\n    //   if (!edge?.node) return;\r\n    //   const node = edge.node;\r\n    //   \r\n    //   WAREHOUSE_LOCATIONS.forEach(loc => {\r\n    //     // Type assertion for dynamic property access\r\n    //     const qty = Number(node[loc.key as keyof typeof node]) || 0;\r\n    //     if (qty > 0) {\r\n    //       const current = stats.get(loc.key)!;\r\n    //       current.total += qty;\r\n    //       if (node.product_code) {\r\n    //         current.products.add(node.product_code); // Track unique products\r\n    //       }\r\n    //     }\r\n    //   });\r\n    // });\r\n\r\n    // Convert Set to count for display\r\n    const displayStats = new Map<string, { total: number; products: number }>();\r\n    stats.forEach((value, key) => {\r\n      displayStats.set(key, {\r\n        total: value.total,\r\n        products: value.products.size,\r\n      });\r\n    });\r\n\r\n    return displayStats;\r\n  }, []);\r\n\r\n  // Feature flag removed - using REST API only\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className='flex h-full w-full flex-col gap-4'>\r\n        <Skeleton className='h-8 w-48' />\r\n        <Skeleton className='flex-1' />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Alert variant='destructive'>\r\n        <AlertCircle className='h-4 w-4' />\r\n        <AlertDescription>Failed to load inventory location data: {(error as { message: string }).message}</AlertDescription>\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  // Calculate max for color scaling\r\n  const maxInventory = Math.max(...Array.from(locationStats.values()).map((s: Record<string, unknown>) => s.total), 1);\r\n\r\n  const getLocationColor = (total: number) => {\r\n    const intensity = total / maxInventory;\r\n    if (intensity === 0) return 'rgba(200, 200, 200, 0.1)';\r\n    if (intensity < 0.2) return 'rgba(34, 197, 94, 0.2)';\r\n    if (intensity < 0.4) return 'rgba(34, 197, 94, 0.4)';\r\n    if (intensity < 0.6) return 'rgba(251, 146, 60, 0.6)';\r\n    if (intensity < 0.8) return 'rgba(239, 68, 68, 0.7)';\r\n    return 'rgba(239, 68, 68, 0.9)';\r\n  };\r\n\r\n  const getUtilization = (total: number) => {\r\n    const percentage = (total / maxInventory) * 100;\r\n    return Math.round(percentage);\r\n  };\r\n\r\n  return (\r\n    <div className='flex h-full w-full flex-col'>\r\n      <div className='mb-4'>\r\n        <p className='text-sm text-white/60'>\r\n          Real-time warehouse inventory distribution by location\r\n        </p>\r\n      </div>\r\n\r\n      <div className='flex flex-1 flex-col'>\r\n        {/* Warehouse Grid */}\r\n        <div className='flex-1 p-4'>\r\n          <div className='warehouse-grid grid h-full grid-cols-4 grid-rows-3 gap-4'>\r\n            {WAREHOUSE_LOCATIONS.map((location: any) => {\r\n              const stats = locationStats.get(location.key) || { total: 0, products: 0 };\r\n              const utilization = getUtilization(stats.total);\r\n\r\n              return (\r\n                <div\r\n                  key={location.key}\r\n                  className={`location-block relative cursor-pointer rounded-lg border-2 border-border/50 p-4 transition-all hover:scale-105 hover:shadow-lg ${\r\n                    location.span ? `col-span-${location.span}` : ''\r\n                  }`}\r\n                  style={{\r\n                    backgroundColor: getLocationColor(stats.total),\r\n                    gridRow: location.row,\r\n                    gridColumn: `${location.col} / ${location.col + (location.span || 1)}`,\r\n                  }}\r\n                >\r\n                  {/* Location Name */}\r\n                  <h3 className='mb-2 text-sm font-medium text-white'>{location.name}</h3>\r\n\r\n                  {/* Stats */}\r\n                  <div className='space-y-1'>\r\n                    <div className='flex items-center gap-2'>\r\n                      <Package className='h-4 w-4 text-white/50' />\r\n                      <span className='text-xs text-white/70'>{stats.products} products</span>\r\n                    </div>\r\n                    <div className='text-2xl font-bold text-white'>\r\n                      {stats.total.toLocaleString()}\r\n                    </div>\r\n                    <div className='text-xs text-white/70'>items in stock</div>\r\n                  </div>\r\n\r\n                  {/* Utilization Bar */}\r\n                  <div className='absolute bottom-2 left-2 right-2'>\r\n                    <div className='h-1 overflow-hidden rounded-full bg-gray-200'>\r\n                      <div\r\n                        className='h-full bg-gradient-to-r from-blue-500 to-purple-500 transition-all'\r\n                        style={{ width: `${utilization}%` }}\r\n                      />\r\n                    </div>\r\n                    <div className='mt-1 text-center text-xs text-white/70'>\r\n                      {utilization}% utilization\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Visual Indicator */}\r\n                  {utilization > 80 && (\r\n                    <div className='absolute right-2 top-2'>\r\n                      <div className='h-2 w-2 animate-pulse rounded-full bg-red-500' />\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Legend and Summary */}\r\n        <div className='border-t px-4 pt-4'>\r\n          <div className='flex items-center justify-between'>\r\n            {/* Color Legend */}\r\n            <div className='flex items-center gap-4 text-xs'>\r\n              <span className='font-medium text-white/70'>Density Indicator:</span>\r\n              <div className='flex items-center gap-2'>\r\n                <div\r\n                  className='h-4 w-4 rounded'\r\n                  style={{ backgroundColor: 'rgba(200, 200, 200, 0.1)' }}\r\n                />\r\n                <span className='text-white/60'>Empty</span>\r\n              </div>\r\n              <div className='flex items-center gap-2'>\r\n                <div\r\n                  className='h-4 w-4 rounded'\r\n                  style={{ backgroundColor: 'rgba(34, 197, 94, 0.4)' }}\r\n                />\r\n                <span className='text-white/60'>Normal</span>\r\n              </div>\r\n              <div className='flex items-center gap-2'>\r\n                <div\r\n                  className='h-4 w-4 rounded'\r\n                  style={{ backgroundColor: 'rgba(251, 146, 60, 0.6)' }}\r\n                />\r\n                <span className='text-white/60'>High</span>\r\n              </div>\r\n              <div className='flex items-center gap-2'>\r\n                <div\r\n                  className='h-4 w-4 rounded'\r\n                  style={{ backgroundColor: 'rgba(239, 68, 68, 0.9)' }}\r\n                />\r\n                <span className='text-white/60'>Crowded</span>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Total Summary */}\r\n            <div className='text-sm'>\r\n              <span className='text-white/60'>Total Inventory:</span>\r\n              <span className='ml-1 font-bold'>\r\n                {Array.from(locationStats.values())\r\n                  .reduce((sum, s) => sum + s.total, 0)\r\n                  .toLocaleString()}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Custom Styles */}\r\n      <style jsx>{`\r\n        .warehouse-grid {\r\n          min-height: 300px;\r\n        }\r\n\r\n        .location-block {\r\n          backdrop-filter: blur(8px);\r\n          background-blend-mode: overlay;\r\n        }\r\n\r\n        @media (max-width: 768px) {\r\n          .warehouse-grid {\r\n            grid-template-columns: repeat(2, 1fr);\r\n            grid-template-rows: repeat(6, 1fr);\r\n          }\r\n        }\r\n      `}</style>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/charts/StocktakeAccuracyTrend.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[556,559],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[556,559],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useMemo } from 'react';\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  Area,\r\n  AreaChart,\r\n} from '@/lib/recharts-dynamic';\r\n// Note: Migrated to REST API - GraphQL hooks removed\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { AlertCircle } from 'lucide-react';\r\nimport { format, parseISO } from 'date-fns';\r\n\r\ninterface StocktakeAccuracyTrendProps {\r\n  timeFrame?: any;\r\n}\r\n\r\nexport default function StocktakeAccuracyTrend({ timeFrame }: StocktakeAccuracyTrendProps) {\r\n  // Temporary disabled - migrated to REST API\r\n  const data = null;\r\n  const loading = false;\r\n  const error = null;\r\n\r\n  const chartData = useMemo(() => {\r\n// TODO: Replace GraphQL -     // TODO: Replace GraphQL - if (!data?.stocktake_daily_summaryCollection?.edges) return [];\r\n\r\n    // Group by date and calculate accuracy\r\n    const dateMap = new Map<string, { counted: number; expected: number; products: number }>();\r\n\r\n// TODO: Replace GraphQL -     // TODO: Replace GraphQL - data.stocktake_daily_summaryCollection.edges.forEach(({ node }) => {\r\n    //   if (!node?.count_date) return;\r\n    //   \r\n    //   const date = node.count_date;\r\n    //   const existing = dateMap.get(date) || { counted: 0, expected: 0, products: 0 };\r\n    //\r\n    //   dateMap.set(date, {\r\n    //     counted: existing.counted + (node.total_counted || 0),\r\n    //     expected: existing.expected + (node.final_remain_qty || 0),\r\n    //     products: existing.products + 1,\r\n    //   });\r\n    // });\r\n\r\n    // Convert to array and calculate accuracy\r\n    return Array.from(dateMap.entries())\r\n      .map(([date, stats]) => {\r\n        const accuracy =\r\n          stats.expected > 0 ? Math.round((stats.counted / stats.expected) * 100 * 10) / 10 : 100;\r\n\r\n        return {\r\n          date: format(parseISO(date), 'MM/dd'),\r\n          fullDate: date,\r\n          accuracy: Math.min(accuracy, 100), // Cap at 100%\r\n          scanned: stats.counted,\r\n          expected: stats.expected,\r\n          discrepancy: Math.abs(stats.expected - stats.counted),\r\n          products: stats.products,\r\n        };\r\n      })\r\n      .sort((a, b) => a.fullDate.localeCompare(b.fullDate))\r\n      .slice(-30); // Last 30 days\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className='flex h-full w-full flex-col gap-4'>\r\n        <Skeleton className='h-8 w-48' />\r\n        <Skeleton className='flex-1' />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Alert variant='destructive'>\r\n        <AlertCircle className='h-4 w-4' />\r\n        <AlertDescription>Failed to load stocktake data: {(error as { message: string }).message}</AlertDescription>\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  // Calculate average accuracy\r\n  const avgAccuracy =\r\n    chartData.length > 0\r\n      ? Math.round((chartData.reduce((sum, d) => sum + d.accuracy, 0) / chartData.length) * 10) / 10\r\n      : 0;\r\n\r\n  // Calculate trend\r\n  const recentData = chartData.slice(-7);\r\n  const oldData = chartData.slice(-14, -7);\r\n  const recentAvg = recentData.reduce((sum, d) => sum + d.accuracy, 0) / recentData.length;\r\n  const oldAvg =\r\n    oldData.length > 0\r\n      ? oldData.reduce((sum, d) => sum + d.accuracy, 0) / oldData.length\r\n      : recentAvg;\r\n  const trend = recentAvg - oldAvg;\r\n\r\n  // Feature flag removed - using REST API only\r\n\r\n  return (\r\n    <div className='flex h-full w-full flex-col'>\r\n      <div className='mb-4'>\r\n        <p className='text-sm text-white/60'>Stocktake accuracy trend over the last 30 days</p>\r\n        <div className='mt-2 flex gap-4'>\r\n          <div className='text-sm'>\r\n            <span className='text-white/60'>Average Accuracy: </span>\r\n            <span className='font-medium'>{avgAccuracy}%</span>\r\n          </div>\r\n          <div className='text-sm'>\r\n            <span className='text-white/60'>Trend: </span>\r\n            <span\r\n              className={`font-medium ${trend > 0 ? 'text-green-600' : trend < 0 ? 'text-red-600' : 'text-gray-600'}`}\r\n            >\r\n              {trend > 0 ? '↑' : trend < 0 ? '↓' : '→'} {Math.abs(Math.round(trend * 10) / 10)}%\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className='flex-1'>\r\n        <ResponsiveContainer width='100%' height='100%'>\r\n          <AreaChart data={chartData} margin={{ top: 20, right: 30, left: 20, bottom: 20 }}>\r\n            <defs>\r\n              <linearGradient id='accuracyGradient' x1='0' y1='0' x2='0' y2='1'>\r\n                <stop offset='5%' stopColor='#10b981' stopOpacity={0.3} />\r\n                <stop offset='95%' stopColor='#10b981' stopOpacity={0} />\r\n              </linearGradient>\r\n              <linearGradient id='discrepancyGradient' x1='0' y1='0' x2='0' y2='1'>\r\n                <stop offset='5%' stopColor='#ef4444' stopOpacity={0.3} />\r\n                <stop offset='95%' stopColor='#ef4444' stopOpacity={0} />\r\n              </linearGradient>\r\n            </defs>\r\n            <CartesianGrid strokeDasharray='3 3' opacity={0.3} />\r\n            <XAxis dataKey='date' fontSize={12} />\r\n            <YAxis\r\n              yAxisId='left'\r\n              label={{\r\n                value: 'Accuracy Rate (%)',\r\n                angle: -90,\r\n                position: 'insideLeft',\r\n                style: { fontSize: '12px' },\r\n              }}\r\n              domain={[80, 100]}\r\n            />\r\n            <YAxis\r\n              yAxisId='right'\r\n              orientation='right'\r\n              label={{\r\n                value: 'Discrepancy Count',\r\n                angle: 90,\r\n                position: 'insideRight',\r\n                style: { fontSize: '12px' },\r\n              }}\r\n            />\r\n            <Tooltip\r\n              content={({ active, payload }) => {\r\n                if (active && payload && payload[0]) {\r\n                  const data = payload[0].payload;\r\n                  return (\r\n                    <div className='rounded-lg border bg-background/95 p-3 shadow-lg backdrop-blur-sm'>\r\n                      <p className='font-medium'>{data.fullDate}</p>\r\n                      <div className='mt-2 space-y-1'>\r\n                        <p className='text-sm text-green-600'>Accuracy: {data.accuracy}%</p>\r\n                        <p className='text-sm'>Scanned: {data.scanned}</p>\r\n                        <p className='text-sm'>Expected: {data.expected}</p>\r\n                        <p className='text-sm text-red-600'>Discrepancy: {data.discrepancy}</p>\r\n                        <p className='text-sm text-white/60'>Products: {data.products}</p>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                }\r\n                return null;\r\n              }}\r\n            />\r\n            <Legend />\r\n            <Area\r\n              yAxisId='left'\r\n              type='monotone'\r\n              dataKey='accuracy'\r\n              stroke='#10b981'\r\n              strokeWidth={2}\r\n              fill='url(#accuracyGradient)'\r\n              name='Accuracy Rate'\r\n            />\r\n            <Line\r\n              yAxisId='right'\r\n              type='monotone'\r\n              dataKey='discrepancy'\r\n              stroke='#ef4444'\r\n              strokeWidth={2}\r\n              name='Discrepancy Count'\r\n              dot={{ r: 3 }}\r\n            />\r\n            {/* Target line at 95% */}\r\n            <Line\r\n              yAxisId='left'\r\n              type='monotone'\r\n              dataKey={() => 95}\r\n              stroke='#6366f1'\r\n              strokeWidth={1}\r\n              strokeDasharray='5 5'\r\n              name='Target (95%)'\r\n              dot={false}\r\n            />\r\n          </AreaChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n\r\n      <div className='mt-4 grid grid-cols-3 gap-4 border-t pt-4 text-xs'>\r\n        <div className='text-center'>\r\n          <div className='text-2xl font-bold text-green-600'>\r\n            {chartData.filter((d: Record<string, unknown>) => d.accuracy >= 95).length}\r\n          </div>\r\n          <div className='text-white/60'>Days Meeting Target (≥95%)</div>\r\n        </div>\r\n        <div className='text-center'>\r\n          <div className='text-2xl font-bold text-amber-600'>\r\n            {chartData.filter((d: Record<string, unknown>) => d.accuracy >= 90 && d.accuracy < 95).length}\r\n          </div>\r\n          <div className='text-white/60'>Near Target (90-94%)</div>\r\n        </div>\r\n        <div className='text-center'>\r\n          <div className='text-2xl font-bold text-red-600'>\r\n            {chartData.filter((d: Record<string, unknown>) => d.accuracy < 90).length}\r\n          </div>\r\n          <div className='text-white/60'>Needs Improvement (&lt;90%)</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/charts/TopProductsInventoryChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[857,860],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[857,860],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useMemo } from 'react';\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  Cell,\r\n} from '@/lib/recharts-dynamic';\r\n// Note: Migrated to REST API - GraphQL hooks removed\r\n// Type removed with GraphQL migration\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { AlertCircle } from 'lucide-react';\r\nimport { \r\n  brandColors, \r\n  widgetColors, \r\n  semanticColors,\r\n  getWidgetCategoryColor \r\n} from '@/lib/design-system/colors';\r\nimport { textClasses, getTextClass } from '@/lib/design-system/typography';\r\nimport { spacing, widgetSpacing, spacingUtilities } from '@/lib/design-system/spacing';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface TopProductsInventoryChartProps {\r\n  timeFrame?: any;\r\n}\r\n\r\nexport default function TopProductsInventoryChart({ timeFrame }: TopProductsInventoryChartProps) {\r\n  // Feature flag removed - using REST API only\r\n\r\n  // Temporary disabled - migrated to REST API\r\n  const data = null;\r\n  const loading = false;\r\n  const error = null;\r\n\r\n  const chartData = useMemo(() => {\r\n// TODO: Replace GraphQL -     // TODO: Replace GraphQL - if (!data?.record_inventoryCollection?.edges) return [];\r\n\r\n    // Group by product code and sum up inventories\r\n    const productMap = new Map();\r\n\r\n    // TODO: Replace GraphQL\r\n// TODO: Replace GraphQL -     // data.record_inventoryCollection.edges.forEach(({ node }: { node: NonNullable<GetTopProductsInventoryQuery['record_inventoryCollection']>['edges'][0]['node'] }) => {\r\n    //   const code = node.product_code;\r\n    //\r\n    //   if (productMap.has(code)) {\r\n    //     // Sum existing values\r\n    //     const existing = productMap.get(code);\r\n    //     existing.await += node.await || 0;\r\n    //     existing.await_grn += node.await_grn || 0;\r\n    //     existing.backcarpark += node.backcarpark || 0;\r\n    //     existing.bulk += node.bulk || 0;\r\n    //     existing.fold += node.fold || 0;\r\n    //     existing.injection += node.injection || 0;\r\n    //     existing.pipeline += node.pipeline || 0;\r\n    //     existing.prebook += node.prebook || 0;\r\n    //     existing.damage += node.damage || 0;\r\n    //   } else {\r\n    //     // Create new entry\r\n    //     productMap.set(code, {\r\n    //       code: node.product_code,\r\n    //       description: node.data_code?.description || node.product_code,\r\n    //       colour: node.data_code?.colour || 'N/A',\r\n    //       await: node.await || 0,\r\n    //       await_grn: node.await_grn || 0,\r\n    //       backcarpark: node.backcarpark || 0,\r\n    //       bulk: node.bulk || 0,\r\n    //       fold: node.fold || 0,\r\n    //       injection: node.injection || 0,\r\n    //       pipeline: node.pipeline || 0,\r\n    //       prebook: node.prebook || 0,\r\n    //       damage: node.damage || 0,\r\n    //     });\r\n    //   }\r\n    // });\r\n\r\n    // Calculate totals and prepare chart data\r\n    const productTotals = Array.from(productMap.values()).map((item: Record<string, unknown>) => {\r\n      const total =\r\n        item.await +\r\n        item.await_grn +\r\n        item.backcarpark +\r\n        item.bulk +\r\n        item.fold +\r\n        item.injection +\r\n        item.pipeline +\r\n        item.prebook +\r\n        item.damage;\r\n\r\n      return {\r\n        code: item.code,\r\n        description: item.description,\r\n        colour: item.colour,\r\n        total,\r\n        await: item.await,\r\n        bulk: item.bulk,\r\n        fold: item.fold,\r\n        damage: item.damage,\r\n        other: item.await_grn + item.backcarpark + item.injection + item.pipeline + item.prebook,\r\n      };\r\n    });\r\n\r\n    // Sort by total and take top 10\r\n    return productTotals.sort((a, b) => b.total - a.total).slice(0, 10);\r\n  }, []);\r\n\r\n  // Feature flag removed - using REST API only\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className='flex h-full w-full flex-col gap-4'>\r\n        <Skeleton className='h-8 w-48' />\r\n        <Skeleton className='flex-1' />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Alert variant='destructive'>\r\n        <AlertCircle className='h-4 w-4' />\r\n        <AlertDescription>Failed to load inventory data: {(error as { message: string }).message}</AlertDescription>\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  // Generate colors for bars using design system\r\n  const colors = [\r\n    widgetColors.charts.primary,\r\n    widgetColors.charts.secondary,\r\n    widgetColors.charts.accent,\r\n    semanticColors.warning.DEFAULT,\r\n    semanticColors.success.DEFAULT,\r\n    semanticColors.info.DEFAULT,\r\n    semanticColors.destructive.DEFAULT,\r\n    brandColors.primary[500],\r\n    brandColors.secondary[500],\r\n    widgetColors.charts.accent,\r\n  ];\r\n\r\n  return (\r\n    <div className='flex h-full w-full flex-col'>\r\n      <div className={spacingUtilities.margin.bottom.medium}>\r\n        <p className={cn(textClasses['body-small'], 'text-muted-foreground')}>Showing top 10 products by inventory quantity</p>\r\n      </div>\r\n\r\n      <div className='flex-1'>\r\n        <ResponsiveContainer width='100%' height='100%'>\r\n          <BarChart\r\n            data={chartData}\r\n            layout='horizontal'\r\n            margin={{ top: 20, right: 30, left: 100, bottom: 20 }}\r\n          >\r\n            <CartesianGrid strokeDasharray='3 3' opacity={0.3} />\r\n            <XAxis\r\n              type='number'\r\n              label={{\r\n                value: 'Inventory Quantity',\r\n                position: 'insideBottom',\r\n              }}\r\n            />\r\n            <YAxis dataKey='code' type='category' width={90} tick={{ fontSize: '12px' }} />\r\n            <Tooltip\r\n              content={({ active, payload }) => {\r\n                if (active && payload && payload[0]) {\r\n                  const data = payload[0].payload;\r\n                  return (\r\n                    <div className={cn(\r\n                      'rounded-lg border bg-card/95 p-3 shadow-lg backdrop-blur-sm',\r\n                      'border-border'\r\n                    )}>\r\n                      <p className={cn(textClasses['body-small'], 'font-medium text-foreground')}>{data.code}</p>\r\n                      <p className={cn(textClasses['label-small'], 'text-muted-foreground')}>{data.description}</p>\r\n                      <p className={cn(textClasses['label-small'], 'text-foreground')}>Color: {data.colour}</p>\r\n                      <div className={cn('mt-2', 'space-y-1')}>\r\n                        <p className={cn(textClasses['label-small'], 'font-medium text-foreground')}>Total Stock: {data.total}</p>\r\n                        <p className={cn(textClasses['label-small'], 'text-muted-foreground')}>Await: {data.await}</p>\r\n                        <p className={cn(textClasses['label-small'], 'text-muted-foreground')}>Bulk: {data.bulk}</p>\r\n                        <p className={cn(textClasses['label-small'], 'text-muted-foreground')}>Fold: {data.fold}</p>\r\n                        <p className={cn(textClasses['label-small'], 'text-muted-foreground')}>Damage: {data.damage}</p>\r\n                        <p className={cn(textClasses['label-small'], 'text-muted-foreground')}>Other: {data.other}</p>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                }\r\n                return null;\r\n              }}\r\n            />\r\n            <Bar dataKey='total' radius={[0, 8, 8, 0]}>\r\n              {chartData.map((entry, index) => (\r\n                <Cell key={`cell-${index}`} fill={colors[index % colors.length]} />\r\n              ))}\r\n            </Bar>\r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n\r\n      <div className={cn(\r\n        'mt-4 grid grid-cols-2 gap-2'\r\n      )}>\r\n        {chartData.slice(0, 4).map((item, index) => (\r\n          <div key={`legend-${item.code}-${index}`} className={cn('flex items-center gap-2')}>\r\n            <div\r\n              className='h-3 w-3 rounded'\r\n              style={{ backgroundColor: colors[index % colors.length] }}\r\n            />\r\n            <span className={cn(textClasses['label-small'], 'truncate text-foreground')}>\r\n              {item.code}: {item.total}\r\n            </span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/charts/UserActivityHeatmap.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[332,335],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[332,335],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1000,1003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1000,1003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1307,1310],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1307,1310],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3816,3819],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3816,3819],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useMemo } from 'react';\r\n// Note: Migrated to REST API - GraphQL hooks removed\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { AlertCircle } from 'lucide-react';\r\n\r\ninterface UserActivityHeatmapProps {\r\n  timeFrame?: any;\r\n}\r\n\r\nconst UserActivityHeatmap = React.memo(function UserActivityHeatmap({\r\n  timeFrame,\r\n}: UserActivityHeatmapProps) {\r\n  // Feature flag removed - using REST API only\r\n\r\n  // Use useMemo to prevent date objects from changing on every render\r\n  const variables = useMemo(() => {\r\n    const end = new Date();\r\n    const start = new Date();\r\n    start.setDate(start.getDate() - 7); // Last 7 days\r\n    return {\r\n      startDate: start.toISOString(),\r\n      endDate: end.toISOString(),\r\n    };\r\n  }, []); // Empty dependency array means dates are calculated only once\r\n\r\n  // TODO: Replace with REST API call  \r\n  const { data, loading, error } = { data: null as any, loading: false, error: null };\r\n\r\n  const heatmapData = useMemo(() => {\r\n    if (!data?.historyCollection?.edges) return [];\r\n\r\n    // Process data into hourly buckets for each user\r\n    const activityMap = new Map<string, Map<number, number>>();\r\n\r\n    data.historyCollection.edges.forEach(({ node }: any) => {\r\n      const userName = node.data_id?.name || `User ${node.uuid}`;\r\n      const hour = new Date(node.time).getHours();\r\n\r\n      if (!activityMap.has(userName)) {\r\n        activityMap.set(userName, new Map());\r\n      }\r\n\r\n      const userHours = activityMap.get(userName)!;\r\n      userHours.set(hour, (userHours.get(hour) || 0) + 1);\r\n    });\r\n\r\n    // Convert to array format and get top 10 active users\r\n    const userActivities = Array.from(activityMap.entries())\r\n      .map(([user, hours]) => {\r\n        const totalActivity = Array.from(hours.values()).reduce((sum, count) => sum + count, 0);\r\n        return { user, hours, totalActivity };\r\n      })\r\n      .sort((a, b) => b.totalActivity - a.totalActivity)\r\n      .slice(0, 10);\r\n\r\n    return userActivities;\r\n  }, [data]);\r\n\r\n  // Feature flag removed - using REST API only\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className='flex h-full w-full flex-col gap-4'>\r\n        <Skeleton className='h-8 w-48' />\r\n        <Skeleton className='flex-1' />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Alert variant='destructive'>\r\n        <AlertCircle className='h-4 w-4' />\r\n        <AlertDescription>Failed to load activity data: {(error as { message: string }).message}</AlertDescription>\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  // Generate hour labels\r\n  const hours = Array.from({ length: 24 }, (_, i) => i);\r\n\r\n  // Get max activity for color scaling\r\n  const maxActivity = Math.max(...heatmapData.flatMap(user => Array.from(user.hours.values())), 1);\r\n\r\n  const getHeatColor = (count: number) => {\r\n    const intensity = count / maxActivity;\r\n    if (intensity === 0) return 'rgba(120, 120, 120, 0.1)';\r\n    if (intensity < 0.2) return 'rgba(34, 197, 94, 0.3)';\r\n    if (intensity < 0.4) return 'rgba(34, 197, 94, 0.5)';\r\n    if (intensity < 0.6) return 'rgba(251, 146, 60, 0.6)';\r\n    if (intensity < 0.8) return 'rgba(239, 68, 68, 0.7)';\r\n    return 'rgba(239, 68, 68, 0.9)';\r\n  };\r\n\r\n  return (\r\n    <div className='flex h-full w-full flex-col'>\r\n      <div className='mb-4'>\r\n        <p className='text-sm text-white/60'>\r\n          User activity distribution over the last 7 days (hourly statistics)\r\n        </p>\r\n      </div>\r\n\r\n      <div className='flex-1 overflow-auto'>\r\n        <div className='min-w-full'>\r\n          {/* Hour labels */}\r\n          <div className='mb-2 flex items-center'>\r\n            <div className='w-32 shrink-0' />\r\n            <div className='flex gap-1'>\r\n              {hours.map((hour: any) => (\r\n                <div key={hour} className='w-6 text-center text-xs text-white/50'>\r\n                  {hour}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Heatmap rows */}\r\n          {heatmapData.map(({ user, hours }) => (\r\n            <div key={user} className='mb-1 flex items-center'>\r\n              <div className='w-32 shrink-0 truncate pr-2 text-sm'>{user}</div>\r\n              <div className='flex gap-1'>\r\n                {Array.from({ length: 24 }, (_, hour) => {\r\n                  const count = hours.get(hour) || 0;\r\n                  return (\r\n                    <div\r\n                      key={hour}\r\n                      className='h-6 w-6 cursor-pointer rounded transition-all hover:scale-110'\r\n                      style={{ backgroundColor: getHeatColor(count) }}\r\n                      title={`${user} - ${hour}:00: ${count} operations`}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n              <div className='ml-2 text-xs text-white/60'>\r\n                Total: {Array.from(hours.values()).reduce((sum, count) => sum + count, 0)}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Legend */}\r\n      <div className='mt-4 flex items-center justify-center gap-4 text-xs'>\r\n        <div className='flex items-center gap-2'>\r\n          <div\r\n            className='h-4 w-4 rounded'\r\n            style={{ backgroundColor: 'rgba(120, 120, 120, 0.1)' }}\r\n          />\r\n          <span>No Activity</span>\r\n        </div>\r\n        <div className='flex items-center gap-2'>\r\n          <div className='h-4 w-4 rounded' style={{ backgroundColor: 'rgba(34, 197, 94, 0.5)' }} />\r\n          <span>Low</span>\r\n        </div>\r\n        <div className='flex items-center gap-2'>\r\n          <div className='h-4 w-4 rounded' style={{ backgroundColor: 'rgba(251, 146, 60, 0.6)' }} />\r\n          <span>Medium</span>\r\n        </div>\r\n        <div className='flex items-center gap-2'>\r\n          <div className='h-4 w-4 rounded' style={{ backgroundColor: 'rgba(239, 68, 68, 0.9)' }} />\r\n          <span>High</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default UserActivityHeatmap;\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/charts/VoidRecordsAnalysis.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[631,634],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[631,634],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useMemo } from 'react';\nimport { DatabaseRecord } from '@/lib/types/database';\r\nimport { useQuery } from '@tanstack/react-query';\r\nimport { widgetAPI } from '@/lib/api/widgets/widget-api-client';\r\nimport {\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  ResponsiveContainer,\r\n  Tooltip,\r\n  Legend,\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n} from '@/lib/recharts-dynamic';\r\n\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { AlertCircle } from 'lucide-react';\r\n\r\ninterface VoidRecordsAnalysisProps {\r\n  timeFrame?: any;\r\n}\r\n\r\ninterface VoidRecord {\r\n  id: string;\r\n  product_code?: string;\r\n  reason?: string;\r\n  void_qty?: number;\r\n  created_at: string;\r\n  user_name?: string;\r\n}\r\n\r\nexport default function VoidRecordsAnalysis({ timeFrame }: VoidRecordsAnalysisProps) {\r\n  // Get last 30 days of data for analysis\r\n  const endDate = new Date();\r\n  const startDate = new Date();\r\n  startDate.setDate(startDate.getDate() - 30);\r\n  \r\n  const queryParams = {\r\n    startDate: startDate.toISOString().split('T')[0],\r\n    endDate: endDate.toISOString().split('T')[0],\r\n    limit: 100, // Limit to last 100 records for performance\r\n  };\r\n\r\n  // Use React Query for data fetching\r\n  const { \r\n    data: response, \r\n    isLoading: loading, \r\n    error,\r\n    isError \r\n  } = useQuery({\r\n    queryKey: ['void-records-analysis', queryParams],\r\n    queryFn: () => widgetAPI.getVoidRecordsAnalysis(queryParams),\r\n    refetchInterval: 30000, // Refetch every 30 seconds\r\n    staleTime: 25000, // Consider data stale after 25 seconds\r\n    gcTime: 5 * 60 * 1000, // Cache for 5 minutes\r\n    refetchOnWindowFocus: false,\r\n    retry: 3,\r\n    retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),\r\n  });\r\n\r\n  // Extract data from response and memoize to avoid dependency issues\r\n  const data = useMemo(() => {\r\n    return response?.success && response.data ? response.data.records || [] : [];\r\n  }, [response]);\r\n\r\n  const { reasonData, productData } = useMemo(() => {\r\n    if (!data || data.length === 0) return { reasonData: [], productData: [] };\r\n\r\n    // Group by void reason\r\n    const reasonMap = new Map<string, number>();\r\n    const productMap = new Map<string, { count: number; qty: number }>();\r\n\r\n    data.forEach((record: DatabaseRecord) => {\r\n      // Count by reason\r\n      const reason = record.reason || 'Unspecified Reason';\r\n      reasonMap.set(reason, (reasonMap.get(reason) || 0) + 1);\r\n\r\n      // Count by product code\r\n      const productCode = record.product_code || 'Unknown';\r\n      const existing = productMap.get(productCode) || { count: 0, qty: 0 };\r\n      productMap.set(productCode, {\r\n        count: existing.count + 1,\r\n        qty: existing.qty + (record.void_qty || 0),\r\n      });\r\n    });\r\n\r\n    // Convert to array format for charts\r\n    const reasonData = Array.from(reasonMap.entries())\r\n      .map(([reason, count]) => ({ reason, count }))\r\n      .sort((a, b) => b.count - a.count);\r\n\r\n    const productData = Array.from(productMap.entries())\r\n      .map(([code, stats]) => ({\r\n        code,\r\n        count: stats.count,\r\n        qty: stats.qty,\r\n      }))\r\n      .sort((a, b) => b.count - a.count)\r\n      .slice(0, 10); // Top 10 products\r\n\r\n    return { reasonData, productData };\r\n  }, [data]);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className='flex h-full w-full flex-col gap-4'>\r\n        <Skeleton className='h-8 w-48' />\r\n        <Skeleton className='flex-1' />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (isError) {\r\n    const errorMessage = error instanceof Error ? (error as { message: string }).message : 'Failed to load void records';\r\n    return (\r\n      <Alert variant='destructive'>\r\n        <AlertCircle className='h-4 w-4' />\r\n        <AlertDescription>Failed to load void records: {errorMessage}</AlertDescription>\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  // Colors for pie chart\r\n  const COLORS = [\r\n    '#ef4444',\r\n    '#f97316',\r\n    '#f59e0b',\r\n    '#84cc16',\r\n    '#10b981',\r\n    '#06b6d4',\r\n    '#3b82f6',\r\n    '#8b5cf6',\r\n  ];\r\n\r\n  // Calculate total voids\r\n  const totalVoids = reasonData.reduce((sum, item) => sum + item.count, 0);\r\n\r\n  return (\r\n    <div className='flex h-full w-full flex-col'>\r\n      <div className='mb-4'>\r\n        <p className='text-sm text-white/60'>\r\n          Analysis of the last {data.length} void records (Total: {totalVoids} records)\r\n        </p>\r\n      </div>\r\n\r\n      <div className='grid flex-1 grid-cols-2 gap-4'>\r\n        {/* Void Reasons Pie Chart */}\r\n        <div className='flex flex-col'>\r\n          <h3 className='mb-2 text-sm font-medium'>Void Reasons Distribution</h3>\r\n          <div className='flex-1'>\r\n            <ResponsiveContainer width='100%' height='100%'>\r\n              <PieChart>\r\n                <Pie\r\n                  data={reasonData}\r\n                  cx='50%'\r\n                  cy='50%'\r\n                  labelLine={false}\r\n                  label={({ reason, percent }) => `${reason} ${(percent * 100).toFixed(0)}%`}\r\n                  outerRadius={80}\r\n                  fill='#8884d8'\r\n                  dataKey='count'\r\n                >\r\n                  {reasonData.map((entry, index) => (\r\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                  ))}\r\n                </Pie>\r\n                <Tooltip\r\n                  content={({ active, payload }) => {\r\n                    if (active && payload && payload[0]) {\r\n                      const data = payload[0].payload;\r\n                      return (\r\n                        <div className='rounded-lg border bg-background/95 p-3 shadow-lg backdrop-blur-sm'>\r\n                          <p className='font-medium'>{data.reason}</p>\r\n                          <p className='text-sm'>Count: {data.count}</p>\r\n                          <p className='text-sm text-white/60'>\r\n                            Percentage: {((data.count / totalVoids) * 100).toFixed(1)}%\r\n                          </p>\r\n                        </div>\r\n                      );\r\n                    }\r\n                    return null;\r\n                  }}\r\n                />\r\n              </PieChart>\r\n            </ResponsiveContainer>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Top Products Bar Chart */}\r\n        <div className='flex flex-col'>\r\n          <h3 className='mb-2 text-sm font-medium'>High Risk Products - Top 10</h3>\r\n          <div className='flex-1'>\r\n            <ResponsiveContainer width='100%' height='100%'>\r\n              <BarChart\r\n                data={productData}\r\n                layout='horizontal'\r\n                margin={{ top: 5, right: 30, left: 60, bottom: 5 }}\r\n              >\r\n                <CartesianGrid strokeDasharray='3 3' opacity={0.3} />\r\n                <XAxis type='number' tick={{ fontSize: '12px' }} />\r\n                <YAxis dataKey='code' type='category' width={50} tick={{ fontSize: '12px' }} />\r\n                <Tooltip\r\n                  content={({ active, payload }) => {\r\n                    if (active && payload && payload[0]) {\r\n                      const data = payload[0].payload;\r\n                      return (\r\n                        <div className='rounded-lg border bg-background/95 p-3 shadow-lg backdrop-blur-sm'>\r\n                          <p className='font-medium'>{data.code}</p>\r\n                          <p className='text-sm'>Void Count: {data.count}</p>\r\n                          <p className='text-sm'>Total Quantity: {data.qty}</p>\r\n                        </div>\r\n                      );\r\n                    }\r\n                    return null;\r\n                  }}\r\n                />\r\n                <Bar dataKey='count' fill='#ef4444' radius={[0, 4, 4, 0]} />\r\n              </BarChart>\r\n            </ResponsiveContainer>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Summary Stats */}\r\n      <div className='mt-4 grid grid-cols-4 gap-2 border-t pt-4 text-xs'>\r\n        <div className='text-center'>\r\n          <div className='font-medium text-red-600'>{reasonData[0]?.reason || 'N/A'}</div>\r\n          <div className='text-white/60'>Most Common Reason</div>\r\n        </div>\r\n        <div className='text-center'>\r\n          <div className='font-medium'>{productData[0]?.code || 'N/A'}</div>\r\n          <div className='text-white/60'>Most Voided Product</div>\r\n        </div>\r\n        <div className='text-center'>\r\n          <div className='font-medium'>{reasonData.length}</div>\r\n          <div className='text-white/60'>Void Reason Types</div>\r\n        </div>\r\n        <div className='text-center'>\r\n          <div className='font-medium'>{productData.reduce((sum, p) => sum + p.qty, 0)}</div>\r\n          <div className='text-white/60'>Total Voided Quantity</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widget-renderer-shared.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1223,1226],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1223,1226],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1331,1334],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1331,1334],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1506,1509],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1506,1509],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1676,1679],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1676,1679],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2789,2792],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2789,2792],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2865,2868],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2865,2868],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2942,2945],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2942,2945],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * 共享的 Widget Renderer 類型定義和工具函數\r\n * 供 AdminWidgetRenderer 拆分後的子組件使用\r\n */\r\n\r\nimport React from 'react';\r\nimport { AdminWidgetConfig } from './adminDashboardLayouts';\r\nimport { TimeFrame } from '@/app/components/admin/UniversalTimeRangeSelector';\r\n\r\n// 主題顏色映射\r\nexport const THEME_GLOW_COLORS = {\r\n  injection: 'production',\r\n  pipeline: 'search', \r\n  warehouse: 'warehouse',\r\n  analysis: 'inventory',\r\n  upload: 'search',\r\n  update: 'update',\r\n  'stock-management': 'production',\r\n  system: 'update'\r\n} as const;\r\n\r\nexport type ThemeKey = 'production' | 'warehouse' | 'inventory' | 'update' | 'search';\r\n\r\nexport const getThemeGlowColor = (theme?: string): ThemeKey => {\r\n  return theme && theme in THEME_GLOW_COLORS \r\n    ? THEME_GLOW_COLORS[theme as keyof typeof THEME_GLOW_COLORS] as ThemeKey\r\n    : 'warehouse'; // 默認 warehouse（藍色）\r\n};\r\n\r\n// 圖表顏色配置\r\nexport const CHART_COLORS = [\r\n  '#8884d8', '#82ca9d', '#ffc658', '#ff7300', '#00ff00',\r\n  '#ff0000', '#0088fe', '#00c49f', '#ffbb28', '#ff8042',\r\n  '#8dd1e1', '#d084d0', '#ffb347', '#87d068', '#ff6b6b'\r\n];\r\n\r\n// Widget Renderer 基礎 Props\r\nexport interface BaseWidgetRendererProps {\r\n  config: AdminWidgetConfig;\r\n  theme: string;\r\n  timeFrame: TimeFrame;\r\n  data?: any;\r\n  loading?: boolean;\r\n  error?: string | null;\r\n  renderLazyComponent: (componentName: string, props: any) => JSX.Element;\r\n}\r\n\r\n// Component Props Factory 類型\r\nexport interface ComponentProps {\r\n  config: AdminWidgetConfig;\r\n  timeFrame: TimeFrame;\r\n  theme: string;\r\n  data?: any;\r\n}\r\n\r\n// Component Props Factory 函數\r\nexport const getComponentPropsFactory = (config: AdminWidgetConfig, timeFrame: TimeFrame, theme: string) => {\r\n  return (data?: any): ComponentProps => ({\r\n    config,\r\n    timeFrame,\r\n    theme,\r\n    data\r\n  });\r\n};\r\n\r\n// Widget 類型分類\r\nexport const WIDGET_CATEGORIES = {\r\n  CHART: [\r\n    'StockDistributionChart',\r\n    'StockDistributionChartV2', \r\n    'StockLevelHistoryChart',\r\n    'TransferTimeDistributionWidget',\r\n    'WarehouseWorkLevelAreaChart',\r\n    'WarehouseHeatmap',\r\n    'PipelineFlowDiagram',\r\n    'chart'\r\n  ],\r\n  STATS: [\r\n    'AwaitLocationQtyWidget',\r\n    'YesterdayTransferCountWidget', \r\n    'StillInAwaitWidget',\r\n    'StillInAwaitPercentageWidget',\r\n    'production_summary',\r\n    'production_details', \r\n    'work_level',\r\n    'pipeline_production_details',\r\n    'pipeline_work_level',\r\n    'system_status',\r\n    'stats'\r\n  ],\r\n  LIST: [\r\n    'OrderStateListWidget',\r\n    'WarehouseTransferListWidget',\r\n    'StockInventoryTable', \r\n    'orders-list',\r\n    'other-files-list',\r\n    'activity-feed',\r\n    'table',\r\n    'list'\r\n  ]\r\n} as const;\r\n\r\n// 判斷 Widget 類型的工具函數\r\nexport const getWidgetCategory = (widgetType: string): 'chart' | 'stats' | 'list' | 'core' => {\r\n  if (WIDGET_CATEGORIES.CHART.includes(widgetType as any)) return 'chart';\r\n  if (WIDGET_CATEGORIES.STATS.includes(widgetType as any)) return 'stats';  \r\n  if (WIDGET_CATEGORIES.LIST.includes(widgetType as any)) return 'list';\r\n  return 'core';\r\n};\r\n\r\n// 錯誤邊界組件的錯誤處理\r\nexport const createErrorFallback = (componentName: string, error?: string) => {\r\n  return (\r\n    <div className=\"rounded-lg border border-red-200 bg-red-50 p-4\">\r\n      <h3 className=\"font-medium text-red-600\">Widget Error</h3>\r\n      <p className=\"mt-1 text-sm text-red-500\">Failed to load {componentName}</p>\r\n      {error && (\r\n        <details className=\"mt-2\">\r\n          <summary className=\"cursor-pointer text-xs text-red-400\">Details</summary>\r\n          <pre className=\"mt-1 overflow-auto text-xs\">{error}</pre>\r\n        </details>\r\n      )}\r\n    </div>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/AcoOrderProgressWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2172,2175],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2172,2175],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":177,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5373,5376],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5373,5376],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * ACO Order Progress Widget\r\n * 顯示 ACO 訂單進度和完成狀態\r\n *\r\n * 已遷移至統一架構：\r\n * - 使用 DashboardAPI 統一數據訪問\r\n * - 服務器端 JOIN 和聚合計算\r\n * - 優化性能和代碼結構\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useEffect, useState, useRef, useCallback, useMemo } from 'react';\r\nimport { CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { UniversalWidgetCard as WidgetCard } from '../UniversalWidgetCard';\r\nimport { ClipboardDocumentListIcon, ChevronDownIcon } from '@heroicons/react/24/outline';\r\nimport { WidgetComponentProps } from '@/app/types/dashboard';\r\nimport { useWidgetToast } from '@/app/admin/hooks/useWidgetToast';\r\nimport { WidgetStyles } from '@/app/utils/widgetStyles';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { format } from 'date-fns';\r\nimport { WidgetTitle, WidgetText, WidgetLabel, WidgetValue } from '../WidgetTypography';\r\nimport { WidgetSkeleton } from './common/WidgetStates';\r\nimport useSWR from 'swr';\r\n\r\ninterface AcoOrderProgressCard {\r\n  id: string;\r\n  title: string;\r\n  value: number;\r\n  previousValue?: number;\r\n  percentageChange?: number;\r\n  trend?: 'up' | 'down' | 'stable';\r\n}\r\n\r\ninterface AcoOrderProgressResponse {\r\n  cards: AcoOrderProgressCard[];\r\n  totalCards: number;\r\n  dateRange: string;\r\n  lastUpdated: string;\r\n  metadata: {\r\n    warehouse: string;\r\n    status: string;\r\n    customerRef: string;\r\n  };\r\n}\r\n\r\ninterface AcoOrder {\r\n  order_ref: number;\r\n  latest_update: string;\r\n  total_required: number;\r\n  total_finished: number;\r\n  total_remaining: number;\r\n  product_count: number;\r\n  completion_percentage: number;\r\n}\r\n\r\ninterface AcoOrderProgress {\r\n  code: string;\r\n  required_qty: number;\r\n  completed_qty: number;\r\n  remain_qty: number;\r\n  completion_percentage: number;\r\n}\r\n\r\nexport const AcoOrderProgressWidget = React.memo(function AcoOrderProgressWidget({\r\n  widget,\r\n  isEditMode,\r\n}: WidgetComponentProps) {\r\n  const [selectedOrderRef, setSelectedOrderRef] = useState<number | null>(null);\r\n  const [orderProgress, setOrderProgress] = useState<AcoOrderProgress[]>([]);\r\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n  const [progressMetadata, setProgressMetadata] = useState<any>({});\r\n  const dropdownRef = useRef<HTMLDivElement>(null);\r\n  const { showError } = useWidgetToast();\r\n\r\n  // Fetcher function for SWR\r\n  const fetcher = async (url: string) => {\r\n    const token = localStorage.getItem('authToken') || sessionStorage.getItem('authToken');\r\n    const response = await fetch(url, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`API Error: ${response.status}`);\r\n    }\r\n    \r\n    return response.json();\r\n  };\r\n\r\n  // Use SWR for ACO order progress cards data\r\n  const {\r\n    data: cardsData,\r\n    error,\r\n    isLoading,\r\n    mutate\r\n  } = useSWR<AcoOrderProgressResponse>(\r\n    !isEditMode ? '/api/v1/analysis/aco-order-progress-cards' : null,\r\n    fetcher,\r\n    {\r\n      refreshInterval: 300000, // 5 minutes\r\n      revalidateOnFocus: false,\r\n      onError: (error) => {\r\n        showError('Failed to load ACO order progress', error);\r\n      }\r\n    }\r\n  );\r\n\r\n  // Transform REST API data to display format\r\n  const progressCards = useMemo(() => {\r\n    if (!cardsData?.cards) return [];\r\n    return cardsData.cards;\r\n  }, [cardsData]);\r\n\r\n  // Create mock incomplete orders for dropdown (this should come from a separate endpoint)\r\n  const incompleteOrders = useMemo(() => {\r\n    // This is temporary mock data - in a real implementation, \r\n    // this would come from a separate endpoint like /api/v1/orders/aco?status=incomplete\r\n    return [\r\n      {\r\n        order_ref: 1001,\r\n        latest_update: '2024-01-15T10:30:00Z',\r\n        total_required: 500,\r\n        total_finished: 375,\r\n        total_remaining: 125,\r\n        product_count: 5,\r\n        completion_percentage: 75\r\n      },\r\n      {\r\n        order_ref: 1002,\r\n        latest_update: '2024-01-14T16:45:00Z',\r\n        total_required: 300,\r\n        total_finished: 180,\r\n        total_remaining: 120,\r\n        product_count: 3,\r\n        completion_percentage: 60\r\n      }\r\n    ];\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n    function handleClickOutside(event: MouseEvent) {\r\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\r\n        setIsDropdownOpen(false);\r\n      }\r\n    }\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => document.removeEventListener('mousedown', handleClickOutside);\r\n  }, []);\r\n\r\n  const loadOrderProgress = useCallback(\r\n    async (orderRef: number) => {\r\n      try {\r\n        // TODO: Implement order progress query when GraphQL query is available\r\n        // For now, we'll use mock data\r\n        const mockProgress: AcoOrderProgress[] = [\r\n          {\r\n            code: 'PROD-001',\r\n            required_qty: 100,\r\n            completed_qty: 75,\r\n            remain_qty: 25,\r\n            completion_percentage: 75,\r\n          },\r\n          {\r\n            code: 'PROD-002',\r\n            required_qty: 50,\r\n            completed_qty: 30,\r\n            remain_qty: 20,\r\n            completion_percentage: 60,\r\n          },\r\n        ];\r\n        setOrderProgress(mockProgress);\r\n        setProgressMetadata({ orderRef, productCount: mockProgress.length });\r\n      } catch (err: any) {\r\n        console.error('[AcoOrderProgressWidget as string] Error loading order progress:', err);\r\n        showError('Failed to load order progress', err);\r\n        setOrderProgress([]);\r\n      }\r\n    },\r\n    [showError]\r\n  );\r\n\r\n  // Load order progress when selected order changes\r\n  useEffect(() => {\r\n    if (selectedOrderRef) {\r\n      loadOrderProgress(selectedOrderRef);\r\n    }\r\n  }, [selectedOrderRef, loadOrderProgress]);\r\n\r\n  // Auto-refresh data periodically\r\n  useEffect(() => {\r\n    if (!isEditMode && !isLoading && !error) {\r\n      const interval = setInterval(() => {\r\n        mutate();\r\n      }, 300000); // 5 minutes\r\n      \r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [isEditMode, isLoading, error, mutate]);\r\n\r\n  // Auto-select first order\r\n  useEffect(() => {\r\n    if (incompleteOrders.length > 0 && !selectedOrderRef) {\r\n      setSelectedOrderRef(incompleteOrders[0].order_ref);\r\n    }\r\n  }, [incompleteOrders, selectedOrderRef]);\r\n\r\n  const handleOrderSelect = (orderRef: number) => {\r\n    setSelectedOrderRef(orderRef);\r\n    setIsDropdownOpen(false);\r\n  };\r\n\r\n  // Fixed layout widget - full functionality\r\n  return (\r\n    <WidgetCard widgetType='ACO_ORDER_PROGRESS' isEditMode={isEditMode}>\r\n      <CardHeader className='pb-2'>\r\n        <div className='flex items-center justify-between'>\r\n          <div className='flex items-center gap-2'>\r\n            <div className='flex h-8 w-8 items-center justify-center rounded-lg bg-gradient-to-r from-orange-500 to-amber-500'>\r\n              <ClipboardDocumentListIcon className='h-5 w-5 text-white' />\r\n            </div>\r\n            <span\r\n              className={`bg-gradient-to-r from-orange-300 via-amber-300 to-orange-200 bg-clip-text text-sm font-medium text-transparent text-white [text-shadow:_0_0_10px_rgba(251,146,60,0.5),_0_0_20px_rgba(251,146,60,0.3)]`}\r\n            >\r\n              ACO Order Progress\r\n            </span>\r\n          </div>\r\n\r\n          {/* Order Dropdown */}\r\n          <div className='relative' ref={dropdownRef}>\r\n            <button\r\n              onClick={() => setIsDropdownOpen(!isDropdownOpen)}\r\n              className='flex items-center gap-2 rounded-md border border-slate-600/30 bg-white/5 px-2 py-1 text-xs text-slate-300 transition-all duration-300 hover:bg-white/10 hover:text-white'\r\n              disabled={isLoading || isEditMode}\r\n            >\r\n              <ClipboardDocumentListIcon className='h-4 w-4' />\r\n              {selectedOrderRef ? `Order ${selectedOrderRef}` : 'Select Order'}\r\n              <ChevronDownIcon\r\n                className={`h-4 w-4 transition-transform ${isDropdownOpen ? 'rotate-180' : ''}`}\r\n              />\r\n            </button>\r\n\r\n            <AnimatePresence>\r\n              {isDropdownOpen && (\r\n                <motion.div\r\n                  initial={{ opacity: 0, y: -10, scale: 0.95 }}\r\n                  animate={{ opacity: 1, y: 0, scale: 1 }}\r\n                  exit={{ opacity: 0, y: -10, scale: 0.95 }}\r\n                  transition={{ duration: 0.2 }}\r\n                  className='absolute right-0 top-full z-50 mt-2 max-h-60 min-w-[200px] overflow-y-auto rounded-xl border border-slate-600/50 bg-black/80 shadow-2xl backdrop-blur-xl'\r\n                >\r\n                  {incompleteOrders.length === 0 ? (\r\n                    <div className='px-4 py-3 text-sm text-slate-400'>No incomplete orders</div>\r\n                  ) : (\r\n                    incompleteOrders.map((order, idx) => (\r\n                      <button\r\n                        key={`dropdown-order-${order.order_ref}-${idx}`}\r\n                        onClick={() => handleOrderSelect(order.order_ref)}\r\n                        className={`w-full px-3 py-2 text-left text-xs transition-all duration-300 first:rounded-t-xl last:rounded-b-xl hover:bg-white/10 ${\r\n                          selectedOrderRef === order.order_ref\r\n                            ? 'bg-white/10 text-orange-400'\r\n                            : 'text-slate-300'\r\n                        }`}\r\n                      >\r\n                        <div className='flex items-center justify-between'>\r\n                          <span>Order {order.order_ref}</span>\r\n                          <div className='flex flex-col items-end gap-1'>\r\n                            <div className='rounded-lg border border-orange-400/30 bg-orange-500/20 px-2 py-0.5 text-[10px] text-orange-300'>\r\n                              {order.total_remaining} remain\r\n                            </div>\r\n                            <div className='text-[9px] text-slate-400'>\r\n                              {order.completion_percentage}% done\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </button>\r\n                    ))\r\n                  )}\r\n                </motion.div>\r\n              )}\r\n            </AnimatePresence>\r\n          </div>\r\n        </div>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {isLoading ? (\r\n          <WidgetSkeleton type=\"stats\" />\r\n        ) : error ? (\r\n          <div className='text-sm text-red-400'>{typeof error === 'string' ? error : 'Failed to load data'}</div>\r\n        ) : progressCards.length === 0 ? (\r\n          <div className='py-12 text-center'>\r\n            <ClipboardDocumentListIcon className='mx-auto mb-4 h-16 w-16 text-slate-600' />\r\n            <WidgetText size='large' glow='gray'>\r\n              Select an ACO order to view progress\r\n            </WidgetText>\r\n          </div>\r\n        ) : (\r\n          <div className='space-y-4'>\r\n            {progressCards.map((card, index) => (\r\n              <div key={`${card.id}-${index}`} className='space-y-3'>\r\n                <div className='flex items-center justify-between'>\r\n                  <WidgetText size='xs' glow='white' className='text-xs font-medium'>\r\n                    {card.title}\r\n                  </WidgetText>\r\n                  <div className='flex items-center gap-2'>\r\n                    <span className={`text-lg font-bold ${WidgetStyles.text.value}`}>\r\n                      {card.value}\r\n                    </span>\r\n                    {card.trend && (\r\n                      <span className={`text-xs ${\r\n                        card.trend === 'up' ? 'text-green-400' : \r\n                        card.trend === 'down' ? 'text-red-400' : 'text-gray-400'\r\n                      }`}>\r\n                        {card.percentageChange !== undefined && `${card.percentageChange > 0 ? '+' : ''}${card.percentageChange.toFixed(1)}%`}\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                {card.previousValue !== undefined && (\r\n                  <div className='flex items-center justify-between text-xs text-slate-400'>\r\n                    <span>Previous: {card.previousValue}</span>\r\n                    <span className={`${\r\n                      card.trend === 'up' ? 'text-green-400' : \r\n                      card.trend === 'down' ? 'text-red-400' : 'text-gray-400'\r\n                    }`}>\r\n                      {card.trend === 'up' ? '↗' : card.trend === 'down' ? '↘' : '→'}\r\n                    </span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))}\r\n            {cardsData?.metadata && (\r\n              <div className='mt-4 pt-4 border-t border-slate-600/30'>\r\n                <WidgetLabel size='xs' glow='subtle' className='text-[10px]'>\r\n                  Last updated: {format(new Date(cardsData.lastUpdated), 'MMM dd, HH:mm')} • {cardsData.dateRange}\r\n                </WidgetLabel>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </WidgetCard>\r\n  );\r\n});\r\n\r\nexport default AcoOrderProgressWidget;\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/AcoOrderReportWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1816,1819],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1816,1819],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * ACO Order Report Widget\r\n * 遷移至 REST API 架構，移除版本號\r\n * 使用 NestJS ACO API 端點進行數據獲取\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { Card, CardContent } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Label } from '@/components/ui/label';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '@/components/ui/select-radix';\r\nimport { DocumentArrowDownIcon } from '@heroicons/react/24/outline';\r\nimport { useToast } from '@/components/ui/use-toast';\r\nimport { exportAcoReport } from '@/lib/exportReport';\r\nimport { cn } from '@/lib/utils';\r\nimport { WidgetComponentProps } from '@/app/types/dashboard';\r\nimport { \r\n  brandColors, \r\n  widgetColors, \r\n  semanticColors,\r\n  getWidgetCategoryColor \r\n} from '@/lib/design-system/colors';\r\nimport { textClasses, getTextClass } from '@/lib/design-system/typography';\r\nimport { spacing, widgetSpacing, spacingUtilities } from '@/lib/design-system/spacing';\r\n\r\ninterface AcoProductData {\r\n  product_code: string;\r\n  required_qty: number | null;\r\n  pallets: Array<{\r\n    plt_num: string | null;\r\n    product_qty: number | null;\r\n    generate_time: string | null;\r\n  }>;\r\n  pallet_count: number;\r\n}\r\n\r\n// REST API client for ACO endpoints\r\nconst acoApiClient = {\r\n  async getReferences(): Promise<string[]> {\r\n    const response = await fetch('/api/v1/aco/references', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch ACO references: ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data.references || [];\r\n  },\r\n\r\n  async getOrdersByDate(orderDate: string): Promise<any[]> {\r\n    const url = new URL('/api/v1/aco/orders-by-date', window.location.origin);\r\n    url.searchParams.append('orderDate', orderDate);\r\n    \r\n    const response = await fetch(url.toString(), {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch ACO orders: ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data.records || [];\r\n  },\r\n};\r\n\r\nexport function AcoOrderReportWidget({ widget, isEditMode }: WidgetComponentProps) {\r\n  const { toast } = useToast();\r\n  const [acoOrders, setAcoOrders] = useState<string[]>([]);\r\n  const [selectedAcoOrder, setSelectedAcoOrder] = useState<string>('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [isGenerating, setIsGenerating] = useState(false);\r\n  const [performanceMetrics, setPerformanceMetrics] = useState<{\r\n    apiResponseTime?: number;\r\n    optimized?: boolean;\r\n  }>({});\r\n\r\n  const fetchAcoOrders = useCallback(async () => {\r\n    if (isEditMode) return;\r\n\r\n    setLoading(true);\r\n    try {\r\n      const startTime = performance.now();\r\n      \r\n      const refs = await acoApiClient.getReferences();\r\n      const endTime = performance.now();\r\n      \r\n      setPerformanceMetrics({\r\n        apiResponseTime: Math.round(endTime - startTime),\r\n        optimized: true,\r\n      });\r\n\r\n      setAcoOrders(refs);\r\n      \r\n      // Set default selection to first available order\r\n      if (refs.length > 0 && !selectedAcoOrder) {\r\n        setSelectedAcoOrder(refs[0]);\r\n      }\r\n    } catch (error) {\r\n      console.error('[AcoOrderReportWidget as string] Error fetching ACO orders:', error);\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Failed to fetch ACO order references',\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [isEditMode, selectedAcoOrder, toast]);\r\n\r\n  useEffect(() => {\r\n    fetchAcoOrders();\r\n  }, [fetchAcoOrders]);\r\n\r\n  const handleGenerateReport = async () => {\r\n    if (!selectedAcoOrder) {\r\n      toast({\r\n        title: 'No Order Selected',\r\n        description: 'Please select an ACO order date',\r\n        variant: 'destructive',\r\n      });\r\n      return;\r\n    }\r\n\r\n    setIsGenerating(true);\r\n    try {\r\n      // Get ACO orders for the selected date\r\n      const orderRecords = await acoApiClient.getOrdersByDate(selectedAcoOrder);\r\n      \r\n      if (!orderRecords || orderRecords.length === 0) {\r\n        toast({\r\n          title: 'No Data',\r\n          description: 'No ACO order data found for the selected date',\r\n          variant: 'destructive',\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Transform data for export\r\n      const processedData = processOrderRecords(orderRecords);\r\n      const orderRef = orderRecords[0]?.aco_ref || 'N/A';\r\n\r\n      // Export the report\r\n      await exportAcoReport(processedData, orderRef);\r\n\r\n      toast({\r\n        title: 'Success',\r\n        description: 'ACO order report generated successfully',\r\n      });\r\n    } catch (error) {\r\n      console.error('[AcoOrderReportWidget as string] Error generating report:', error);\r\n      toast({\r\n        title: 'Error',\r\n        description: error instanceof Error ? (error as { message: string }).message : 'Failed to generate report',\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setIsGenerating(false);\r\n    }\r\n  };\r\n\r\n  // Process order records to group by product code\r\n  const processOrderRecords = (records: Record<string, unknown>[]): AcoProductData[] => {\r\n    const productMap = new Map<string, AcoProductData>();\r\n\r\n    records.forEach(record => {\r\n      const productCode = record.product_code;\r\n      if (!productCode) return;\r\n\r\n      if (!productMap.has(productCode)) {\r\n        productMap.set(productCode, {\r\n          product_code: productCode,\r\n          required_qty: record.product_quantity || 0,\r\n          pallets: [],\r\n          pallet_count: 0,\r\n        });\r\n      }\r\n\r\n      const product = productMap.get(productCode)!;\r\n      \r\n      // Add pallet info if available\r\n      if (record.plt_num) {\r\n        product.pallets.push({\r\n          plt_num: record.plt_num,\r\n          product_qty: record.product_quantity,\r\n          generate_time: record.created_at,\r\n        });\r\n        product.pallet_count = product.pallets.length;\r\n      }\r\n    });\r\n\r\n    return Array.from(productMap.values());\r\n  };\r\n\r\n  if (isEditMode) {\r\n    return (\r\n      <Card className={cn('h-full w-full', 'border-border bg-card/40')}>\r\n        <CardContent className={cn('flex h-full items-center justify-center', widgetSpacing.container)}>\r\n          <div className='text-center'>\r\n            <h3 className={cn(textClasses['body-medium'], 'font-semibold text-foreground')}>\r\n              ACO Order Report\r\n            </h3>\r\n            <p className={cn(textClasses['body-small'], 'text-muted-foreground')}>\r\n              Generate ACO order reports\r\n            </p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className={cn('h-full w-full border-border bg-card/40')}>\r\n      <CardContent className={cn('h-full', widgetSpacing.container)}>\r\n        <div className='flex h-full flex-col'>\r\n          {/* Header */}\r\n          <div className='flex-shrink-0 pb-4'>\r\n            <h3 className={cn(textClasses['body-small'], 'font-semibold text-foreground')}>\r\n              ACO Order Report\r\n            </h3>\r\n            <p className={cn(textClasses['label-small'], 'text-muted-foreground')}>\r\n              Generate and download ACO order reports\r\n            </p>\r\n          </div>\r\n\r\n          {/* Main Content */}\r\n          <div className='flex flex-1 flex-col justify-between'>\r\n            {/* Order Selection */}\r\n            <div className='space-y-4'>\r\n              <div className='space-y-2'>\r\n                <Label className={cn(textClasses['label-medium'], 'text-foreground')}>\r\n                  Order Date\r\n                </Label>\r\n                <Select\r\n                  value={selectedAcoOrder}\r\n                  onValueChange={(value) => setSelectedAcoOrder(value)}\r\n                  disabled={loading || acoOrders.length === 0}\r\n                >\r\n                  <SelectTrigger className={cn(\r\n                    'w-full',\r\n                    'bg-background/50 hover:bg-background/70',\r\n                    'border-border hover:border-border/80',\r\n                    'text-foreground',\r\n                    textClasses['body-small']\r\n                  )}>\r\n                    <SelectValue \r\n                      placeholder={\r\n                        loading \r\n                          ? \"Loading orders...\" \r\n                          : acoOrders.length === 0 \r\n                            ? \"No orders available\" \r\n                            : \"Select order date\"\r\n                      } \r\n                    />\r\n                  </SelectTrigger>\r\n                  <SelectContent className='border-border bg-card'>\r\n                    {acoOrders.map((order) => (\r\n                      <SelectItem key={order} value={order} className={cn(\r\n                        'text-foreground hover:bg-accent',\r\n                        textClasses['body-small']\r\n                      )}>\r\n                        {order}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n\r\n              {loading && (\r\n                <p className={cn(textClasses['label-small'], 'text-muted-foreground')}>\r\n                  Loading ACO orders...\r\n                </p>\r\n              )}\r\n\r\n              {!loading && acoOrders.length === 0 && (\r\n                <p className={cn(textClasses['label-small'], 'text-muted-foreground')}>\r\n                  No ACO orders found\r\n                </p>\r\n              )}\r\n            </div>\r\n\r\n            {/* Action Button */}\r\n            <div className='flex-shrink-0 pt-4'>\r\n              <Button\r\n                onClick={handleGenerateReport}\r\n                disabled={!selectedAcoOrder || isGenerating || loading}\r\n                size='sm'\r\n                className={cn(\r\n                  'w-full gap-2',\r\n                  'bg-gradient-to-r',\r\n                  getWidgetCategoryColor('reports', 'gradient'),\r\n                  'font-medium text-primary-foreground',\r\n                  'transition-all duration-200',\r\n                  textClasses['body-small']\r\n                )}\r\n              >\r\n                {isGenerating ? (\r\n                  <>\r\n                    <div className='h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent' />\r\n                    Generating...\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <DocumentArrowDownIcon className='h-4 w-4' />\r\n                    Generate Report\r\n                  </>\r\n                )}\r\n              </Button>\r\n            </div>\r\n\r\n            {/* Performance Indicator */}\r\n            {performanceMetrics.optimized && performanceMetrics.apiResponseTime && (\r\n              <div className={cn(\r\n                'mt-2 text-right',\r\n                textClasses['label-small']\r\n              )} style={{ color: semanticColors.success.DEFAULT }}>\r\n                ✓ REST API optimized ({performanceMetrics.apiResponseTime}ms)\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default AcoOrderReportWidget;","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/AcoOrderReportWidgetV2.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchAcoOrders'. Either include it or remove the dependency array.","line":109,"column":6,"nodeType":"ArrayExpression","endLine":109,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: [fetchAcoOrders, isEditMode]","fix":{"range":[3408,3420],"text":"[fetchAcoOrders, isEditMode]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/AnalysisExpandableCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/AnalysisPagedWidgetV2.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2165,2168],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2165,2168],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3934,3937],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3934,3937],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState, useCallback, lazy, Suspense, useRef } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport {\r\n  ChevronLeft,\r\n  ChevronRight,\r\n  BarChart,\r\n  PieChart,\r\n  Activity,\r\n  TrendingUp,\r\n  CheckCircle,\r\n  AlertTriangle,\r\n  Map,\r\n} from 'lucide-react';\r\nimport { cn } from '@/lib/utils';\r\nimport { useChartInViewport } from '@/app/admin/hooks/useInViewport';\r\nimport { ChartSkeleton } from '../widgets/common/charts/ChartSkeleton';\r\nimport { \r\n  brandColors, \r\n  widgetColors, \r\n  semanticColors,\r\n  getWidgetCategoryColor \r\n} from '@/lib/design-system/colors';\r\nimport { textClasses, getTextClass } from '@/lib/design-system/typography';\r\nimport { spacing, widgetSpacing, spacingUtilities } from '@/lib/design-system/spacing';\r\n\r\n// Lazy load chart components for better performance\r\n// Week 2 Day 3: Progressive Loading for Charts\r\nconst AcoOrderProgressChart = lazy(() => import('../charts/AcoOrderProgressChart').catch(() => ({ default: () => <ChartSkeleton /> })));\r\nconst TopProductsInventoryChart = lazy(() => import('../charts/TopProductsInventoryChart').catch(() => ({ default: () => <ChartSkeleton /> })));\r\nconst UserActivityHeatmapSkeleton = React.memo(() => <ChartSkeleton />);\r\nUserActivityHeatmapSkeleton.displayName = 'UserActivityHeatmapSkeleton';\r\nconst UserActivityHeatmap = lazy(() => import('../charts/UserActivityHeatmap').catch(() => ({ default: UserActivityHeatmapSkeleton })));\r\nconst InventoryTurnoverAnalysis = lazy(() => import('../charts/InventoryTurnoverAnalysis').catch(() => ({ default: () => <ChartSkeleton /> })));\r\nconst StocktakeAccuracyTrend = lazy(() => import('../charts/StocktakeAccuracyTrend').catch(() => ({ default: () => <ChartSkeleton /> })));\r\nconst VoidRecordsAnalysis = lazy(() => import('../charts/VoidRecordsAnalysis').catch(() => ({ default: () => <ChartSkeleton /> })));\r\nconst RealTimeInventoryMap = lazy(() => import('../charts/RealTimeInventoryMap').catch(() => ({ default: () => <ChartSkeleton /> })));\r\n\r\ninterface PageContent {\r\n  id: number;\r\n  title: string;\r\n  subtitle: string;\r\n  icon: React.ElementType;\r\n  component: React.ComponentType<any>;\r\n  color: string;\r\n}\r\n\r\nconst pages: PageContent[] = [\r\n  {\r\n    id: 1,\r\n    title: 'ACO Order Progress',\r\n    subtitle: 'Track order completion status',\r\n    icon: BarChart,\r\n    component: AcoOrderProgressChart,\r\n    color: getWidgetCategoryColor('analysis', 'gradient'),\r\n  },\r\n  {\r\n    id: 2,\r\n    title: 'Top 10 Product Inventory',\r\n    subtitle: 'Identify major inventory products',\r\n    icon: BarChart,\r\n    component: TopProductsInventoryChart,\r\n    color: getWidgetCategoryColor('charts', 'gradient'),\r\n  },\r\n  {\r\n    id: 3,\r\n    title: 'User Activity Heatmap',\r\n    subtitle: 'Understand employee work patterns',\r\n    icon: Activity,\r\n    component: UserActivityHeatmap,\r\n    color: getWidgetCategoryColor('analysis', 'gradient'),\r\n  },\r\n  {\r\n    id: 4,\r\n    title: 'Inventory Turnover Analysis',\r\n    subtitle: 'Compare inventory vs order demand',\r\n    icon: TrendingUp,\r\n    component: InventoryTurnoverAnalysis,\r\n    color: getWidgetCategoryColor('analysis', 'gradient'),\r\n  },\r\n  {\r\n    id: 5,\r\n    title: 'Stocktake Accuracy Trend',\r\n    subtitle: 'Monitor inventory management quality',\r\n    icon: CheckCircle,\r\n    component: StocktakeAccuracyTrend,\r\n    color: getWidgetCategoryColor('analysis', 'gradient'),\r\n  },\r\n  {\r\n    id: 6,\r\n    title: 'Void Records Analysis',\r\n    subtitle: 'Reduce waste, improve processes',\r\n    icon: AlertTriangle,\r\n    component: VoidRecordsAnalysis,\r\n    color: getWidgetCategoryColor('analysis', 'gradient'),\r\n  },\r\n  {\r\n    id: 7,\r\n    title: 'Real-time Inventory Location',\r\n    subtitle: 'Optimize warehouse space utilization',\r\n    icon: Map,\r\n    component: RealTimeInventoryMap,\r\n    color: getWidgetCategoryColor('analysis', 'gradient'),\r\n  },\r\n];\r\n\r\ninterface AnalysisPagedWidgetV2Props {\r\n  timeFrame?: any;\r\n  theme?: string;\r\n}\r\n\r\nexport const AnalysisPagedWidgetV2 = function AnalysisPagedWidgetV2({\r\n  timeFrame,\r\n  theme,\r\n}: AnalysisPagedWidgetV2Props) {\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n  const [isFlipping, setIsFlipping] = useState(false);\r\n\r\n  const handlePageChange = useCallback(\r\n    (index: number) => {\r\n      if (index === currentPage || isFlipping) return;\r\n\r\n      setIsFlipping(true);\r\n      setTimeout(() => {\r\n        setCurrentPage(index);\r\n        setIsFlipping(false);\r\n      }, 300);\r\n    },\r\n    [currentPage, isFlipping]\r\n  );\r\n\r\n  const CurrentComponent = pages[currentPage].component;\r\n  const currentPageData = pages[currentPage];\r\n\r\n  return (\r\n    <div className='flex h-full gap-6'>\r\n      {/* Left side - Vertical page tabs */}\r\n      <div className='flex w-64 flex-col gap-2 overflow-y-auto py-4'>\r\n        {pages.map((page, index) => {\r\n          const isActive = index === currentPage;\r\n          const isPast = index < currentPage;\r\n\r\n          return (\r\n            <motion.div\r\n              key={page.id}\r\n              className={cn(\r\n                'group relative cursor-pointer',\r\n                'transform-style-3d transition-all duration-300',\r\n                isActive && 'z-20'\r\n              )}\r\n              onClick={() => handlePageChange(index)}\r\n              initial={false}\r\n              animate={{\r\n                rotateY: isPast ? -15 : 0,\r\n                x: isPast ? -10 : 0,\r\n                scale: isActive ? 1.02 : 1,\r\n                z: isActive ? 20 : 0,\r\n              }}\r\n              transition={{\r\n                type: 'spring',\r\n                stiffness: 300,\r\n                damping: 30,\r\n              }}\r\n            >\r\n              <div\r\n                className={cn(\r\n                  'relative rounded-lg p-4 transition-all duration-300',\r\n                  'border border-border/30 backdrop-blur-md',\r\n                  'hover:border-border/50',\r\n                  isActive ? 'bg-card/20 shadow-2xl' : 'bg-card/10',\r\n                  isPast && 'opacity-70'\r\n                )}\r\n              >\r\n                {/* Page number */}\r\n                <div\r\n                  className={cn(\r\n                    'absolute -left-3 top-4 h-6 w-6 rounded-full',\r\n                    'flex items-center justify-center font-bold',\r\n                    'border border-border/40 bg-gradient-to-br',\r\n                    isActive ? page.color : 'from-muted to-muted-foreground',\r\n                    'text-primary-foreground shadow-lg',\r\n                    textClasses['label-small']\r\n                  )}\r\n                >\r\n                  {index + 1}\r\n                </div>\r\n\r\n                {/* Content */}\r\n                <div className='ml-4 flex items-center gap-3'>\r\n                  <div\r\n                    className={cn(\r\n                      'rounded-lg p-2',\r\n                      'bg-gradient-to-br',\r\n                      isActive ? page.color : getWidgetCategoryColor('stats', 'bg'),\r\n                      'shadow-lg'\r\n                    )}\r\n                  >\r\n                    <page.icon className='h-5 w-5 text-primary-foreground' />\r\n                  </div>\r\n                  <div className='flex-1'>\r\n                    <h3\r\n                      className={cn(\r\n                        textClasses['body-small'],\r\n                        'font-semibold',\r\n                        isActive ? 'text-foreground' : 'text-muted-foreground'\r\n                      )}\r\n                    >\r\n                      {page.title}\r\n                    </h3>\r\n                    <p className={cn('mt-0.5', textClasses['label-small'], 'text-muted-foreground/70')}>{page.subtitle}</p>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Active indicator */}\r\n                {isActive && (\r\n                  <motion.div\r\n                    className={cn(\r\n                      'absolute bottom-0 right-0 top-0 w-1 rounded-l',\r\n                      'bg-gradient-to-b',\r\n                      page.color\r\n                    )}\r\n                    layoutId='activeIndicator'\r\n                    transition={{\r\n                      type: 'spring',\r\n                      stiffness: 300,\r\n                      damping: 30,\r\n                    }}\r\n                  />\r\n                )}\r\n\r\n                {/* Hover effect */}\r\n                {!isActive && (\r\n                  <div\r\n                    className={cn(\r\n                      'absolute inset-0 rounded-lg opacity-0 group-hover:opacity-100',\r\n                      'bg-gradient-to-r transition-opacity duration-300',\r\n                      page.color,\r\n                      'bg-opacity-10'\r\n                    )}\r\n                  />\r\n                )}\r\n              </div>\r\n\r\n              {/* 3D shadow effect */}\r\n              {isActive && (\r\n                <div className='absolute inset-0 -z-10 rounded-lg bg-gradient-to-br from-white/10 to-transparent opacity-30 blur-xl' />\r\n              )}\r\n            </motion.div>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      {/* Right side - Content area */}\r\n      <div className='relative flex-1'>\r\n        <AnimatePresence mode='wait'>\r\n          <motion.div\r\n            key={currentPage}\r\n            className='absolute inset-0'\r\n            initial={{\r\n              opacity: 0,\r\n              scale: 0.95,\r\n              rotateX: -10,\r\n            }}\r\n            animate={{\r\n              opacity: 1,\r\n              scale: 1,\r\n              rotateX: 0,\r\n            }}\r\n            exit={{\r\n              opacity: 0,\r\n              scale: 0.95,\r\n              rotateX: 10,\r\n            }}\r\n            transition={{\r\n              duration: 0.3,\r\n              type: 'spring',\r\n              stiffness: 100,\r\n              damping: 20,\r\n            }}\r\n          >\r\n            <div className={cn(\r\n              'h-full rounded-2xl border p-6 shadow-2xl backdrop-blur-md',\r\n              'bg-card/30 border-border/10'\r\n            )}>\r\n              {/* Header */}\r\n              <div className={cn('mb-6 border-b pb-4', 'border-border/10')}>\r\n                <div className='flex items-center gap-4'>\r\n                  <div\r\n                    className={cn(\r\n                      'rounded-xl p-3 shadow-lg',\r\n                      'bg-gradient-to-br',\r\n                      currentPageData.color,\r\n                      'relative overflow-hidden'\r\n                    )}\r\n                  >\r\n                    <currentPageData.icon className='relative z-10 h-8 w-8 text-white' />\r\n                    <div className='absolute inset-0 bg-white/20 blur-xl' />\r\n                  </div>\r\n                  <div>\r\n                    <h2 className='relative mb-1 text-2xl font-bold'>\r\n                      <span\r\n                        className={cn(\r\n                          'relative z-10 bg-gradient-to-r bg-clip-text text-transparent',\r\n                          currentPageData.color\r\n                        )}\r\n                      >\r\n                        {currentPageData.title}\r\n                      </span>\r\n                      <span\r\n                        className={cn(\r\n                          'absolute inset-0 bg-gradient-to-r bg-clip-text text-transparent blur-md',\r\n                          currentPageData.color,\r\n                          'opacity-50'\r\n                        )}\r\n                        aria-hidden='true'\r\n                      >\r\n                        {currentPageData.title}\r\n                      </span>\r\n                    </h2>\r\n                    <p className={cn(textClasses['body-small'], 'font-medium text-muted-foreground')}>{currentPageData.subtitle}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Chart content with Progressive Loading */}\r\n              <div className='h-[calc(100%-6rem)]'>\r\n                <Suspense\r\n                  fallback={\r\n                    <ChartSkeleton\r\n                      type=\"bar\"\r\n                      height=\"100%\"\r\n                      showHeader={false}\r\n                      showLegend={true}\r\n                      showAxisLabels={true}\r\n                      className=\"h-full\"\r\n                    />\r\n                  }\r\n                >\r\n                  <CurrentComponent timeFrame={timeFrame} />\r\n                </Suspense>\r\n              </div>\r\n            </div>\r\n          </motion.div>\r\n        </AnimatePresence>\r\n      </div>\r\n\r\n      {/* Custom styles */}\r\n      <style jsx>{`\r\n        .transform-style-3d {\r\n          transform-style: preserve-3d;\r\n          perspective: 1000px;\r\n        }\r\n      `}</style>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnalysisPagedWidgetV2;\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/AvailableSoonWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[952,955],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[952,955],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport { CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { UniversalWidgetCard as WidgetCard } from '../UniversalWidgetCard';\r\nimport { ClockIcon } from '@heroicons/react/24/outline';\r\nimport { WidgetComponentProps } from '@/app/types/dashboard';\r\n\r\nfunction AvailableSoonWidget({ widget, isEditMode }: WidgetComponentProps) {\r\n  if (isEditMode) {\r\n    return (\r\n      <WidgetCard widgetType='custom' isEditMode={true}>\r\n        <div className='flex h-full items-center justify-center'>\r\n          <p className='font-medium text-slate-400'>Coming Soon Widget</p>\r\n        </div>\r\n      </WidgetCard>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <WidgetCard widgetType='custom'>\r\n      <CardHeader className='pb-2'>\r\n        <CardTitle className='widget-title flex items-center gap-2'>\r\n          <ClockIcon className='h-5 w-5' />\r\n          {(widget as any).title || 'Coming Soon'}\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent className='flex flex-1 items-center justify-center'>\r\n        <motion.div\r\n          initial={{ opacity: 0, y: 10 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ duration: 0.3 }}\r\n          className='text-center'\r\n        >\r\n          <p className='mb-2 text-lg font-medium text-slate-300'>New Features Coming Soon</p>\r\n          <p className='text-sm text-slate-400'>We&apos;re working on something awesome!</p>\r\n        </motion.div>\r\n      </CardContent>\r\n    </WidgetCard>\r\n  );\r\n}\r\n\r\nexport default AvailableSoonWidget;\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/AwaitLocationQtyWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/DepartmentSelectorWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/Folder3D.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/GoogleDriveUploadToast.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[654,657],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[654,657],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[762,765],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[762,765],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[866,869],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[866,869],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2387,2390],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2387,2390],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { CheckCircleIcon, XMarkIcon } from '@heroicons/react/24/outline';\n\ninterface UploadingFile {\n  id: string;\n  name: string;\n  progress: number;\n  status: 'uploading' | 'completed' | 'error';\n  error?: string;\n}\n\ninterface GoogleDriveUploadToastProps {\n  files: UploadingFile[];\n  onClose: () => void;\n  onRemoveFile: (id: string) => void;\n}\n\nexport const GoogleDriveUploadToast: React.FC<GoogleDriveUploadToastProps> = ({\n  files,\n  onClose,\n  onRemoveFile,\n}) => {\n  if (files.length === 0) return null;\n\n  const uploadingCount = files.filter((f: any) => (f as { status: string }).status === 'uploading').length;\n  const completedCount = files.filter((f: any) => (f as { status: string }).status === 'completed').length;\n  const errorCount = files.filter((f: any) => (f as { status: string }).status === 'error').length;\n\n  return (\n    <AnimatePresence>\n      <motion.div\n        initial={{ opacity: 0, y: 50, scale: 0.9 }}\n        animate={{ opacity: 1, y: 0, scale: 1 }}\n        exit={{ opacity: 0, y: 50, scale: 0.9 }}\n        className='fixed bottom-8 right-8 z-50 overflow-hidden rounded-xl border border-slate-700 bg-slate-800 shadow-2xl'\n        style={{ width: '360px' }}\n      >\n        {/* Header */}\n        <div className='flex items-center justify-between border-b border-slate-700 bg-slate-900 px-4 py-3'>\n          <div className='flex items-center gap-3'>\n            <h3 className='text-sm font-medium text-white'>\n              {uploadingCount > 0 ? 'Uploading files' : 'Upload complete'}\n            </h3>\n            {uploadingCount > 0 && (\n              <div className='flex items-center gap-1'>\n                <div className='h-4 w-4 animate-spin rounded-full border-2 border-blue-400 border-t-transparent' />\n                <span className='text-xs text-slate-400'>\n                  {uploadingCount} of {files.length}\n                </span>\n              </div>\n            )}\n          </div>\n          <button\n            onClick={onClose}\n            className='rounded p-1 text-slate-400 transition-colors hover:bg-slate-700 hover:text-white'\n          >\n            <XMarkIcon className='h-4 w-4' />\n          </button>\n        </div>\n\n        {/* File List */}\n        <div className='max-h-[300px] overflow-y-auto'>\n          {files.map((file: any) => (\n            <div key={file.id} className='border-b border-slate-700/50 px-4 py-3 last:border-0'>\n              <div className='mb-2 flex items-center justify-between'>\n                <div className='flex min-w-0 flex-1 items-center gap-2'>\n                  {(file as { status: string }).status === 'completed' && (\n                    <CheckCircleIcon className='h-4 w-4 flex-shrink-0 text-green-400' />\n                  )}\n                  {(file as { status: string }).status === 'error' && (\n                    <XMarkIcon className='h-4 w-4 flex-shrink-0 text-red-400' />\n                  )}\n                  <span className='truncate text-sm text-slate-200' title={file.name}>\n                    {file.name}\n                  </span>\n                </div>\n                {(file as { status: string }).status !== 'uploading' && (\n                  <button\n                    onClick={() => onRemoveFile(file.id)}\n                    className='ml-2 text-slate-500 transition-colors hover:text-slate-300'\n                  >\n                    <XMarkIcon className='h-3 w-3' />\n                  </button>\n                )}\n              </div>\n\n              {(file as { status: string }).status === 'uploading' && (\n                <div className='relative h-1 w-full overflow-hidden rounded-full bg-slate-700'>\n                  <motion.div\n                    className='absolute left-0 top-0 h-full bg-blue-500'\n                    initial={{ width: 0 }}\n                    animate={{ width: `${file.progress}%` }}\n                    transition={{ duration: 0.3 }}\n                  />\n                </div>\n              )}\n\n              {(file as { status: string }).status === 'error' && file.error && (\n                <p className='mt-1 text-xs text-red-400'>{file.error}</p>\n              )}\n            </div>\n          ))}\n        </div>\n\n        {/* Summary */}\n        {uploadingCount === 0 && (\n          <div className='bg-slate-900/50 px-4 py-2 text-xs text-slate-400'>\n            {completedCount > 0 && (\n              <span className='text-green-400'>{completedCount} uploaded</span>\n            )}\n            {completedCount > 0 && errorCount > 0 && <span> • </span>}\n            {errorCount > 0 && <span className='text-red-400'>{errorCount} failed</span>}\n          </div>\n        )}\n      </motion.div>\n    </AnimatePresence>\n  );\n};\n\nexport default GoogleDriveUploadToast;\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/GrnReportWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2187,2190],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2187,2190],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":566,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":566,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16891,16894],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16891,16894],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * GRN Report Widget\r\n * 遷移至 REST API 架構，移除版本號\r\n * 使用 NestJS GRN API 端點進行數據獲取\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { DatabaseRecord } from '@/lib/types/database';\r\nimport { Download, CheckCircle, Printer } from 'lucide-react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { cn } from '@/lib/utils';\r\nimport { useToast } from '@/components/ui/use-toast';\r\nimport { exportGrnReport } from '@/lib/exportReport';\r\nimport { useReportPrinting } from '@/app/admin/hooks/useReportPrinting';\r\nimport { WidgetSkeleton } from './common/WidgetStates';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '@/components/ui/select-radix';\r\nimport { \r\n  brandColors, \r\n  widgetColors, \r\n  semanticColors,\r\n  getWidgetCategoryColor \r\n} from '@/lib/design-system/colors';\r\nimport { textClasses, getTextClass } from '@/lib/design-system/typography';\r\nimport { spacing, widgetSpacing, spacingUtilities } from '@/lib/design-system/spacing';\r\n\r\ninterface GrnReportWidgetProps {\r\n  title: string;\r\n  reportType: string;\r\n  description?: string;\r\n  apiEndpoint?: string;\r\n}\r\n\r\n// REST API client for GRN endpoints\r\nconst grnApiClient = {\r\n  async getReferences(): Promise<string[]> {\r\n    const response = await fetch('/api/v1/grn/references', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch GRN references: ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data.references || [];\r\n  },\r\n\r\n  async getMaterialCodes(grnRef: string): Promise<string[]> {\r\n    const response = await fetch(`/api/v1/grn/${grnRef}/material-codes`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch material codes: ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data.materialCodes || [];\r\n  },\r\n\r\n  async getReportData(grnRef: string, productCodes?: string[]): Promise<any> {\r\n    const url = new URL(`/api/v1/grn/${grnRef}/report-data`, window.location.origin);\r\n    if (productCodes && productCodes.length > 0) {\r\n      url.searchParams.append('productCodes', JSON.stringify(productCodes));\r\n    }\r\n    \r\n    const response = await fetch(url.toString(), {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch report data: ${response.statusText}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  },\r\n};\r\n\r\nexport const GrnReportWidget = function GrnReportWidget({\r\n  title,\r\n  reportType,\r\n  description,\r\n  apiEndpoint,\r\n}: GrnReportWidgetProps) {\r\n  const { toast } = useToast();\r\n  const [grnRefs, setGrnRefs] = useState<string[]>([]);\r\n  const [selectedGrnRef, setSelectedGrnRef] = useState<string>('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [downloadStatus, setDownloadStatus] = useState<\r\n    'idle' | 'downloading' | 'downloaded' | 'complete'\r\n  >('idle');\r\n  const [progress, setProgress] = useState(0);\r\n  const [performanceMetrics, setPerformanceMetrics] = useState<{\r\n    lastFetchTime?: number;\r\n    optimized?: boolean;\r\n  }>({});\r\n\r\n  // Use unified printing hook\r\n  const { printReport, isPrinting, isServiceAvailable } = useReportPrinting({\r\n    reportType: 'grn',\r\n    onSuccess: () => {\r\n      toast({\r\n        title: 'Success',\r\n        description: 'GRN report sent to print queue',\r\n      });\r\n    },\r\n    onError: error => {\r\n      toast({\r\n        title: 'Error',\r\n        description: (error as { message: string }).message,\r\n        variant: 'destructive',\r\n      });\r\n    },\r\n  });\r\n\r\n  const fetchGrnRefs = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      const startTime = performance.now();\r\n\r\n      const refs = await grnApiClient.getReferences();\r\n      const endTime = performance.now();\r\n\r\n      setGrnRefs(refs);\r\n\r\n      // Set default selection\r\n      if (refs.length > 0 && !selectedGrnRef) {\r\n        setSelectedGrnRef(refs[0]);\r\n      }\r\n\r\n      setPerformanceMetrics({\r\n        lastFetchTime: Math.round(endTime - startTime),\r\n        optimized: true,\r\n      });\r\n    } catch (error) {\r\n      console.error('[GrnReportWidget as string] Error fetching GRN references:', error);\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Failed to fetch GRN references',\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [selectedGrnRef, toast]);\r\n\r\n  // Fetch GRN references when component mounts\r\n  useEffect(() => {\r\n    fetchGrnRefs();\r\n  }, [fetchGrnRefs]);\r\n\r\n  const handleDownload = async () => {\r\n    if (!selectedGrnRef) {\r\n      toast({\r\n        title: 'No GRN Selected',\r\n        description: 'Please select a GRN reference',\r\n        variant: 'destructive',\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (downloadStatus !== 'idle') return;\r\n\r\n    setDownloadStatus('downloading');\r\n    setProgress(0);\r\n\r\n    // Simulate download progress\r\n    const interval = setInterval(() => {\r\n      setProgress(prev => {\r\n        if (prev >= 95) {\r\n          clearInterval(interval);\r\n          return prev;\r\n        }\r\n        return prev + Math.random() * 15;\r\n      });\r\n    }, 300);\r\n\r\n    try {\r\n      // User authentication is handled in the export function\r\n      const userEmail = 'report@system.local';\r\n\r\n      // Get material codes for the selected grn_ref\r\n      const materialCodes = await grnApiClient.getMaterialCodes(selectedGrnRef);\r\n\r\n      if (materialCodes.length === 0) {\r\n        throw new Error('No materials found for the selected GRN reference');\r\n      }\r\n\r\n      // Generate report for each material code\r\n      let successCount = 0;\r\n      for (const materialCode of materialCodes) {\r\n        try {\r\n          const reportData = await grnApiClient.getReportData(selectedGrnRef, [materialCode as string]);\r\n          \r\n          if (reportData && !reportData.error) {\r\n            // Export using existing PDF generation logic\r\n            await exportGrnReport({\r\n              ...reportData,\r\n              uploader_email: userEmail,\r\n              uploader_name: userEmail.split('@')[0],\r\n            });\r\n            successCount++;\r\n          }\r\n        } catch (error) {\r\n          console.error(`Error generating report for material ${materialCode}:`, error);\r\n        }\r\n      }\r\n\r\n      clearInterval(interval);\r\n      setProgress(100);\r\n      setDownloadStatus('downloaded');\r\n\r\n      toast({\r\n        title: 'Success',\r\n        description: `GRN reports generated for ${successCount} material code(s)`,\r\n      });\r\n\r\n      // Reset after 2 seconds\r\n      setTimeout(() => {\r\n        setDownloadStatus('complete');\r\n        setTimeout(() => {\r\n          setDownloadStatus('idle');\r\n          setProgress(0);\r\n        }, 500);\r\n      }, 2000);\r\n    } catch (error) {\r\n      console.error('[GrnReportWidget as string] Download failed:', error);\r\n      clearInterval(interval);\r\n      setDownloadStatus('idle');\r\n      setProgress(0);\r\n\r\n      toast({\r\n        title: 'Error',\r\n        description: error instanceof Error ? (error as { message: string }).message : 'Failed to generate report',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  const handlePrint = async () => {\r\n    if (!selectedGrnRef) {\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Please select a GRN reference',\r\n        variant: 'destructive',\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Get material codes\r\n      const materialCodes = await grnApiClient.getMaterialCodes(selectedGrnRef);\r\n\r\n      if (!materialCodes || materialCodes.length === 0) {\r\n        throw new Error('No material codes found for this GRN reference');\r\n      }\r\n\r\n      // For printing, we'll print the first material code\r\n      const reportData = await grnApiClient.getReportData(selectedGrnRef, [materialCodes[0]]);\r\n      \r\n      if (!reportData || reportData.error) {\r\n        throw new Error(reportData?.error || 'Failed to get report data');\r\n      }\r\n\r\n      console.log('[GrnReportWidget as string] Report data received:', reportData);\r\n\r\n      // Generate PDF using pdf-lib\r\n      const { PDFDocument, rgb, StandardFonts } = await import('pdf-lib');\r\n      const pdfDoc = await PDFDocument.create();\r\n      const font = await pdfDoc.embedFont(StandardFonts.Helvetica);\r\n      const boldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);\r\n\r\n      // Create a landscape page for the GRN report\r\n      const page = pdfDoc.addPage([842, 595]); // A4 Landscape\r\n      const { width, height } = page.getSize();\r\n      let yPosition = height - 40;\r\n\r\n      // Draw GRN Number box (top right)\r\n      page.drawRectangle({\r\n        x: width - 180,\r\n        y: yPosition - 40,\r\n        width: 150,\r\n        height: 35,\r\n        borderColor: rgb(0, 0, 0),\r\n        borderWidth: 2,\r\n      });\r\n      page.drawText('G.R.N. Number:', {\r\n        x: width - 270,\r\n        y: yPosition - 20,\r\n        size: 12,\r\n        font: boldFont,\r\n        color: rgb(0, 0, 0),\r\n      });\r\n      page.drawText(selectedGrnRef, {\r\n        x: width - 160,\r\n        y: yPosition - 20,\r\n        size: 14,\r\n        font: boldFont,\r\n        color: rgb(0, 0, 0),\r\n      });\r\n\r\n      // Draw PASS/FAIL boxes\r\n      page.drawRectangle({\r\n        x: width - 180,\r\n        y: yPosition - 85,\r\n        width: 70,\r\n        height: 30,\r\n        borderColor: rgb(0, 0, 0),\r\n        borderWidth: 1.5,\r\n      });\r\n      page.drawText('PASS', {\r\n        x: width - 160,\r\n        y: yPosition - 70,\r\n        size: 12,\r\n        font: boldFont,\r\n        color: rgb(0, 0, 0),\r\n      });\r\n\r\n      page.drawRectangle({\r\n        x: width - 100,\r\n        y: yPosition - 85,\r\n        width: 70,\r\n        height: 30,\r\n        borderColor: rgb(0, 0, 0),\r\n        borderWidth: 1.5,\r\n      });\r\n      page.drawText('FAIL', {\r\n        x: width - 80,\r\n        y: yPosition - 70,\r\n        size: 12,\r\n        font: boldFont,\r\n        color: rgb(0, 0, 0),\r\n      });\r\n\r\n      // Left side - Material info\r\n      yPosition = height - 60;\r\n      const leftLabels = [\r\n        { label: 'Code:', value: materialCodes[0] },\r\n        { label: 'Description:', value: reportData.material_description || 'N/A' },\r\n        { label: 'Supplier Name:', value: reportData.supplier_name || 'N/A' },\r\n        { label: 'Our Order No.:', value: '' },\r\n        { label: 'Date:', value: reportData.report_date || new Date().toLocaleDateString('en-US') },\r\n      ];\r\n\r\n      leftLabels.forEach((item, index) => {\r\n        page.drawText(item.label, {\r\n          x: 100,\r\n          y: yPosition - index * 20,\r\n          size: 11,\r\n          font: boldFont,\r\n          color: rgb(0, 0, 0),\r\n        });\r\n        page.drawText(item.value, {\r\n          x: 200,\r\n          y: yPosition - index * 20,\r\n          size: 11,\r\n          font: font,\r\n          color: rgb(0, 0, 0),\r\n        });\r\n      });\r\n\r\n      // Draw table headers\r\n      yPosition = height - 180;\r\n      const tableHeaders = [\r\n        { text: 'Supplier Invoice No.', x: 30, width: 120 },\r\n        { text: 'In Date', x: 155, width: 55 },\r\n        { text: 'Package', x: 215, width: 55 },\r\n        { text: 'Qty of Package', x: 275, width: 45 },\r\n        { text: 'Gross WT', x: 325, width: 50 },\r\n        { text: 'Net WT', x: 380, width: 50 },\r\n        { text: 'Pallet WT', x: 435, width: 50 },\r\n        { text: 'Remark', x: 490, width: 60 },\r\n        { text: 'Labels Check', x: 555, width: 60 },\r\n        { text: 'Q.C. Report', x: 620, width: 80 },\r\n        { text: 'Passed', x: 705, width: 50 },\r\n      ];\r\n\r\n      // Draw header row background\r\n      page.drawRectangle({\r\n        x: 25,\r\n        y: yPosition - 20,\r\n        width: 730,\r\n        height: 20,\r\n        color: rgb(0.85, 0.85, 0.85),\r\n      });\r\n\r\n      // Draw headers\r\n      tableHeaders.forEach(header => {\r\n        page.drawText(header.text, {\r\n          x: header.x,\r\n          y: yPosition - 15,\r\n          size: 9,\r\n          font: boldFont,\r\n          color: rgb(0, 0, 0),\r\n        });\r\n      });\r\n\r\n      // Draw table data\r\n      yPosition -= 20;\r\n      const records = reportData.records || [];\r\n      const rowHeight = 20;\r\n\r\n      records.forEach((record: DatabaseRecord, index: number) => {\r\n        // Draw row borders\r\n        page.drawRectangle({\r\n          x: 25,\r\n          y: yPosition - rowHeight,\r\n          width: 730,\r\n          height: rowHeight,\r\n          borderColor: rgb(0.8, 0.8, 0.8),\r\n          borderWidth: 0.5,\r\n        });\r\n\r\n        const yText = yPosition - 15;\r\n\r\n        // Fill table cells with data\r\n        page.drawText(record.supplier_invoice_number || '', {\r\n          x: 30,\r\n          y: yText,\r\n          size: 9,\r\n          font: font,\r\n          color: rgb(0, 0, 0),\r\n        });\r\n\r\n        page.drawText(record.date_received || '', {\r\n          x: 155,\r\n          y: yText,\r\n          size: 9,\r\n          font: font,\r\n          color: rgb(0, 0, 0),\r\n        });\r\n\r\n        page.drawText('Y', {\r\n          x: 215,\r\n          y: yText,\r\n          size: 10,\r\n          font: boldFont,\r\n          color: rgb(0, 0.4, 0),\r\n        });\r\n\r\n        page.drawText((record.package_count || 0).toString(), {\r\n          x: 275,\r\n          y: yText,\r\n          size: 9,\r\n          font: font,\r\n          color: rgb(0, 0, 0),\r\n        });\r\n\r\n        page.drawText((record.gross_weight || 0).toString(), {\r\n          x: 325,\r\n          y: yText,\r\n          size: 9,\r\n          font: font,\r\n          color: rgb(0, 0, 0),\r\n        });\r\n\r\n        page.drawText((record.net_weight || 0).toString(), {\r\n          x: 380,\r\n          y: yText,\r\n          size: 9,\r\n          font: font,\r\n          color: rgb(0, 0, 0),\r\n        });\r\n\r\n        const palletWeight = (record.gross_weight || 0) - (record.net_weight || 0);\r\n        page.drawText(palletWeight.toString(), {\r\n          x: 435,\r\n          y: yText,\r\n          size: 9,\r\n          font: font,\r\n          color: rgb(0, 0, 0),\r\n        });\r\n\r\n        page.drawText('Y', {\r\n          x: 555,\r\n          y: yText,\r\n          size: 10,\r\n          font: boldFont,\r\n          color: rgb(0, 0.4, 0),\r\n        });\r\n\r\n        // Passed column with gray background\r\n        page.drawRectangle({\r\n          x: 705,\r\n          y: yPosition - rowHeight,\r\n          width: 50,\r\n          height: rowHeight,\r\n          color: rgb(0.9, 0.9, 0.9),\r\n        });\r\n        page.drawText('Y', {\r\n          x: 725,\r\n          y: yText,\r\n          size: 10,\r\n          font: boldFont,\r\n          color: rgb(0, 0.4, 0),\r\n        });\r\n\r\n        yPosition -= rowHeight;\r\n      });\r\n\r\n      // Send to print service\r\n      const pdfBytes = await pdfDoc.save();\r\n      const blob = new Blob([pdfBytes], { type: 'application/pdf' });\r\n      await printReport(blob, `GRN_${selectedGrnRef}_${materialCodes[0]}`);\r\n    } catch (error) {\r\n      console.error('[GrnReportWidget as string] Print error:', error);\r\n      toast({\r\n        title: 'Error',\r\n        description: error instanceof Error ? (error as { message: string }).message : 'Failed to print report',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={cn(\r\n      'flex h-full w-full flex-col overflow-hidden rounded-lg border backdrop-blur-sm',\r\n      'border-border bg-card/40'\r\n    )}>\r\n      <div className={cn(\r\n        'flex-shrink-0 border-b px-3 py-2',\r\n        'border-border'\r\n      )}>\r\n        <h3 className={cn(textClasses['body-small'], 'font-semibold text-foreground')}>{title}</h3>\r\n        <p className={cn('mt-0.5', textClasses['label-small'], 'text-muted-foreground')}>{description || 'GRN Report'}</p>\r\n      </div>\r\n      <div className={cn('min-h-0 flex-1 overflow-visible', widgetSpacing.container)}>\r\n        <div className={cn('flex h-full items-center gap-2')}>\r\n          <div className='flex-1'>\r\n            <Select\r\n              value={selectedGrnRef}\r\n              onValueChange={(value) => setSelectedGrnRef(value)}\r\n              disabled={loading || grnRefs.length === 0}\r\n            >\r\n              <SelectTrigger\r\n                className={cn(\r\n                  'h-9 w-full',\r\n                  'bg-background/50 hover:bg-background/70',\r\n                  'border border-input hover:border-input/80',\r\n                  'text-foreground',\r\n                  textClasses['body-small']\r\n                )}\r\n              >\r\n                <SelectValue\r\n                  placeholder={loading ? 'Loading...' : grnRefs.length === 0 ? 'No GRN references' : 'Select GRN reference'}\r\n                />\r\n              </SelectTrigger>\r\n              <SelectContent className={cn('border-border bg-card')}>\r\n                {grnRefs.map((ref: any) => (\r\n                  <SelectItem key={ref} value={ref} className={cn(\r\n                    'text-foreground hover:bg-accent',\r\n                    textClasses['body-small']\r\n                  )}>\r\n                    {ref}\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n            {loading && (\r\n              <p className={cn('mt-1', textClasses['label-small'], 'text-muted-foreground')}>Loading GRN references...</p>\r\n            )}\r\n            {!loading && grnRefs.length === 0 && (\r\n              <p className={cn('mt-1', textClasses['label-small'], 'text-muted-foreground')}>No GRN references found</p>\r\n            )}\r\n          </div>\r\n\r\n          <div className='flex gap-2'>\r\n            {/* Print button */}\r\n            {isServiceAvailable && (\r\n              <Button\r\n                onClick={handlePrint}\r\n                size='sm'\r\n                variant='outline'\r\n                disabled={!selectedGrnRef || isPrinting || loading}\r\n                className={cn(\r\n                  'h-9 gap-2 px-3',\r\n                  'bg-background/50 hover:bg-background/70',\r\n                  'border-border hover:border-border/80',\r\n                  'text-muted-foreground hover:text-foreground',\r\n                  'transition-all duration-200',\r\n                  textClasses['body-small']\r\n                )}\r\n              >\r\n                {isPrinting ? (\r\n                  <WidgetSkeleton type='spinner' className='h-4 w-4' />\r\n                ) : (\r\n                  <Printer className='h-4 w-4' />\r\n                )}\r\n                Print\r\n              </Button>\r\n            )}\r\n\r\n            {/* Download button */}\r\n            <Button\r\n              onClick={handleDownload}\r\n              size='sm'\r\n              disabled={downloadStatus !== 'idle' || !selectedGrnRef || loading}\r\n              className={cn(\r\n                'h-9 gap-2 px-4',\r\n                'bg-gradient-to-r',\r\n                downloadStatus === 'idle'\r\n                  ? getWidgetCategoryColor('reports', 'gradient')\r\n                  : downloadStatus === 'downloading'\r\n                    ? 'from-blue-600 to-cyan-600'\r\n                    : downloadStatus === 'downloaded'\r\n                      ? 'from-green-600 to-emerald-600'\r\n                      : 'from-gray-600 to-gray-700',\r\n                'font-medium text-primary-foreground',\r\n                'transform transition-all duration-300',\r\n                downloadStatus === 'downloaded' && 'scale-95',\r\n                downloadStatus === 'complete' && 'scale-100',\r\n                textClasses['body-small']\r\n              )}\r\n            >\r\n              {downloadStatus === 'idle' ? (\r\n                <>\r\n                  <Download className='h-4 w-4' />\r\n                  Download\r\n                </>\r\n              ) : downloadStatus === 'downloading' ? (\r\n                <>\r\n                  <WidgetSkeleton type='spinner' className='h-4 w-4' />\r\n                  {Math.round(progress)}%\r\n                </>\r\n              ) : downloadStatus === 'downloaded' ? (\r\n                <>\r\n                  <CheckCircle className='h-4 w-4' />\r\n                  Done!\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Download className='h-4 w-4' />\r\n                  Download\r\n                </>\r\n              )}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Performance indicator */}\r\n        {performanceMetrics.optimized && performanceMetrics.lastFetchTime && (\r\n          <div className={cn(\r\n            'mt-2 text-right',\r\n            textClasses['label-small']\r\n          )} style={{ color: semanticColors.success.DEFAULT }}>\r\n            ✓ REST API optimized ({performanceMetrics.lastFetchTime}ms)\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GrnReportWidget;","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/GrnReportWidgetV2.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":591,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":591,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17847,17850],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17847,17850],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * GRN Report Widget V2\r\n * 使用 RPC 函數和 DashboardAPI 優化數據獲取\r\n * PDF 生成邏輯保留在客戶端\r\n * 遷移自原 GrnReportWidget\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { DatabaseRecord } from '@/lib/types/database';\r\nimport { Download, CheckCircle, Printer } from 'lucide-react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { cn } from '@/lib/utils';\r\nimport { useToast } from '@/components/ui/use-toast';\r\nimport { exportGrnReport } from '@/lib/exportReport';\r\nimport { createDashboardAPIClient as createDashboardAPI } from '@/lib/api/admin/DashboardAPI.client';\r\nimport { useReportPrinting } from '@/app/admin/hooks/useReportPrinting';\r\nimport { WidgetSkeleton } from './common/WidgetStates';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '@/components/ui/select-radix';\r\nimport { \r\n  brandColors, \r\n  widgetColors, \r\n  semanticColors,\r\n  getWidgetCategoryColor \r\n} from '@/lib/design-system/colors';\r\nimport { textClasses, getTextClass } from '@/lib/design-system/typography';\r\nimport { spacing, widgetSpacing, spacingUtilities } from '@/lib/design-system/spacing';\r\n\r\ninterface GrnReportWidgetProps {\r\n  title: string;\r\n  reportType: string;\r\n  description?: string;\r\n  apiEndpoint?: string;\r\n}\r\n\r\nexport const GrnReportWidgetV2 = function GrnReportWidgetV2({\r\n  title,\r\n  reportType,\r\n  description,\r\n  apiEndpoint,\r\n}: GrnReportWidgetProps) {\r\n  const { toast } = useToast();\r\n  const [grnRefs, setGrnRefs] = useState<string[]>([]);\r\n  const [selectedGrnRef, setSelectedGrnRef] = useState<string>('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [downloadStatus, setDownloadStatus] = useState<\r\n    'idle' | 'downloading' | 'downloaded' | 'complete'\r\n  >('idle');\r\n  const [progress, setProgress] = useState(0);\r\n  const [performanceMetrics, setPerformanceMetrics] = useState<{\r\n    lastFetchTime?: number;\r\n    optimized?: boolean;\r\n  }>({});\r\n\r\n  const api = createDashboardAPI();\r\n\r\n  // Use unified printing hook\r\n  const { printReport, isPrinting, isServiceAvailable } = useReportPrinting({\r\n    reportType: 'grn',\r\n    onSuccess: () => {\r\n      toast({\r\n        title: 'Success',\r\n        description: 'GRN report sent to print queue',\r\n      });\r\n    },\r\n    onError: error => {\r\n      toast({\r\n        title: 'Error',\r\n        description: (error as { message: string }).message,\r\n        variant: 'destructive',\r\n      });\r\n    },\r\n  });\r\n\r\n  const fetchGrnRefs = useCallback(async () => {\r\n    try {\r\n      const startTime = performance.now();\r\n\r\n      const result = await api.fetch({\r\n        widgetIds: ['grn_references'],\r\n        params: {\r\n          dataSource: 'grn_references',\r\n          limit: 1000,\r\n          offset: 0,\r\n        },\r\n      });\r\n\r\n      const endTime = performance.now();\r\n\r\n      if (result.widgets && result.widgets.length > 0) {\r\n        const widgetData = result.widgets[0];\r\n\r\n        if (widgetData.data.error) {\r\n          console.error('[GrnReportWidgetV2] Error:', widgetData.data.error);\r\n          toast({\r\n            title: 'Error',\r\n            description: 'Failed to fetch GRN references',\r\n            variant: 'destructive',\r\n          });\r\n          return;\r\n        }\r\n\r\n        const refs = widgetData.data.value || [];\r\n        setGrnRefs(refs);\r\n\r\n        // Set default selection\r\n        if (refs.length > 0 && !selectedGrnRef) {\r\n          setSelectedGrnRef(refs[0]);\r\n        }\r\n\r\n        setPerformanceMetrics({\r\n          lastFetchTime: Math.round(endTime - startTime),\r\n          optimized: true,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('[GrnReportWidgetV2] Error:', error);\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Failed to fetch GRN references',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  }, [api, toast, selectedGrnRef]);\r\n\r\n  // Fetch GRN references when component mounts\r\n  useEffect(() => {\r\n    fetchGrnRefs();\r\n  }, [fetchGrnRefs]);\r\n\r\n  const handleDownload = async () => {\r\n    if (!selectedGrnRef) {\r\n      toast({\r\n        title: 'No GRN Selected',\r\n        description: 'Please select a GRN reference',\r\n        variant: 'destructive',\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (downloadStatus !== 'idle') return;\r\n\r\n    setDownloadStatus('downloading');\r\n    setProgress(0);\r\n\r\n    // Simulate download progress\r\n    const interval = setInterval(() => {\r\n      setProgress(prev => {\r\n        if (prev >= 95) {\r\n          clearInterval(interval);\r\n          return prev;\r\n        }\r\n        return prev + Math.random() * 15;\r\n      });\r\n    }, 300);\r\n\r\n    try {\r\n      // User authentication is handled in the export function\r\n      // Using default email for now - this should be provided by the server\r\n      const userEmail = 'report@system.local';\r\n\r\n      // Get material codes for the selected grn_ref using RPC\r\n      const materialResult = await api.fetch({\r\n        widgetIds: ['grn_material_codes'],\r\n        params: {\r\n          dataSource: 'grn_material_codes',\r\n          staticValue: selectedGrnRef,\r\n        },\r\n      });\r\n\r\n      if (!materialResult.widgets || materialResult.widgets.length === 0) {\r\n        throw new Error('Failed to fetch material codes');\r\n      }\r\n\r\n      const materialCodes = materialResult.widgets[0].data.value || [];\r\n\r\n      if (materialCodes.length === 0) {\r\n        throw new Error('No materials found for the selected GRN reference');\r\n      }\r\n\r\n      // Generate report for each material code\r\n      let successCount = 0;\r\n      for (const materialCode of materialCodes) {\r\n        // Fetch report data using RPC\r\n        const reportResult = await api.fetch({\r\n          widgetIds: ['grn_report_data'],\r\n          params: {\r\n            dataSource: 'grn_report_data',\r\n            staticValue: selectedGrnRef,\r\n            productCodes: [materialCode as string],\r\n          },\r\n        });\r\n\r\n        if (reportResult.widgets && reportResult.widgets.length > 0) {\r\n          const reportData = reportResult.widgets[0].data.value;\r\n          if (reportData && !reportData.error) {\r\n            // Export using existing PDF generation logic\r\n            await exportGrnReport({\r\n              ...reportData,\r\n              uploader_email: userEmail,\r\n              uploader_name: userEmail.split('@')[0], // Simple fallback\r\n            });\r\n            successCount++;\r\n          }\r\n        }\r\n      }\r\n\r\n      clearInterval(interval);\r\n      setProgress(100);\r\n      setDownloadStatus('downloaded');\r\n\r\n      toast({\r\n        title: 'Success',\r\n        description: `GRN reports generated for ${successCount} material code(s)`,\r\n      });\r\n\r\n      // Reset after 2 seconds\r\n      setTimeout(() => {\r\n        setDownloadStatus('complete');\r\n        setTimeout(() => {\r\n          setDownloadStatus('idle');\r\n          setProgress(0);\r\n        }, 500);\r\n      }, 2000);\r\n    } catch (error) {\r\n      console.error('[GrnReportWidgetV2] Download failed:', error);\r\n      clearInterval(interval);\r\n      setDownloadStatus('idle');\r\n      setProgress(0);\r\n\r\n      toast({\r\n        title: 'Error',\r\n        description: error instanceof Error ? (error as { message: string }).message : 'Failed to generate report',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  const handlePrint = async () => {\r\n    if (!selectedGrnRef) {\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Please select a GRN reference',\r\n        variant: 'destructive',\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Get material codes using RPC\r\n      const materialResult = await api.fetch({\r\n        widgetIds: ['grn_material_codes'],\r\n        params: {\r\n          dataSource: 'grn_material_codes',\r\n          staticValue: selectedGrnRef,\r\n        },\r\n      });\r\n\r\n      if (!materialResult.widgets || materialResult.widgets.length === 0) {\r\n        throw new Error('Failed to fetch material codes');\r\n      }\r\n\r\n      const materialCodes = materialResult.widgets[0].data.value || [];\r\n\r\n      if (!materialCodes || materialCodes.length === 0) {\r\n        throw new Error('No material codes found for this GRN reference');\r\n      }\r\n\r\n      // User authentication is handled in the print service\r\n      const userEmail = 'report@system.local';\r\n\r\n      // For printing, we'll just print the first material code\r\n      // Fetch report data using RPC\r\n      const reportResult = await api.fetch({\r\n        widgetIds: ['grn_report_data'],\r\n        params: {\r\n          dataSource: 'grn_report_data',\r\n          staticValue: selectedGrnRef,\r\n          productCodes: [materialCodes[0]],\r\n        },\r\n      });\r\n\r\n      if (!reportResult.widgets || reportResult.widgets.length === 0) {\r\n        throw new Error('Failed to get report data');\r\n      }\r\n\r\n      const reportData = reportResult.widgets[0].data.value;\r\n      if (!reportData || reportData.error) {\r\n        throw new Error(reportData?.error || 'Failed to get report data');\r\n      }\r\n\r\n      console.log('[GrnReportWidgetV2] Report data received:', reportData);\r\n\r\n      // Generate a proper PDF from the GRN report data\r\n      const pdfLib = await import('@/lib/services/unified-pdf-service');\r\n      const { PDFDocument, rgb, StandardFonts } = await pdfLib.getPDFLib();\r\n      const pdfDoc = await PDFDocument.create();\r\n      const font = await pdfDoc.embedFont(StandardFonts.Helvetica);\r\n      const boldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);\r\n\r\n      // Create a landscape page for the GRN report (Excel style)\r\n      const page = pdfDoc.addPage([842, 595]); // A4 Landscape\r\n      const { width, height } = page.getSize();\r\n      let yPosition = height - 40;\r\n\r\n      // Draw GRN Number box (top right)\r\n      page.drawRectangle({\r\n        x: width - 180,\r\n        y: yPosition - 40,\r\n        width: 150,\r\n        height: 35,\r\n        borderColor: rgb(0, 0, 0),\r\n        borderWidth: 2,\r\n      });\r\n      page.drawText('G.R.N. Number:', {\r\n        x: width - 270,\r\n        y: yPosition - 20,\r\n        size: 12,\r\n        font: boldFont,\r\n        color: rgb(0, 0, 0),\r\n      });\r\n      page.drawText(selectedGrnRef, {\r\n        x: width - 160,\r\n        y: yPosition - 20,\r\n        size: 14,\r\n        font: boldFont,\r\n        color: rgb(0, 0, 0),\r\n      });\r\n\r\n      // Draw PASS/FAIL boxes\r\n      page.drawRectangle({\r\n        x: width - 180,\r\n        y: yPosition - 85,\r\n        width: 70,\r\n        height: 30,\r\n        borderColor: rgb(0, 0, 0),\r\n        borderWidth: 1.5,\r\n      });\r\n      page.drawText('PASS', {\r\n        x: width - 160,\r\n        y: yPosition - 70,\r\n        size: 12,\r\n        font: boldFont,\r\n        color: rgb(0, 0, 0),\r\n      });\r\n\r\n      page.drawRectangle({\r\n        x: width - 100,\r\n        y: yPosition - 85,\r\n        width: 70,\r\n        height: 30,\r\n        borderColor: rgb(0, 0, 0),\r\n        borderWidth: 1.5,\r\n      });\r\n      page.drawText('FAIL', {\r\n        x: width - 80,\r\n        y: yPosition - 70,\r\n        size: 12,\r\n        font: boldFont,\r\n        color: rgb(0, 0, 0),\r\n      });\r\n\r\n      // Left side - Material info\r\n      yPosition = height - 60;\r\n      const leftLabels = [\r\n        { label: 'Code:', value: materialCodes[0] },\r\n        { label: 'Description:', value: reportData.material_description || 'N/A' },\r\n        { label: 'Supplier Name:', value: reportData.supplier_name || 'N/A' },\r\n        { label: 'Our Order No.:', value: '' },\r\n        { label: 'Date:', value: reportData.report_date || new Date().toLocaleDateString('en-US') },\r\n      ];\r\n\r\n      leftLabels.forEach((item, index) => {\r\n        page.drawText(item.label, {\r\n          x: 100,\r\n          y: yPosition - index * 20,\r\n          size: 11,\r\n          font: boldFont,\r\n          color: rgb(0, 0, 0),\r\n        });\r\n        page.drawText(item.value, {\r\n          x: 200,\r\n          y: yPosition - index * 20,\r\n          size: 11,\r\n          font: font,\r\n          color: rgb(0, 0, 0),\r\n        });\r\n      });\r\n\r\n      // Draw table headers\r\n      yPosition = height - 180;\r\n      const tableHeaders = [\r\n        { text: 'Supplier Invoice No.', x: 30, width: 120 },\r\n        { text: 'In Date', x: 155, width: 55 },\r\n        { text: 'Package', x: 215, width: 55 },\r\n        { text: 'Qty of Package', x: 275, width: 45 },\r\n        { text: 'Gross WT', x: 325, width: 50 },\r\n        { text: 'Net WT', x: 380, width: 50 },\r\n        { text: 'Pallet WT', x: 435, width: 50 },\r\n        { text: 'Remark', x: 490, width: 60 },\r\n        { text: 'Labels Check', x: 555, width: 60 },\r\n        { text: 'Q.C. Report', x: 620, width: 80 },\r\n        { text: 'Passed', x: 705, width: 50 },\r\n      ];\r\n\r\n      // Draw header row background\r\n      page.drawRectangle({\r\n        x: 25,\r\n        y: yPosition - 20,\r\n        width: 730,\r\n        height: 20,\r\n        color: rgb(0.85, 0.85, 0.85),\r\n      });\r\n\r\n      // Draw headers\r\n      tableHeaders.forEach(header => {\r\n        page.drawText(header.text, {\r\n          x: header.x,\r\n          y: yPosition - 15,\r\n          size: 9,\r\n          font: boldFont,\r\n          color: rgb(0, 0, 0),\r\n        });\r\n      });\r\n\r\n      // Draw table data\r\n      yPosition -= 20;\r\n      const records = reportData.records || [];\r\n      const rowHeight = 20;\r\n\r\n      records.forEach((record: DatabaseRecord, index: number) => {\r\n        // Draw row borders\r\n        page.drawRectangle({\r\n          x: 25,\r\n          y: yPosition - rowHeight,\r\n          width: 730,\r\n          height: rowHeight,\r\n          borderColor: rgb(0.8, 0.8, 0.8),\r\n          borderWidth: 0.5,\r\n        });\r\n\r\n        const yText = yPosition - 15;\r\n\r\n        // Supplier Invoice No\r\n        page.drawText(record.supplier_invoice_number || '', {\r\n          x: 30,\r\n          y: yText,\r\n          size: 9,\r\n          font: font,\r\n          color: rgb(0, 0, 0),\r\n        });\r\n\r\n        // Date\r\n        page.drawText(record.date_received || '', {\r\n          x: 155,\r\n          y: yText,\r\n          size: 9,\r\n          font: font,\r\n          color: rgb(0, 0, 0),\r\n        });\r\n\r\n        // Package (with Y for Yes)\r\n        page.drawText('Y', {\r\n          x: 215,\r\n          y: yText,\r\n          size: 10,\r\n          font: boldFont,\r\n          color: rgb(0, 0.4, 0),\r\n        });\r\n\r\n        // Qty of Package\r\n        page.drawText((record.package_count || 0).toString(), {\r\n          x: 275,\r\n          y: yText,\r\n          size: 9,\r\n          font: font,\r\n          color: rgb(0, 0, 0),\r\n        });\r\n\r\n        // Gross Weight\r\n        page.drawText((record.gross_weight || 0).toString(), {\r\n          x: 325,\r\n          y: yText,\r\n          size: 9,\r\n          font: font,\r\n          color: rgb(0, 0, 0),\r\n        });\r\n\r\n        // Net Weight\r\n        page.drawText((record.net_weight || 0).toString(), {\r\n          x: 380,\r\n          y: yText,\r\n          size: 9,\r\n          font: font,\r\n          color: rgb(0, 0, 0),\r\n        });\r\n\r\n        // Calculate pallet weight (gross - net)\r\n        const palletWeight = (record.gross_weight || 0) - (record.net_weight || 0);\r\n        page.drawText(palletWeight.toString(), {\r\n          x: 435,\r\n          y: yText,\r\n          size: 9,\r\n          font: font,\r\n          color: rgb(0, 0, 0),\r\n        });\r\n\r\n        // Labels Check (Y for Yes)\r\n        page.drawText('Y', {\r\n          x: 555,\r\n          y: yText,\r\n          size: 10,\r\n          font: boldFont,\r\n          color: rgb(0, 0.4, 0),\r\n        });\r\n\r\n        // Passed column (with Y in gray area)\r\n        page.drawRectangle({\r\n          x: 705,\r\n          y: yPosition - rowHeight,\r\n          width: 50,\r\n          height: rowHeight,\r\n          color: rgb(0.9, 0.9, 0.9),\r\n        });\r\n        page.drawText('Y', {\r\n          x: 725,\r\n          y: yText,\r\n          size: 10,\r\n          font: boldFont,\r\n          color: rgb(0, 0.4, 0),\r\n        });\r\n\r\n        yPosition -= rowHeight;\r\n      });\r\n\r\n      // Send to print service\r\n      const pdfBytes = await pdfDoc.save();\r\n      const blob = new Blob([pdfBytes], { type: 'application/pdf' });\r\n      await printReport(blob, `GRN_${selectedGrnRef}_${materialCodes[0]}`);\r\n    } catch (error) {\r\n      console.error('[GrnReportWidgetV2] Print error:', error);\r\n      toast({\r\n        title: 'Error',\r\n        description: error instanceof Error ? (error as { message: string }).message : 'Failed to print report',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={cn(\r\n      'flex h-full w-full flex-col overflow-hidden rounded-lg border backdrop-blur-sm',\r\n      'border-border bg-card/40'\r\n    )}>\r\n      <div className={cn(\r\n        'flex-shrink-0 border-b px-3 py-2',\r\n        'border-border'\r\n      )}>\r\n        <h3 className={cn(textClasses['body-small'], 'font-semibold text-foreground')}>{title}</h3>\r\n        <p className={cn('mt-0.5', textClasses['label-small'], 'text-muted-foreground')}>{description || 'GRN Report'}</p>\r\n      </div>\r\n      <div className={cn('min-h-0 flex-1 overflow-visible', widgetSpacing.container)}>\r\n        <div className={cn('flex h-full items-center gap-2')}>\r\n          <div className='flex-1'>\r\n            <Select\r\n              value={selectedGrnRef}\r\n              onValueChange={(value) => setSelectedGrnRef(value)}\r\n              disabled={grnRefs.length === 0}\r\n            >\r\n              <SelectTrigger\r\n                className={cn(\r\n                  'h-9 w-full',\r\n                  'bg-background/50 hover:bg-background/70',\r\n                  'border border-input hover:border-input/80',\r\n                  'text-foreground',\r\n                  textClasses['body-small']\r\n                )}\r\n              >\r\n                <SelectValue\r\n                  placeholder={grnRefs.length === 0 ? 'Loading...' : 'Select GRN reference'}\r\n                />\r\n              </SelectTrigger>\r\n              <SelectContent className={cn('border-border bg-card')}>\r\n                {grnRefs.map((ref: any) => (\r\n                  <SelectItem key={ref} value={ref} className={cn(\r\n                    'text-foreground hover:bg-accent',\r\n                    textClasses['body-small']\r\n                  )}>\r\n                    {ref}\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n            {grnRefs.length === 0 && (\r\n              <p className={cn('mt-1', textClasses['label-small'], 'text-muted-foreground')}>No GRN references found</p>\r\n            )}\r\n          </div>\r\n\r\n          <div className='flex gap-2'>\r\n            {/* Print button */}\r\n            {isServiceAvailable && (\r\n              <Button\r\n                onClick={handlePrint}\r\n                size='sm'\r\n                variant='outline'\r\n                disabled={!selectedGrnRef || isPrinting}\r\n                className={cn(\r\n                  'h-9 gap-2 px-3',\r\n                  'bg-background/50 hover:bg-background/70',\r\n                  'border-border hover:border-border/80',\r\n                  'text-muted-foreground hover:text-foreground',\r\n                  'transition-all duration-200',\r\n                  textClasses['body-small']\r\n                )}\r\n              >\r\n                {isPrinting ? (\r\n                  <WidgetSkeleton type='spinner' className='h-4 w-4' />\r\n                ) : (\r\n                  <Printer className='h-4 w-4' />\r\n                )}\r\n                Print\r\n              </Button>\r\n            )}\r\n\r\n            {/* Download button */}\r\n            <Button\r\n              onClick={handleDownload}\r\n              size='sm'\r\n              disabled={downloadStatus !== 'idle' || !selectedGrnRef}\r\n              className={cn(\r\n                'h-9 gap-2 px-4',\r\n                'bg-gradient-to-r',\r\n                downloadStatus === 'idle'\r\n                  ? getWidgetCategoryColor('reports', 'gradient')\r\n                  : downloadStatus === 'downloading'\r\n                    ? 'from-blue-600 to-cyan-600'\r\n                    : downloadStatus === 'downloaded'\r\n                      ? 'from-green-600 to-emerald-600'\r\n                      : 'from-gray-600 to-gray-700',\r\n                'font-medium text-primary-foreground',\r\n                'transform transition-all duration-300',\r\n                downloadStatus === 'downloaded' && 'scale-95',\r\n                downloadStatus === 'complete' && 'scale-100',\r\n                textClasses['body-small']\r\n              )}\r\n            >\r\n              {downloadStatus === 'idle' ? (\r\n                <>\r\n                  <Download className='h-4 w-4' />\r\n                  Download\r\n                </>\r\n              ) : downloadStatus === 'downloading' ? (\r\n                <>\r\n                  <WidgetSkeleton type='spinner' className='h-4 w-4' />\r\n                  {Math.round(progress)}%\r\n                </>\r\n              ) : downloadStatus === 'downloaded' ? (\r\n                <>\r\n                  <CheckCircle className='h-4 w-4' />\r\n                  Done!\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Download className='h-4 w-4' />\r\n                  Download\r\n                </>\r\n              )}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Performance indicator */}\r\n        {performanceMetrics.optimized && performanceMetrics.lastFetchTime && (\r\n          <div className={cn(\r\n            'mt-2 text-right',\r\n            textClasses['label-small']\r\n          )} style={{ color: semanticColors.success.DEFAULT }}>\r\n            ✓ Server-optimized ({performanceMetrics.lastFetchTime}ms)\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GrnReportWidgetV2;\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/HistoryTreeV2.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":208,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7121,7124],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7121,7124],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * 統一歷史記錄組件 V2 - Enhanced Version with Progressive Loading\r\n * 顯示系統全局歷史記錄\r\n * \r\n * Features:\r\n * - 使用 useUnifiedAPI hook 統一數據獲取\r\n * - Progressive Loading with useInViewport\r\n * - Timeline 組件顯示歷史記錄\r\n * - Client-side 事件合併處理\r\n * - 保留 Server Actions + RPC fallback\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useMemo, useCallback, useRef } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport {\r\n  ClockIcon,\r\n  CubeIcon as Package2,\r\n  TruckIcon,\r\n  PrinterIcon,\r\n  CheckCircleIcon,\r\n  XCircleIcon,\r\n  ArrowRightIcon,\r\n} from '@heroicons/react/24/outline';\r\nimport { DocumentArrowDownIcon, ClipboardDocumentListIcon } from '@heroicons/react/24/outline';\r\nimport { TraditionalWidgetComponentProps } from '@/app/types/dashboard';\r\nimport { CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { UniversalWidgetCard as WidgetCard } from '../UniversalWidgetCard';\r\nimport { Timeline } from '@/components/ui/timeline';\r\nimport { format } from 'date-fns';\r\nimport { fromDbTime } from '@/app/utils/timezone';\r\nimport {\r\n  WidgetTitle,\r\n  WidgetText,\r\n  WidgetLabel,\r\n  WidgetTextStyles,\r\n  GlowStyles,\r\n} from '../WidgetTypography';\r\nimport { cn } from '@/lib/utils';\r\nimport { \r\n  brandColors, \r\n  widgetColors, \r\n  semanticColors,\r\n  getWidgetCategoryColor \r\n} from '@/lib/design-system/colors';\r\nimport { textClasses, getTextClass } from '@/lib/design-system/typography';\r\nimport { spacing, widgetSpacing } from '@/lib/design-system/spacing';\r\nimport { createDashboardAPIClient as createDashboardAPI } from '@/lib/api/admin/DashboardAPI.client';\r\nimport { useRestAPI } from '@/app/admin/hooks/useUnifiedAPI';\r\nimport { useInViewport, InViewportPresets } from '@/app/admin/hooks/useInViewport';\r\nimport { WidgetSkeleton } from './common/WidgetStates';\r\n\r\ninterface MergedEvent {\r\n  id: number;\r\n  time: string;\r\n  action: string;\r\n  plt_num: string | null;\r\n  loc: string | null;\r\n  remark: string;\r\n  user_id: number | null;\r\n  user_name: string;\r\n  doc_url: string | null;\r\n  merged_plt_nums: string[];\r\n  merged_count: number;\r\n}\r\n\r\n\r\ninterface HistoryTreeV2Props extends TraditionalWidgetComponentProps {\r\n  useGraphQL?: boolean;\r\n}\r\n\r\n// 根據 action 類型返回對應的圖標\r\nconst getActionIcon = (action: string) => {\r\n  const iconClass = 'h-3 w-3 text-foreground';\r\n\r\n  if (action.includes('Print') || action.includes('Label')) {\r\n    return <PrinterIcon className={iconClass} />;\r\n  } else if (action.includes('QC') || action.includes('Finished')) {\r\n    return <CheckCircleIcon className={iconClass} />;\r\n  } else if (action.includes('Transfer') || action.includes('Move')) {\r\n    return <TruckIcon className={iconClass} />;\r\n  } else if (action.includes('GRN') || action.includes('Receiving')) {\r\n    return <DocumentArrowDownIcon className={iconClass} />;\r\n  } else if (action.includes('Order') || action.includes('Load')) {\r\n    return <ClipboardDocumentListIcon className={iconClass} />;\r\n  } else if (action.includes('Void') || action.includes('Delete')) {\r\n    return <XCircleIcon className={iconClass} />;\r\n  } else {\r\n    return <ArrowRightIcon className={iconClass} />;\r\n  }\r\n};\r\n\r\n// 格式化合併後的事件標題\r\nconst formatEventTitle = (event: MergedEvent): string => {\r\n  const userName = event.user_name || `User ${event.user_id || 'Unknown'}`;\r\n\r\n  if (event.merged_count > 1) {\r\n    // 批量操作\r\n    if (event.action.includes('Print') || event.action.includes('Label')) {\r\n      return `Print Labels By ${userName}`;\r\n    } else if (event.action.includes('Transfer')) {\r\n      return `Transfer Done By ${userName}`;\r\n    } else if (event.action.includes('QC')) {\r\n      return `QC Done By ${userName}`;\r\n    } else if (event.action.includes('GRN') || event.action.includes('Receiving')) {\r\n      return `GRN Received By ${userName}`;\r\n    } else {\r\n      return `${event.action} By ${userName}`;\r\n    }\r\n  } else {\r\n    // 單個操作\r\n    if (event.action.includes('Order') && event.action.includes('Upload')) {\r\n      return `Order Upload By ${userName}`;\r\n    } else if (event.action.includes('GRN') || event.action.includes('Receiving')) {\r\n      return `GRN Received By ${userName}`;\r\n    } else if (event.action.includes('QC')) {\r\n      return `QC Done By ${userName}`;\r\n    } else if (event.action.includes('Transfer')) {\r\n      return `Transfer Done By ${userName}`;\r\n    } else if (event.action.includes('Product') && event.action.includes('Update')) {\r\n      return `Product Update By ${userName}`;\r\n    } else {\r\n      return `${event.action} By ${userName}`;\r\n    }\r\n  }\r\n};\r\n\r\n// 格式化事件描述\r\nconst formatEventDescription = (event: MergedEvent): string => {\r\n  const parts: string[] = [];\r\n\r\n  // 根據事件類型添加具體信息\r\n  if (event.action.includes('Order') && event.action.includes('Upload')) {\r\n    // Order Upload - 顯示訂單號\r\n    const orderMatch = event.remark?.match(/\\d{6}/);\r\n    if (orderMatch) {\r\n      parts.push(`Order: ${orderMatch[0]}`);\r\n    } else if (event.merged_plt_nums.length > 0) {\r\n      parts.push(`Order: ${event.merged_plt_nums[0]}`);\r\n    }\r\n  } else if (event.action.includes('GRN') || event.action.includes('Receiving')) {\r\n    // GRN - 顯示 GRN 號碼和數量\r\n    const grnMatch = event.remark?.match(/GRN:\\s*(\\w+)/i);\r\n    if (grnMatch) {\r\n      if (event.merged_count > 1) {\r\n        parts.push(`GRN: ${grnMatch[1]}, ${event.merged_count} PLT`);\r\n      } else {\r\n        parts.push(`GRN: ${grnMatch[1]}`);\r\n      }\r\n    } else if (event.merged_count > 1) {\r\n      parts.push(`${event.merged_count} PLT`);\r\n    }\r\n  } else if (event.action.includes('QC')) {\r\n    // QC - 顯示棧板數量\r\n    if (event.merged_count > 1) {\r\n      parts.push(`${event.merged_count} pallets`);\r\n    } else if (event.merged_plt_nums.length > 0) {\r\n      parts.push(`PLT: ${event.merged_plt_nums[0]}`);\r\n    }\r\n    // 顯示其他 QC 信息\r\n    if (event.remark && event.remark !== '-' && !event.remark.includes('Material:')) {\r\n      parts.push(event.remark);\r\n    }\r\n  } else if (event.action.includes('Transfer')) {\r\n    // Transfer - 顯示轉移數量\r\n    if (event.merged_count > 1) {\r\n      parts.push(`${event.merged_count} pallets`);\r\n    } else if (event.merged_plt_nums.length > 0) {\r\n      parts.push(`PLT: ${event.merged_plt_nums[0]}`);\r\n    }\r\n  } else if (event.action.includes('Print') || event.action.includes('Label')) {\r\n    // Print - 顯示打印數量\r\n    if (event.merged_count > 1) {\r\n      parts.push(`${event.merged_count} labels`);\r\n    } else {\r\n      parts.push(`1 label`);\r\n    }\r\n  } else {\r\n    // 其他操作 - 顯示基本信息\r\n    if (event.merged_plt_nums.length > 0) {\r\n      parts.push(`PLT: ${event.merged_plt_nums[0]}`);\r\n    }\r\n    if (event.remark && event.remark !== '-') {\r\n      parts.push(event.remark);\r\n    }\r\n  }\r\n\r\n  return parts.join(' • ');\r\n};\r\n\r\nexport const HistoryTreeV2 = React.memo(function HistoryTreeV2({\r\n  widget,\r\n  isEditMode,\r\n  useGraphQL,\r\n}: HistoryTreeV2Props) {\r\n  const widgetRef = useRef<HTMLDivElement>(null);\r\n  \r\n  // Progressive Loading - 檢測 widget 是否在視窗內\r\n  const { isInViewport, hasBeenInViewport } = useInViewport(widgetRef, InViewportPresets.chart);\r\n  \r\n  // Use REST API directly\r\n  const {\r\n    data,\r\n    loading,\r\n    error,\r\n    refetch,\r\n  } = useRestAPI<{ events?: MergedEvent[]; metadata?: any }>('/api/dashboard/widgets/history-tree', 'GET', {\r\n    variables: { limit: 50, offset: 0 },\r\n    skip: isEditMode || !hasBeenInViewport, // Progressive Loading\r\n    widgetId: 'history-tree-v2',\r\n    onError: (err) => {\r\n      console.error('History tree error:', err);\r\n    },\r\n  });\r\n\r\n  // 定義 mode 和 performanceMetrics 變數\r\n  const mode = 'rest-api'; // 使用 REST API 模式\r\n  const performanceMetrics = useMemo(() => ({\r\n    queryTime: data?.metadata?.queryTime || 0,\r\n    dataSource: data?.metadata?.dataSource || 'server',\r\n    optimized: true,\r\n  }), [data?.metadata]);\r\n\r\n  // 處理 REST API 數據\r\n  const displayEvents = useMemo(() => {\r\n    // REST API 返回的數據已經被後端處理過\r\n    if (data?.events) {\r\n      return data.events;\r\n    }\r\n    \r\n    return [];\r\n  }, [data]);\r\n  const metadata = data?.metadata || {};\r\n\r\n  // 將事件轉換為 Timeline 組件需要的格式\r\n  const timelineItems = useMemo(() => {\r\n    return displayEvents.map((event: MergedEvent) => ({\r\n      date: event.time,\r\n      title: formatEventTitle(event),\r\n      description: formatEventDescription(event),\r\n      icon: getActionIcon(event.action),\r\n    }));\r\n  }, [displayEvents]);\r\n\r\n  // Progressive Loading - 如果還未進入視窗，顯示 skeleton\r\n  if (!hasBeenInViewport && !isEditMode) {\r\n    return (\r\n      <motion.div ref={widgetRef} initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className='h-full'>\r\n        <WidgetCard widgetType='custom'>\r\n          <CardHeader className='pb-3'>\r\n            <CardTitle>History Tree</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <WidgetSkeleton type='timeline' rows={5} />\r\n          </CardContent>\r\n        </WidgetCard>\r\n      </motion.div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <motion.div ref={widgetRef} initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className='h-full'>\r\n      <WidgetCard widgetType='custom' isEditMode={isEditMode}>\r\n        <CardHeader className='pb-4'>\r\n          <CardTitle className='flex items-center justify-between'>\r\n            <span>History Tree</span>\r\n            <div className='flex items-center gap-2'>\r\n              {mode === 'rest-api' && (\r\n                <span className={cn(textClasses['label-small'], 'text-primary')}>\r\n                  🚀 REST API\r\n                </span>\r\n              )}\r\n              {performanceMetrics.optimized && (\r\n                <span className={cn(textClasses['label-small'], 'text-success')}>\r\n                  ⚡ Optimized\r\n                </span>\r\n              )}\r\n              {!isEditMode && performanceMetrics?.queryTime && (\r\n                <span className={cn(textClasses['label-small'], 'text-muted-foreground')}>\r\n                  {performanceMetrics.queryTime}ms\r\n                  {performanceMetrics.dataSource === 'cache' && ' (cached)'}\r\n                </span>\r\n              )}\r\n            </div>\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {loading ? (\r\n            <WidgetSkeleton type='timeline' rows={3} />\r\n          ) : error ? (\r\n            <div className='space-y-2'>\r\n              <WidgetText size='xs' glow='red' className='py-4 text-center'>\r\n                {(error as { message: string }).message || 'Failed to load history data'}\r\n              </WidgetText>\r\n              {mode === 'rest-api' && (\r\n                <WidgetText size='xs' className={cn('text-center', textClasses['body-small'], 'text-muted-foreground')}>\r\n                  REST API connection failed. Please try again.\r\n                </WidgetText>\r\n              )}\r\n            </div>\r\n          ) : displayEvents.length === 0 ? (\r\n            <WidgetText size='xs' glow='gray' className='py-8 text-center'>\r\n              No history records found\r\n            </WidgetText>\r\n          ) : (\r\n            <>\r\n              <Timeline\r\n                items={timelineItems}\r\n                initialCount={30}\r\n                className='h-full'\r\n                showMoreText='Show More'\r\n                showLessText='Show Less'\r\n                dotClassName={cn(\r\n                  'bg-gradient-to-br',\r\n                  getWidgetCategoryColor('special', 'gradient'),\r\n                  'border-2 border-border'\r\n                )}\r\n                lineClassName='border-border'\r\n                titleClassName={textClasses['body-small']}\r\n                descriptionClassName={cn(textClasses['label-small'], 'text-muted-foreground')}\r\n                dateClassName={cn(textClasses['label-small'], 'text-muted-foreground')}\r\n                buttonVariant='ghost'\r\n                buttonSize='sm'\r\n                showAnimation={!isEditMode}\r\n              />\r\n              {metadata?.hasMore && (\r\n                <div className='mt-4 text-center'>\r\n                  <button\r\n                    onClick={() => refetch()}\r\n                    className={cn(\r\n                      textClasses['label-base'],\r\n                      'text-primary hover:text-primary/80 transition-colors'\r\n                    )}\r\n                  >\r\n                    Load more events\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </>\r\n          )}\r\n        </CardContent>\r\n      </WidgetCard>\r\n    </motion.div>\r\n  );\r\n});\r\n\r\n// 只保留命名導出，避免循環引用問題\r\n// export default HistoryTreeV2;\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/InjectionProductionStatsWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1147,1150],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1147,1150],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1781,1784],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1781,1784],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3242,3245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3242,3245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3382,3385],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3382,3385],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Injection Production Stats Widget - REST API Version\r\n * 用於 Injection Route 的生產統計組件\r\n * 使用 MetricCard 通用組件統一顯示邏輯\r\n * \r\n * Widget2: Today Produced (PLT)\r\n * Widget3: Today Produced (QTY)\r\n * \r\n * REST API Migration:\r\n * - 使用純 REST API 查詢\r\n * - 統一數據獲取架構\r\n * - 保留相同功能和性能\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useMemo, useEffect, useState, useCallback } from 'react';\r\nimport { CubeIcon } from '@heroicons/react/24/outline';\r\nimport { format, startOfDay, endOfDay } from 'date-fns';\r\nimport { createDashboardAPIClient as createDashboardAPI } from '@/lib/api/admin/DashboardAPI.client';\r\nimport { TraditionalWidgetComponentProps } from '@/app/types/dashboard';\r\nimport { MetricCard } from './common/data-display/MetricCard';\r\n\r\ninterface InjectionProductionStatsWidgetProps extends TraditionalWidgetComponentProps {\r\n  title?: string;\r\n  metric?: 'pallet_count' | 'quantity_sum';\r\n}\r\n\r\nexport const InjectionProductionStatsWidget: React.FC<InjectionProductionStatsWidgetProps> = ({ \r\n  title, \r\n  metric,\r\n  timeFrame,\r\n  isEditMode,\r\n  widget\r\n}) => {\r\n  // 從 widget config 提取數據\r\n  // 使用類型斷言處理擴展屬性\r\n  const widgetConfig = widget?.config as any;\r\n  const widgetTitle = title || widgetConfig?.title || 'Production Stats';\r\n  const widgetMetric = metric || widgetConfig?.metric || 'pallet_count';\r\n  // 根據 timeFrame 設定查詢時間範圍\r\n  const { startDate, endDate } = useMemo(() => {\r\n    if (!timeFrame) {\r\n      // 默認使用今天\r\n      const today = new Date();\r\n      return {\r\n        startDate: startOfDay(today).toISOString(),\r\n        endDate: endOfDay(today).toISOString(),\r\n      };\r\n    }\r\n    return {\r\n      startDate: timeFrame.start.toISOString(),\r\n      endDate: timeFrame.end.toISOString(),\r\n    };\r\n  }, [timeFrame]);\r\n\r\n  // REST API 狀態管理\r\n  const [data, setData] = useState<any>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<Error | null>(null);\r\n\r\n  const fetchProductionStats = useCallback(async () => {\r\n    if (isEditMode) return;\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const dashboardAPI = createDashboardAPI();\r\n      const result = await dashboardAPI.fetch(\r\n        {\r\n          widgetIds: ['injection_production_stats'],\r\n          dateRange: { start: startDate, end: endDate },\r\n        },\r\n        {\r\n          strategy: 'server',\r\n          cache: { ttl: 300 },\r\n        }\r\n      );\r\n\r\n      if (result.widgets && result.widgets.length > 0) {\r\n        setData(result.widgets[0].data);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error fetching production stats:', err);\r\n      setError(err instanceof Error ? err : new Error('Unknown error'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [startDate, endDate, isEditMode]);\r\n\r\n  useEffect(() => {\r\n    fetchProductionStats();\r\n\r\n    // 5分鐘輪詢\r\n    const interval = setInterval(fetchProductionStats, 300000);\r\n    return () => clearInterval(interval);\r\n  }, [fetchProductionStats]);\r\n\r\n  // 計算統計值\r\n  const statValue = useMemo(() => {\r\n    if (!data?.record_palletinfoCollection?.edges) return 0;\r\n\r\n    const edges = data.record_palletinfoCollection.edges;\r\n    \r\n    if (widgetMetric === 'pallet_count') {\r\n      // 計算唯一托盤數量\r\n      const uniquePallets = new Set(edges.map((edge: any) => edge.node.plt_num));\r\n      return uniquePallets.size;\r\n    } else {\r\n      // 計算總數量\r\n      return edges.reduce((sum: number, edge: any) => {\r\n        return sum + (edge.node.product_qty || 0);\r\n      }, 0);\r\n    }\r\n  }, [data, widgetMetric]);\r\n\r\n  // 獲取實際數據時間範圍（用於顯示）\r\n  const displayDateRange = useMemo(() => {\r\n    const start = timeFrame?.start || new Date();\r\n    const end = timeFrame?.end || new Date();\r\n    \r\n    // 如果是同一天，只顯示一個日期\r\n    if (format(start, 'yyyy-MM-dd') === format(end, 'yyyy-MM-dd')) {\r\n      return format(start, 'MMM d, yyyy');\r\n    }\r\n    \r\n    return `${format(start, 'MMM d')} - ${format(end, 'MMM d, yyyy')}`;\r\n  }, [timeFrame]);\r\n\r\n  // 決定標籤文字\r\n  const label = widgetMetric === 'pallet_count' ? 'Pallets produced' : 'Total quantity';\r\n\r\n  // 處理重試\r\n  const handleRetry = useCallback(() => {\r\n    fetchProductionStats();\r\n  }, [fetchProductionStats]);\r\n\r\n  if (isEditMode) {\r\n    return (\r\n      <MetricCard\r\n        title={widgetTitle}\r\n        value={0}\r\n        label={label}\r\n        icon={CubeIcon}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <MetricCard\r\n      title={widgetTitle}\r\n      value={statValue}\r\n      label={label}\r\n      icon={CubeIcon}\r\n      dateRange={displayDateRange}\r\n      performanceMetrics={{\r\n        source: 'REST API',\r\n        optimized: true\r\n      }}\r\n      loading={loading}\r\n      error={error ? new Error(error.message) : undefined}\r\n      animateOnMount={true}\r\n    />\r\n  );\r\n};\r\n\r\n// Export as default for lazy loading compatibility\r\nexport default InjectionProductionStatsWidget;\r\n\r\n/**\r\n * REST API Migration completed on 2025-07-16\r\n * \r\n * Features:\r\n * - 純 REST API 查詢實現\r\n * - 5分鐘輪詢實時更新\r\n * - 支持 pallet_count 和 quantity_sum 指標\r\n * - 統一錯誤處理和重試機制\r\n * - 保持原有功能和性能\r\n * \r\n * 性能改善:\r\n * - 簡化查詢邏輯，統一數據獲取策略\r\n * - 客戶端數據聚合和計算\r\n * - 內建緩存和輪詢機制\r\n * - 遵循 KISS 原則，降低維護成本\r\n */","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/InventoryOrderedAnalysisWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/OrderAnalysisResultDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/OrderStateListWidgetV2.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1647,1650],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1647,1650],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Order State List Widget V2 - REST API Version\r\n * 顯示訂單進度列表\r\n * 遷移自原 OrderStateListWidget\r\n *\r\n * Features:\r\n * - 使用純 REST API 數據獲取\r\n * - Progressive Loading with useInViewport\r\n * - 使用 DataTable 組件統一列表顯示\r\n * - Client-side 進度計算\r\n * - 保留實時更新功能\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useMemo, useRef, useState, useCallback, useEffect } from 'react';\r\nimport { ClipboardDocumentListIcon, TruckIcon } from '@heroicons/react/24/outline';\r\nimport { WidgetComponentProps } from '@/app/types/dashboard';\r\nimport { cn } from '@/lib/utils';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { createDashboardAPIClient as createDashboardAPI } from '@/lib/api/admin/DashboardAPI.client';\r\nimport { useInViewport, InViewportPresets } from '@/app/admin/hooks/useInViewport';\r\nimport { DataTable, DataTableColumn } from './common/data-display/DataTable';\r\n\r\ninterface OrderProgress {\r\n  uuid: string;\r\n  order_ref: string;\r\n  account_num: string;\r\n  product_code: string;\r\n  product_desc: string;\r\n  product_qty: number;\r\n  loaded_qty: number;\r\n  created_at: string;\r\n  progress: number;\r\n  progress_text: string;\r\n  status: 'pending' | 'in_progress' | 'completed';\r\n  status_color: 'red' | 'yellow' | 'orange' | 'green';\r\n}\r\n\r\nexport const OrderStateListWidgetV2 = React.memo(function OrderStateListWidgetV2({\r\n  widget,\r\n  isEditMode,\r\n  timeFrame,\r\n}: WidgetComponentProps) {\r\n  const widgetRef = useRef<HTMLDivElement>(null);\r\n  \r\n  // Progressive Loading - 檢測 widget 是否在視窗內\r\n  const { isInViewport, hasBeenInViewport } = useInViewport(widgetRef, InViewportPresets.chart);\r\n\r\n  // REST API 狀態管理\r\n  const [rawData, setRawData] = useState<any>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<Error | null>(null);\r\n  const [lastFetch, setLastFetch] = useState<number>(0);\r\n\r\n  // 獲取訂單數據\r\n  const fetchOrdersData = useCallback(async () => {\r\n    if (isEditMode || !hasBeenInViewport) return;\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const api = createDashboardAPI();\r\n      const result = await api.fetch({\r\n        widgetIds: ['statsCard'],\r\n        params: {\r\n          dataSource: 'order_state_list',\r\n          limit: 50,\r\n          offset: 0,\r\n        },\r\n      });\r\n\r\n      // Extract widget data from dashboard result\r\n      const widgetData = result.widgets?.find(w => w.widgetId === 'statsCard');\r\n\r\n      if (!widgetData || widgetData.data.error) {\r\n        throw new Error(widgetData?.data.error || 'Failed to load orders data');\r\n      }\r\n\r\n      setRawData(widgetData.data.value || []);\r\n      setLastFetch(Date.now());\r\n    } catch (err) {\r\n      console.error('Error fetching orders data:', err);\r\n      setError(err instanceof Error ? err : new Error('Failed to fetch orders data'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [isEditMode, hasBeenInViewport]);\r\n\r\n  // 初始加載和輪詢\r\n  useEffect(() => {\r\n    if (isEditMode || !hasBeenInViewport) return;\r\n\r\n    fetchOrdersData();\r\n\r\n    // 30秒輪詢\r\n    const interval = setInterval(fetchOrdersData, 30000);\r\n    return () => clearInterval(interval);\r\n  }, [fetchOrdersData, isEditMode, hasBeenInViewport]);\r\n\r\n  // 重新獲取數據\r\n  const refetch = useCallback(() => {\r\n    fetchOrdersData();\r\n  }, [fetchOrdersData]);\r\n\r\n  // 處理數據\r\n  const data = useMemo<OrderProgress[]>(() => {\r\n    if (!rawData) return [];\r\n    \r\n    // 處理 REST API 數據 - 如果是數組直接返回，否則從嵌套格式轉換\r\n    if (Array.isArray(rawData)) {\r\n      return rawData\r\n        .map((item: Record<string, unknown>) => {\r\n          const productQty = item.product_qty || 0;\r\n          const loadedQty = parseInt(item.loaded_qty || '0', 10);\r\n          \r\n          // 計算進度\r\n          const progress = productQty > 0 ? (loadedQty / productQty) * 100 : 0;\r\n          \r\n          // 判斷狀態\r\n          let status: 'pending' | 'in_progress' | 'completed' = 'pending';\r\n          let statusColor: 'red' | 'yellow' | 'orange' | 'green' = 'red';\r\n          \r\n          if (progress >= 100) {\r\n            status = 'completed';\r\n            statusColor = 'green';\r\n          } else if (progress > 0) {\r\n            status = 'in_progress';\r\n            statusColor = progress >= 75 ? 'orange' : 'yellow';\r\n          }\r\n\r\n          return {\r\n            uuid: item.uuid,\r\n            order_ref: item.order_ref,\r\n            account_num: item.account_num,\r\n            product_code: item.product_code,\r\n            product_desc: item.product_desc,\r\n            product_qty: productQty,\r\n            loaded_qty: loadedQty,\r\n            created_at: item.created_at,\r\n            progress,\r\n            progress_text: `${loadedQty}/${productQty}`,\r\n            status,\r\n            status_color: statusColor,\r\n          };\r\n        })\r\n        .filter((order: OrderProgress) => order.status !== 'completed'); // 只顯示未完成訂單\r\n    }\r\n    \r\n    // 處理嵌套格式數據 (fallback)\r\n// TODO: Replace GraphQL -     // TODO: Replace GraphQL - if (rawData?.data_orderCollection?.edges) {\r\n// TODO: Replace GraphQL -     //   return rawData.data_orderCollection.edges\r\n    //     .map((edge: any) => {\r\n    //       const node = edge.node;\r\n    //       const productQty = node.product_qty || 0;\r\n    //       const loadedQty = parseInt(node.loaded_qty || '0', 10);\r\n    //       \r\n    //       // 計算進度\r\n    //       const progress = productQty > 0 ? (loadedQty / productQty) * 100 : 0;\r\n    //       \r\n    //       // 判斷狀態\r\n    //       let status: 'pending' | 'in_progress' | 'completed' = 'pending';\r\n    //       let statusColor: 'red' | 'yellow' | 'orange' | 'green' = 'red';\r\n    //       \r\n    //       if (progress >= 100) {\r\n    //         status = 'completed';\r\n    //         statusColor = 'green';\r\n    //       } else if (progress > 0) {\r\n    //         status = 'in_progress';\r\n    //         statusColor = progress >= 75 ? 'orange' : 'yellow';\r\n    //       }\r\n    //\r\n    //       return {\r\n    //         uuid: node.uuid,\r\n    //         order_ref: node.order_ref,\r\n    //         account_num: node.account_num,\r\n    //         product_code: node.product_code,\r\n    //         product_desc: node.product_desc,\r\n    //         product_qty: productQty,\r\n    //         loaded_qty: loadedQty,\r\n    //         created_at: node.created_at,\r\n    //         progress,\r\n    //         progress_text: `${loadedQty}/${productQty}`,\r\n    //         status,\r\n    //         status_color: statusColor,\r\n    //       };\r\n    //     })\r\n    //     .filter((order: OrderProgress) => (order as { status: string }).status !== 'completed'); // 只顯示未完成訂單\r\n    // }\r\n    \r\n    return [];\r\n  }, [rawData]);\r\n\r\n  // 定義 DataTable columns\r\n  const columns = useMemo<DataTableColumn<OrderProgress>[]>(() => [\r\n    {\r\n      key: 'order_ref',\r\n      header: 'Order',\r\n      icon: ClipboardDocumentListIcon,\r\n      width: '25%',\r\n      render: (value, item) => (\r\n        <div className=\"flex items-center gap-2\">\r\n          <div\r\n            className={cn(\r\n              'h-2 w-2 flex-shrink-0 rounded-full',\r\n              (item as OrderProgress).status_color === 'green'\r\n                ? 'bg-green-400'\r\n                : (item as OrderProgress).status_color === 'orange'\r\n                  ? 'bg-orange-400'\r\n                  : (item as OrderProgress).status_color === 'yellow'\r\n                    ? 'bg-yellow-400'\r\n                    : (item as OrderProgress).status_color === 'red'\r\n                      ? 'bg-red-400'\r\n                      : 'bg-slate-400'\r\n            )}\r\n          />\r\n          <span className=\"font-medium text-white\">{value}</span>\r\n        </div>\r\n      ),\r\n      className: 'font-medium',\r\n    },\r\n    {\r\n      key: 'product_code',\r\n      header: 'Product',\r\n      width: '35%',\r\n      render: (value, item) => (\r\n        <div>\r\n          <div className=\"font-medium text-white\">{value}</div>\r\n          <div className=\"mt-0.5 text-xs text-slate-400 truncate\">{item.product_desc}</div>\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      key: 'progress',\r\n      header: 'Progress',\r\n      width: '25%',\r\n      render: (value, item) => (\r\n        <div className=\"space-y-1\">\r\n          <div className=\"flex justify-between text-xs\">\r\n            <span className=\"text-slate-400\">{item.progress_text}</span>\r\n            <span className=\"font-medium text-white\">{Math.round(value)}%</span>\r\n          </div>\r\n          <Progress value={value} className=\"h-2\" />\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      key: 'status',\r\n      header: 'Status',\r\n      icon: TruckIcon,\r\n      width: '15%',\r\n      align: 'center',\r\n      render: (value, item) => (\r\n        <div className=\"flex justify-center\">\r\n          {(item as OrderProgress).status === 'completed' && (\r\n            <TruckIcon className=\"h-4 w-4 text-green-400\" />\r\n          )}\r\n          {(item as OrderProgress).status === 'in_progress' && (\r\n            <span className={cn(\r\n              'text-xs font-medium',\r\n              (item as OrderProgress).status_color === 'orange' ? 'text-orange-400' : 'text-yellow-400'\r\n            )}>\r\n              {item.progress >= 75 ? 'Almost' : 'Loading'}\r\n            </span>\r\n          )}\r\n          {(item as OrderProgress).status === 'pending' && (\r\n            <span className=\"text-xs font-medium text-red-400\">Pending</span>\r\n          )}\r\n        </div>\r\n      ),\r\n    },\r\n  ], []);\r\n\r\n  // 計算 metadata\r\n  const metadata = useMemo(() => {\r\n    const orders = data || [];\r\n    const pendingCount = orders.length;\r\n    return {\r\n      pendingCount,\r\n      totalCount: pendingCount, // 因為已經過濾了完成的訂單\r\n    };\r\n  }, [data]);\r\n\r\n  // Edit mode - 顯示空白狀態\r\n  if (isEditMode) {\r\n    return (\r\n      <div ref={widgetRef}>\r\n        <DataTable\r\n          title=\"Order Progress\"\r\n          icon={ClipboardDocumentListIcon}\r\n          iconColor=\"from-blue-500 to-cyan-500\"\r\n          data={[]}\r\n          columns={columns}\r\n          empty={true}\r\n          emptyMessage=\"Order State List Widget V2\"\r\n          emptyIcon={ClipboardDocumentListIcon}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Progressive Loading - 如果還未進入視窗，顯示 skeleton\r\n  if (!hasBeenInViewport) {\r\n    return (\r\n      <div ref={widgetRef}>\r\n        <DataTable\r\n          title=\"Order Progress\"\r\n          icon={ClipboardDocumentListIcon}\r\n          iconColor=\"from-blue-500 to-cyan-500\"\r\n          data={[]}\r\n          columns={columns}\r\n          loading={true}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div ref={widgetRef}>\r\n      <DataTable\r\n        title=\"Order Progress\"\r\n        subtitle={`${metadata.pendingCount} pending orders`}\r\n        icon={ClipboardDocumentListIcon}\r\n        iconColor=\"from-blue-500 to-cyan-500\"\r\n        data={data || []}\r\n        columns={columns}\r\n        keyField=\"uuid\"\r\n        loading={loading}\r\n        error={error}\r\n        empty={(data || []).length === 0}\r\n        emptyMessage=\"All orders completed\"\r\n        emptyIcon={ClipboardDocumentListIcon}\r\n        pagination={{\r\n          enabled: false, // 固定顯示 50 筆記錄，無分頁\r\n        }}\r\n        performanceMetrics={{\r\n          source: 'REST API',\r\n          fetchTime: lastFetch > 0 ? Date.now() - lastFetch : undefined,\r\n          optimized: true,\r\n        }}\r\n        connectionStatus={{\r\n          type: 'polling',\r\n          label: '🚀 REST API'\r\n        }}\r\n        onRefresh={refetch}\r\n        showRefreshButton={true}\r\n        animate={true}\r\n        rowClassName={(item) => \r\n          cn(\r\n            'transition-colors hover:bg-slate-700/50',\r\n            (item as OrderProgress).status === 'completed' && 'opacity-50'\r\n          )\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default OrderStateListWidgetV2;\r\n\r\n/**\r\n * Order State List Widget V2 - REST API Version\r\n * \r\n * Features:\r\n * - ✅ 純 REST API 數據獲取\r\n * - ✅ Progressive Loading with useInViewport\r\n * - ✅ DataTable 統一列表顯示\r\n * - ✅ 保留實時更新功能 (30秒輪詢)\r\n * - ✅ Client-side 進度計算和狀態判斷\r\n * - ✅ 優化錯誤處理和重試機制\r\n * \r\n * Updates (2025-07-16):\r\n * - 完全改用純 REST API 實現\r\n * - 移除複雜的數據獲取邏輯，使用標準 React hooks\r\n * - 保持原有功能不變，遵循 KISS 原則\r\n * - 優化數據處理邏輯，支持多種數據格式\r\n */","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/OrdersListWidgetV2.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/OtherFilesListWidgetV2.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/PerformanceTestWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[948,951],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[948,951],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[982,985],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[982,985],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { Play, BarChart3, TrendingUp } from 'lucide-react';\r\nimport { runPerformanceTest } from '@/app/admin/utils/performanceTestBatchQuery';\r\nimport { WidgetSkeleton } from './common/WidgetStates';\r\nimport type { WidgetProps } from '@/app/admin/types/dashboard';\r\nimport { \r\n  brandColors, \r\n  widgetColors, \r\n  semanticColors,\r\n  getWidgetCategoryColor \r\n} from '@/lib/design-system/colors';\r\nimport { textClasses, getTextClass } from '@/lib/design-system/typography';\r\nimport { spacing, widgetSpacing, spacingUtilities } from '@/lib/design-system/spacing';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface TestResult {\r\n  comparison: any;\r\n  report: string;\r\n  stats: any;\r\n}\r\n\r\nconst PerformanceTestWidget: React.FC<WidgetProps> = ({ className }) => {\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [result, setResult] = useState<TestResult | null>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const runTest = async () => {\r\n    setIsRunning(true);\r\n    setError(null);\r\n    setProgress(0);\r\n    \r\n    try {\r\n      // 模擬進度更新\r\n      const progressInterval = setInterval(() => {\r\n        setProgress((prev) => Math.min(prev + 10, 90));\r\n      }, 500);\r\n\r\n      // 運行性能測試\r\n      const testResult = await runPerformanceTest();\r\n      \r\n      clearInterval(progressInterval);\r\n      setProgress(100);\r\n      setResult(testResult);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? (err as { message: string }).message : '性能測試失敗');\r\n    } finally {\r\n      setIsRunning(false);\r\n    }\r\n  };\r\n\r\n  const formatPercentage = (value: number) => {\r\n    return value > 0 ? `+${value.toFixed(1)}%` : `${value.toFixed(1)}%`;\r\n  };\r\n\r\n  return (\r\n    <Card className={className}>\r\n      <CardHeader>\r\n        <CardTitle className={cn('flex items-center gap-2', textClasses['heading-base'])}>\r\n          <BarChart3 className=\"h-5 w-5\" />\r\n          批量查詢性能測試\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4\">\r\n        {!result && !isRunning && (\r\n          <div className=\"text-center py-8\">\r\n            <p className={cn(textClasses['body-small'], 'text-muted-foreground mb-4')}>\r\n              測試批量查詢系統相比個別查詢嘅性能提升\r\n            </p>\r\n            <Button onClick={runTest} size=\"lg\" className=\"gap-2\">\r\n              <Play className=\"h-4 w-4\" />\r\n              開始測試\r\n            </Button>\r\n          </div>\r\n        )}\r\n\r\n        {isRunning && (\r\n          <div className=\"space-y-4\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <WidgetSkeleton type=\"spinner\" className=\"h-4 w-4\" />\r\n              <span className={textClasses['body-small']}>正在運行性能測試...</span>\r\n            </div>\r\n            <Progress value={progress} className=\"h-2\" />\r\n          </div>\r\n        )}\r\n\r\n        {result && !isRunning && (\r\n          <div className=\"space-y-4\">\r\n            {/* 性能改善摘要 */}\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <div className={cn(\r\n                'rounded-lg p-4',\r\n                'bg-success/10 border border-success/20'\r\n              )}>\r\n                <div className=\"flex items-center gap-2 mb-1\">\r\n                  <TrendingUp className=\"h-4 w-4\" style={{ color: semanticColors.success.DEFAULT }} />\r\n                  <span className={cn(textClasses['body-small'], 'font-medium')}>加載速度提升</span>\r\n                </div>\r\n                <p className={cn(textClasses['heading-large'], 'font-bold')} style={{ color: semanticColors.success.DEFAULT }}>\r\n                  {formatPercentage(result.comparison.improvement.timeSavedPercentage)}\r\n                </p>\r\n                <p className={cn(textClasses['label-small'], 'text-muted-foreground mt-1')}>\r\n                  節省 {result.comparison.improvement.timeSaved.toFixed(0)}ms\r\n                </p>\r\n              </div>\r\n\r\n              <div className={cn(\r\n                'rounded-lg p-4',\r\n                'bg-info/10 border border-info/20'\r\n              )}>\r\n                <div className=\"flex items-center gap-2 mb-1\">\r\n                  <BarChart3 className=\"h-4 w-4\" style={{ color: semanticColors.info.DEFAULT }} />\r\n                  <span className={cn(textClasses['body-small'], 'font-medium')}>請求減少</span>\r\n                </div>\r\n                <p className={cn(textClasses['heading-large'], 'font-bold')} style={{ color: semanticColors.info.DEFAULT }}>\r\n                  {formatPercentage(result.comparison.improvement.requestsReducedPercentage)}\r\n                </p>\r\n                <p className={cn(textClasses['label-small'], 'text-muted-foreground mt-1')}>\r\n                  減少 {result.comparison.improvement.requestsReduced} 個請求\r\n                </p>\r\n              </div>\r\n            </div>\r\n\r\n            {/* 詳細對比 */}\r\n            <div className=\"border rounded-lg p-4 space-y-3\">\r\n              <h4 className={cn(textClasses['body-small'], 'font-medium')}>詳細性能對比</h4>\r\n              \r\n              <div className=\"space-y-2\">\r\n                <div className=\"flex justify-between items-center\">\r\n                  <span className={cn(textClasses['body-small'], 'text-muted-foreground')}>批量查詢時間</span>\r\n                  <span className={cn(textClasses['body-small'], 'font-medium')}>\r\n                    {result.comparison.batchQuery.duration.toFixed(0)}ms\r\n                  </span>\r\n                </div>\r\n                <div className=\"flex justify-between items-center\">\r\n                  <span className={cn(textClasses['body-small'], 'text-muted-foreground')}>個別查詢時間</span>\r\n                  <span className={cn(textClasses['body-small'], 'font-medium')}>\r\n                    {result.comparison.individualQueries.duration.toFixed(0)}ms\r\n                  </span>\r\n                </div>\r\n                <div className=\"flex justify-between items-center\">\r\n                  <span className={cn(textClasses['body-small'], 'text-muted-foreground')}>批量查詢請求數</span>\r\n                  <span className={cn(textClasses['body-small'], 'font-medium')}>\r\n                    {result.comparison.batchQuery.requestCount}\r\n                  </span>\r\n                </div>\r\n                <div className=\"flex justify-between items-center\">\r\n                  <span className={cn(textClasses['body-small'], 'text-muted-foreground')}>個別查詢請求數</span>\r\n                  <span className={cn(textClasses['body-small'], 'font-medium')}>\r\n                    {result.comparison.individualQueries.requestCount}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* 測試報告 */}\r\n            <details className=\"group\">\r\n              <summary className={cn('cursor-pointer font-medium hover:text-primary', textClasses['body-small'])}>\r\n                查看完整測試報告\r\n              </summary>\r\n              <pre className={cn('mt-2 p-4 bg-muted rounded-lg overflow-auto max-h-96', textClasses['label-small'])}>\r\n                {result.report}\r\n              </pre>\r\n            </details>\r\n\r\n            {/* 重新測試按鈕 */}\r\n            <Button \r\n              onClick={runTest} \r\n              variant=\"outline\" \r\n              size=\"sm\" \r\n              className=\"w-full\"\r\n            >\r\n              重新運行測試\r\n            </Button>\r\n          </div>\r\n        )}\r\n\r\n        {error && (\r\n          <Alert variant=\"destructive\">\r\n            <AlertDescription>{error}</AlertDescription>\r\n          </Alert>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default PerformanceTestWidget;","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/ProductDistributionChartWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1929,1932],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1929,1932],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2094,2097],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2094,2097],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":155,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5113,5116],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5113,5116],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":212,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":212,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6998,7001],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6998,7001],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Product Distribution Chart Widget - ChartContainer Version\r\n * 顯示產品分佈圓餅圖\r\n * 使用 ChartContainer 和 Progressive Loading\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useMemo, useEffect, useState, useCallback } from 'react';\r\nimport { \r\n  PieChart, Pie, Cell, Tooltip, ResponsiveContainer, Legend \r\n} from 'recharts';\r\nimport { ChartPieIcon } from '@heroicons/react/24/outline';\r\nimport { createDashboardAPIClient as createDashboardAPI } from '@/lib/api/admin/DashboardAPI.client';\r\nimport { TraditionalWidgetComponentProps } from '@/app/types/dashboard';\r\nimport { ChartContainer } from './common/charts/ChartContainer';\r\nimport { useInViewport } from '@/app/admin/hooks/useInViewport';\r\nimport { \r\n  brandColors, \r\n  widgetColors, \r\n  semanticColors,\r\n  getWidgetCategoryColor \r\n} from '@/lib/design-system/colors';\r\nimport { textClasses, getTextClass } from '@/lib/design-system/typography';\r\nimport { spacing, widgetSpacing, spacingUtilities } from '@/lib/design-system/spacing';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface ProductDistributionChartWidgetProps extends TraditionalWidgetComponentProps {\r\n  title: string;\r\n  limit?: number;\r\n}\r\n\r\n// 顏色配置 - 使用設計系統顏色\r\nconst COLORS = [\r\n  String(widgetColors.charts.primary) || '#3B82F6',\r\n  String(semanticColors.success.DEFAULT) || '#10B981',\r\n  String(semanticColors.warning.DEFAULT) || '#F59E0B',\r\n  String(semanticColors.destructive.DEFAULT) || '#EF4444',\r\n  String(brandColors.primary) || '#6366F1',\r\n  String(semanticColors.info.DEFAULT) || '#3B82F6',\r\n  String(brandColors.secondary) || '#8B5CF6',\r\n  String(widgetColors.charts.grid) || '#6B7280',\r\n  String(widgetColors.charts.accent) || '#EC4899',\r\n  String(brandColors.primary) || '#3B82F6'\r\n];\r\n\r\nexport const ProductDistributionChartWidget: React.FC<ProductDistributionChartWidgetProps> = ({ \r\n  title, \r\n  timeFrame,\r\n  isEditMode,\r\n  limit = 10,\r\n  widget\r\n}) => {\r\n  const [chartData, setChartData] = useState<any[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [metadata, setMetadata] = useState<any>({});\r\n  const dashboardAPI = useMemo(() => createDashboardAPI(), []);\r\n\r\n  // Lazy loading with viewport detection\r\n  const targetRef = React.useRef<HTMLDivElement>(null);\r\n  const { isInViewport, hasBeenInViewport } = useInViewport(targetRef, {\r\n    threshold: 0.1,\r\n    rootMargin: '50px',\r\n    triggerOnce: true\r\n  });\r\n\r\n  // 根據 timeFrame 設定查詢時間範圍\r\n  const dateRange = useMemo(() => {\r\n    if (!timeFrame) {\r\n      // 默認使用今天\r\n      const today = new Date();\r\n      today.setHours(0, 0, 0, 0);\r\n      const tomorrow = new Date(today);\r\n      tomorrow.setDate(tomorrow.getDate() + 1);\r\n      \r\n      return {\r\n        start: today,\r\n        end: tomorrow,\r\n      };\r\n    }\r\n    return {\r\n      start: timeFrame.start,\r\n      end: timeFrame.end,\r\n    };\r\n  }, [timeFrame]);\r\n\r\n  const fetchData = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      // 使用統一的 DashboardAPI 獲取數據\r\n      const result = await dashboardAPI.fetch(\r\n        {\r\n          widgetIds: ['statsCard'],\r\n          dateRange: {\r\n            start: dateRange.start.toISOString(),\r\n            end: dateRange.end.toISOString(),\r\n          },\r\n          params: {\r\n            dataSource: 'product_distribution',\r\n            limit: limit,\r\n          },\r\n        },\r\n        {\r\n          strategy: 'server',\r\n          cache: { ttl: 300 }, // 5分鐘緩存\r\n        }\r\n      );\r\n\r\n      if (result.widgets && result.widgets.length > 0) {\r\n        const widgetData = result.widgets[0];\r\n\r\n        if (widgetData.data.error) {\r\n          console.error('[ProductDistributionChartWidget as string] API error:', widgetData.data.error);\r\n          setError(widgetData.data.error);\r\n          setChartData([]);\r\n          return;\r\n        }\r\n\r\n        const distributionData = widgetData.data.value || [];\r\n        const widgetMetadata = widgetData.data.metadata || {};\r\n\r\n        console.log('[ProductDistributionChartWidget as string] API returned data:', distributionData);\r\n        console.log('[ProductDistributionChartWidget as string] Metadata:', widgetMetadata);\r\n\r\n        setChartData(distributionData);\r\n        setMetadata(widgetMetadata);\r\n\r\n      } else {\r\n        console.warn('[ProductDistributionChartWidget as string] No widget data returned from API');\r\n        setChartData([]);\r\n      }\r\n    } catch (err) {\r\n      console.error('[ProductDistributionChartWidget as string] Error fetching data from API:', err);\r\n      setError(err instanceof Error ? (err as { message: string }).message : 'Unknown error');\r\n      setChartData([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [dashboardAPI, dateRange, limit]);\r\n\r\n  useEffect(() => {\r\n    if (isEditMode || !hasBeenInViewport) return;\r\n    fetchData();\r\n  }, [dashboardAPI, dateRange, limit, isEditMode, hasBeenInViewport, fetchData]);\r\n\r\n  // 計算總數\r\n  const total = useMemo(() => {\r\n    return chartData.reduce((sum, item) => sum + item.value, 0);\r\n  }, [chartData]);\r\n\r\n  // 自定義 Tooltip\r\n  const CustomTooltip = ({ active, payload, label }: any) => {\r\n    if (active && payload && payload.length) {\r\n      const data = payload[0];\r\n      const percentage = total > 0 ? ((data.value / total) * 100).toFixed(1) : '0';\r\n      return (\r\n        <div className={cn(\r\n          'bg-card border border-border rounded-lg p-3 shadow-lg'\r\n        )}>\r\n          <p className={cn(textClasses['body-small'], 'font-medium text-foreground')}>{data.payload.name}</p>\r\n          <p className={cn(textClasses['label-small'])} style={{ color: widgetColors.charts.primary }}>\r\n            Quantity: <span className=\"font-semibold\">{data.value.toLocaleString()}</span>\r\n          </p>\r\n          <p className={cn(textClasses['label-small'])} style={{ color: semanticColors.success.DEFAULT }}>\r\n            Percentage: <span className=\"font-semibold\">{percentage}%</span>\r\n          </p>\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // Calculate stats\r\n  const productCount = chartData.length;\r\n  const topProduct = chartData.length > 0 ? chartData[0] : null;\r\n\r\n  const stats = [\r\n    {\r\n      label: 'Total Products',\r\n      value: productCount,\r\n    },\r\n    {\r\n      label: 'Total Quantity',\r\n      value: total.toLocaleString(),\r\n    },\r\n    topProduct && {\r\n      label: 'Top Product',\r\n      value: topProduct.name,\r\n    }\r\n  ].filter(Boolean);\r\n\r\n  return (\r\n    <div ref={targetRef} className=\"h-full\">\r\n      <ChartContainer\r\n        title={title}\r\n        icon={ChartPieIcon}\r\n        iconColor=\"from-purple-500 to-pink-500\"\r\n        dateRange={dateRange}\r\n        loading={loading && hasBeenInViewport}\r\n        error={error ? new Error(error) : null}\r\n        onRetry={fetchData}\r\n        onRefresh={fetchData}\r\n        height=\"100%\"\r\n        chartType=\"pie\"\r\n        performanceMetrics={metadata.rpcFunction ? {\r\n          source: 'Server',\r\n          optimized: true\r\n        } : undefined}\r\n        stats={stats as any}\r\n        showFooter={true}\r\n        widgetType={widget?.type?.toUpperCase()}\r\n      >\r\n        {chartData.length === 0 ? (\r\n          <div className={cn(\r\n            'text-center h-full flex items-center justify-center',\r\n            textClasses['body-small'],\r\n            'text-muted-foreground'\r\n          )}>\r\n            No data available for the selected period\r\n          </div>\r\n        ) : (\r\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <PieChart>\r\n              <Pie\r\n                data={chartData}\r\n                cx=\"50%\"\r\n                cy=\"50%\"\r\n                innerRadius={40}\r\n                outerRadius={80}\r\n                paddingAngle={2}\r\n                dataKey=\"value\"\r\n              >\r\n                {chartData.map((entry, index) => (\r\n                  <Cell \r\n                    key={`cell-${index}`} \r\n                    fill={COLORS[index % COLORS.length]} \r\n                  />\r\n                ))}\r\n              </Pie>\r\n              <Tooltip content={<CustomTooltip />} />\r\n              <Legend \r\n                verticalAlign=\"bottom\" \r\n                height={36}\r\n                formatter={(value, entry) => (\r\n                  <span className={cn(textClasses['label-small'], 'text-muted-foreground')}>\r\n                    {value} ({entry?.payload ? ((entry.payload.value / total) * 100).toFixed(1) : '0'}%)\r\n                  </span>\r\n                )}\r\n              />\r\n            </PieChart>\r\n          </ResponsiveContainer>\r\n        )}\r\n      </ChartContainer>\r\n    </div>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/ProductUpdateWidgetV2.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/ProductionDetailsWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1780,1783],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1780,1783],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1945,1948],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1945,1948],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Production Details Widget - DataTable Version\r\n * 顯示生產詳情表格\r\n * 使用 DataTable 統一顯示邏輯\r\n * \r\n * REST API Migration:\r\n * - 使用 REST API 取代 GraphQL\r\n * - 簡化數據獲取邏輯\r\n * - 移除雙模式架構\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useMemo, useEffect, useState } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport { format, startOfDay, endOfDay } from 'date-fns';\r\nimport { CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { TableCellsIcon } from '@heroicons/react/24/outline';\r\nimport { createDashboardAPIClient as createDashboardAPI } from '@/lib/api/admin/DashboardAPI.client';\r\nimport { TraditionalWidgetComponentProps } from '@/app/types/dashboard';\r\n// Note: Migrated to REST API - GraphQL hooks removed\r\nimport { DataTable } from './common/data-display/DataTable';\r\nimport type { DataTableColumn } from './common/data-display/DataTable';\r\n\r\ninterface ProductionDetailsWidgetProps extends TraditionalWidgetComponentProps {\r\n  title: string;\r\n  limit?: number;\r\n  // useGraphQL prop removed - using REST API only\r\n}\r\n\r\nexport const ProductionDetailsWidget: React.FC<ProductionDetailsWidgetProps> = ({ \r\n  title, \r\n  timeFrame,\r\n  isEditMode,\r\n  limit = 50,\r\n  widget\r\n}) => {\r\n  const dashboardAPI = useMemo(() => createDashboardAPI(), []);\r\n\r\n  // 根據 timeFrame 設定查詢時間範圍\r\n  const dateRange = useMemo(() => {\r\n    if (!timeFrame) {\r\n      // 默認使用今天\r\n      const today = new Date();\r\n      today.setHours(0, 0, 0, 0);\r\n      const tomorrow = new Date(today);\r\n      tomorrow.setDate(tomorrow.getDate() + 1);\r\n      \r\n      return {\r\n        start: today,\r\n        end: tomorrow,\r\n      };\r\n    }\r\n    return {\r\n      start: timeFrame.start,\r\n      end: timeFrame.end,\r\n    };\r\n  }, [timeFrame]);\r\n\r\n  // REST API state management\r\n  const [data, setData] = useState<any[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [metadata, setMetadata] = useState<any>({});\r\n\r\n  useEffect(() => {\r\n    if (isEditMode) return;\r\n\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        // 使用統一的 DashboardAPI 獲取數據\r\n        const result = await dashboardAPI.fetch(\r\n          {\r\n            widgetIds: ['statsCard'],\r\n            dateRange: {\r\n              start: dateRange.start.toISOString(),\r\n              end: dateRange.end.toISOString(),\r\n            },\r\n            params: {\r\n              dataSource: 'production_details',\r\n              limit: limit,\r\n            },\r\n          },\r\n          {\r\n            strategy: 'server',\r\n            cache: { ttl: 300 }, // 5分鐘緩存\r\n          }\r\n        );\r\n\r\n        if (result.widgets && result.widgets.length > 0) {\r\n          const widgetData = result.widgets[0];\r\n\r\n          if (widgetData.data.error) {\r\n            console.error('[ProductionDetailsWidget as string] API error:', widgetData.data.error);\r\n            setError(widgetData.data.error);\r\n            setData([]);\r\n            return;\r\n          }\r\n\r\n          const detailsData = widgetData.data.value || [];\r\n          const widgetMetadata = widgetData.data.metadata || {};\r\n\r\n          console.log('[ProductionDetailsWidget as string] API returned data:', detailsData);\r\n          console.log('[ProductionDetailsWidget as string] Metadata:', widgetMetadata);\r\n\r\n          setData(detailsData);\r\n          setMetadata({ ...widgetMetadata, useGraphQL: false });\r\n\r\n        } else {\r\n          console.warn('[ProductionDetailsWidget as string] No widget data returned from API');\r\n          setData([]);\r\n        }\r\n      } catch (err) {\r\n        console.error('[ProductionDetailsWidget as string] Error fetching data from API:', err);\r\n        setError(err instanceof Error ? (err as { message: string }).message : 'Unknown error');\r\n        setData([]);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [dashboardAPI, dateRange, limit, isEditMode]);\r\n\r\n  // 直接使用 REST API 數據\r\n  const tableData = data;\r\n\r\n  // 定義 DataTable columns\r\n  const columns: DataTableColumn[] = [\r\n    { \r\n      key: 'plt_num', \r\n      header: 'Pallet Number'\r\n    },\r\n    { \r\n      key: 'product_code', \r\n      header: 'Product Code'\r\n    },\r\n    { \r\n      key: 'product_qty', \r\n      header: 'Quantity',\r\n      align: 'right',\r\n      render: (value: unknown) => typeof value === 'number' ? value.toLocaleString() : value || 'N/A'\r\n    },\r\n    { \r\n      key: 'qc_by', \r\n      header: 'QC By'\r\n    },\r\n    { \r\n      key: 'generate_time', \r\n      header: 'Generate Time',\r\n      render: (value: unknown) => value ? format(new Date(value), 'MMM d, HH:mm') : 'N/A'\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0, y: 20 }}\r\n      animate={{ opacity: 1, y: 0 }}\r\n      transition={{ delay: 0.1 }}\r\n      className=\"h-full\"\r\n    >\r\n      <DataTable\r\n        title={title}\r\n        icon={TableCellsIcon}\r\n        performanceMetrics={metadata?.rpcFunction ? {\r\n          source: 'REST API',\r\n          optimized: true\r\n        } : {\r\n          source: 'REST API',\r\n          optimized: false\r\n        }}\r\n        columns={columns}\r\n        data={tableData}\r\n        loading={loading}\r\n        error={error ? new Error(error) : undefined}\r\n        emptyMessage=\"No production data available for the selected period\"\r\n        pagination={{ \r\n          enabled: false,\r\n          pageSize: limit,\r\n          hasMore: false\r\n        }}\r\n      />\r\n    </motion.div>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/ProductionStatsWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1035,1038],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1035,1038],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Production Stats Widget - MetricCard Version\r\n * 用於 Admin Dashboard 的生產統計組件\r\n * 使用 MetricCard 通用組件統一顯示邏輯\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useMemo, useEffect, useState } from 'react';\r\nimport { CubeIcon } from '@heroicons/react/24/outline';\r\nimport { format } from 'date-fns';\r\nimport { createDashboardAPIClient as createDashboardAPI } from '@/lib/api/admin/DashboardAPI.client';\r\nimport { TraditionalWidgetComponentProps } from '@/app/types/dashboard';\r\nimport { MetricCard } from './common/data-display/MetricCard';\r\n\r\ninterface ProductionStatsWidgetProps extends TraditionalWidgetComponentProps {\r\n  title: string;\r\n  metric: 'pallet_count' | 'quantity_sum';\r\n}\r\n\r\nexport const ProductionStatsWidget: React.FC<ProductionStatsWidgetProps> = ({ \r\n  title, \r\n  metric,\r\n  timeFrame,\r\n  isEditMode,\r\n  widget\r\n}) => {\r\n  const [statValue, setStatValue] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [metadata, setMetadata] = useState<any>({});\r\n  const dashboardAPI = useMemo(() => createDashboardAPI(), []);\r\n\r\n  // 根據 timeFrame 設定查詢時間範圍\r\n  const dateRange = useMemo(() => {\r\n    if (!timeFrame) {\r\n      // 默認使用今天\r\n      const today = new Date();\r\n      today.setHours(0, 0, 0, 0);\r\n      const tomorrow = new Date(today);\r\n      tomorrow.setDate(tomorrow.getDate() + 1);\r\n      \r\n      return {\r\n        start: today,\r\n        end: tomorrow,\r\n      };\r\n    }\r\n    return {\r\n      start: timeFrame.start,\r\n      end: timeFrame.end,\r\n    };\r\n  }, [timeFrame]);\r\n\r\n  useEffect(() => {\r\n    if (isEditMode) return;\r\n\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        // 使用統一的 DashboardAPI 獲取數據\r\n        const result = await dashboardAPI.fetch(\r\n          {\r\n            widgetIds: ['statsCard'],\r\n            dateRange: {\r\n              start: dateRange.start.toISOString(),\r\n              end: dateRange.end.toISOString(),\r\n            },\r\n            params: {\r\n              dataSource: 'production_stats',\r\n              staticValue: metric, // Use staticValue for metric\r\n            },\r\n          },\r\n          {\r\n            strategy: 'server',\r\n            cache: { ttl: 300 }, // 5分鐘緩存\r\n          }\r\n        );\r\n\r\n        if (result.widgets && result.widgets.length > 0) {\r\n          const widgetData = result.widgets[0];\r\n\r\n          if (widgetData.data.error) {\r\n            console.error('[ProductionStatsWidget as string] API error:', widgetData.data.error);\r\n            setError(widgetData.data.error);\r\n            setStatValue(0);\r\n            return;\r\n          }\r\n\r\n          const productionValue = widgetData.data.value || 0;\r\n          const widgetMetadata = widgetData.data.metadata || {};\r\n\r\n          console.log('[ProductionStatsWidget as string] API returned value:', productionValue);\r\n          console.log('[ProductionStatsWidget as string] Metadata:', widgetMetadata);\r\n\r\n          setStatValue(productionValue);\r\n          setMetadata(widgetMetadata);\r\n\r\n        } else {\r\n          console.warn('[ProductionStatsWidget as string] No widget data returned from API');\r\n          setStatValue(0);\r\n        }\r\n      } catch (err) {\r\n        console.error('[ProductionStatsWidget as string] Error fetching data from API:', err);\r\n        setError(err instanceof Error ? (err as { message: string }).message : 'Unknown error');\r\n        setStatValue(0);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [dashboardAPI, dateRange, metric, isEditMode]);\r\n\r\n  // 格式化日期範圍\r\n  const dateRangeText = `${format(new Date(dateRange.start), 'MMM d')} to ${format(new Date(dateRange.end), 'MMM d')}`;\r\n\r\n  // 決定標籤文字\r\n  const label = metric === 'pallet_count' ? 'Pallets produced' : 'Total quantity';\r\n\r\n  if (isEditMode) {\r\n    return (\r\n      <MetricCard\r\n        title={title}\r\n        value={0}\r\n        label={label}\r\n        icon={CubeIcon}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <MetricCard\r\n      title={title}\r\n      value={statValue}\r\n      label={label}\r\n      icon={CubeIcon}\r\n      dateRange={dateRangeText}\r\n      performanceMetrics={metadata.rpcFunction ? {\r\n        source: 'Server',\r\n        optimized: true\r\n      } : undefined}\r\n      loading={loading}\r\n      error={error ? new Error(error) : undefined}\r\n      animateOnMount={true}\r\n    />\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/ReportGeneratorWithDialogWidgetV2.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2319,2322],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2319,2322],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":271,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":271,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9034,9037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9034,9037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Report Generator With Dialog Widget V2\r\n * 使用 DashboardAPI + 服務器端 reference 加載\r\n * 遷移自原 ReportGeneratorWithDialogWidget\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport { Download, Loader2, CheckCircle } from 'lucide-react';\r\nimport { Button } from '@/components/ui/button';\r\nimport {\r\n  AdminDialog as Dialog,\r\n  AdminDialogContent as DialogContent,\r\n  AdminDialogDescription as DialogDescription,\r\n  AdminDialogFooter as DialogFooter,\r\n  AdminDialogHeader as DialogHeader,\r\n  AdminDialogTitle as DialogTitle,\r\n} from '@/app/admin/components/ui/admin-dialog';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '@/components/ui/select-radix';\r\nimport { cn } from '@/lib/utils';\r\nimport { createDashboardAPIClient as createDashboardAPI } from '@/lib/api/admin/DashboardAPI.client';\r\nimport { \r\n  brandColors, \r\n  widgetColors, \r\n  semanticColors,\r\n  getWidgetCategoryColor \r\n} from '@/lib/design-system/colors';\r\nimport { textClasses, getTextClass } from '@/lib/design-system/typography';\r\nimport { spacing, widgetSpacing, spacingUtilities } from '@/lib/design-system/spacing';\r\n\r\ninterface ReportGeneratorWithDialogWidgetV2Props {\r\n  title: string;\r\n  reportType: string;\r\n  description?: string;\r\n  dialogTitle: string;\r\n  dialogDescription: string;\r\n  selectLabel: string;\r\n  dataTable: string;\r\n  referenceField: string;\r\n  apiEndpoint?: string;\r\n}\r\n\r\nexport const ReportGeneratorWithDialogWidgetV2 = function ReportGeneratorWithDialogWidgetV2({\r\n  title,\r\n  reportType,\r\n  description,\r\n  dialogTitle,\r\n  dialogDescription,\r\n  selectLabel,\r\n  dataTable,\r\n  referenceField,\r\n  apiEndpoint,\r\n}: ReportGeneratorWithDialogWidgetV2Props) {\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [selectedRef, setSelectedRef] = useState<string>('');\r\n  const [references, setReferences] = useState<string[]>([]);\r\n  const [isLoadingRefs, setIsLoadingRefs] = useState(false);\r\n  const [downloadStatus, setDownloadStatus] = useState<\r\n    'idle' | 'downloading' | 'downloaded' | 'complete'\r\n  >('idle');\r\n  const [progress, setProgress] = useState(0);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [metadata, setMetadata] = useState<any>({});\r\n  const [performanceMetrics, setPerformanceMetrics] = useState<{\r\n    apiResponseTime?: number;\r\n    optimized?: boolean;\r\n  }>({});\r\n\r\n  const loadReferences = useCallback(async () => {\r\n    setIsLoadingRefs(true);\r\n    setError(null);\r\n    const startTime = performance.now();\r\n\r\n    try {\r\n      const api = createDashboardAPI();\r\n      const result = await api.fetch({\r\n        widgetIds: ['report_references'],\r\n        params: {\r\n          dataSource: 'report_references',\r\n          staticValue: dataTable,\r\n          label: referenceField,\r\n          limit: 1000,\r\n          offset: 0,\r\n        },\r\n      });\r\n\r\n      const endTime = performance.now();\r\n      setPerformanceMetrics({\r\n        apiResponseTime: Math.round(endTime - startTime),\r\n        optimized: false, // metadata doesn't have optimized property\r\n      });\r\n\r\n      // Check if widget data contains error\r\n      if (result.widgets?.[0]?.data?.error) {\r\n        throw new Error(result.widgets[0].data.error);\r\n      }\r\n\r\n      setReferences((result.widgets?.[0]?.data?.value as string[]) || []);\r\n      setMetadata(result.metadata || {});\r\n    } catch (err) {\r\n      console.error('Error loading references:', err);\r\n      setError(err instanceof Error ? (err as { message: string }).message : 'Unknown error');\r\n      setReferences([]);\r\n    } finally {\r\n      setIsLoadingRefs(false);\r\n    }\r\n  }, [dataTable, referenceField]);\r\n\r\n  // Load references when dialog opens\r\n  useEffect(() => {\r\n    if (isDialogOpen) {\r\n      loadReferences();\r\n    }\r\n  }, [isDialogOpen, loadReferences]);\r\n\r\n  const handleDownload = async () => {\r\n    if (!selectedRef || downloadStatus !== 'idle') return;\r\n\r\n    setDownloadStatus('downloading');\r\n    setProgress(0);\r\n\r\n    // Simulate download progress\r\n    const interval = setInterval(() => {\r\n      setProgress(prev => {\r\n        if (prev >= 95) {\r\n          clearInterval(interval);\r\n          return prev;\r\n        }\r\n        return prev + Math.random() * 15;\r\n      });\r\n    }, 300);\r\n\r\n    try {\r\n      // Call the API endpoint to generate report with selected reference\r\n      const response = await fetch(apiEndpoint!, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          reportType,\r\n          reference: selectedRef,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to generate report');\r\n      }\r\n\r\n      // Download the report\r\n      const blob = await response.blob();\r\n      const url = window.URL.createObjectURL(blob);\r\n      const a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = `${reportType}-${selectedRef}-${new Date().toISOString().split('T')[0]}.xlsx`;\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      window.URL.revokeObjectURL(url);\r\n      document.body.removeChild(a);\r\n\r\n      clearInterval(interval);\r\n      setProgress(100);\r\n      setDownloadStatus('downloaded');\r\n\r\n      // Close dialog and reset\r\n      setTimeout(() => {\r\n        setIsDialogOpen(false);\r\n        setSelectedRef('');\r\n        setDownloadStatus('idle');\r\n        setProgress(0);\r\n      }, 2000);\r\n    } catch (error) {\r\n      console.error('Download failed:', error);\r\n      clearInterval(interval);\r\n      setDownloadStatus('idle');\r\n      setProgress(0);\r\n      setError(error instanceof Error ? (error as { message: string }).message : 'Download failed');\r\n    }\r\n  };\r\n\r\n  // Memoize sorted references for better performance\r\n  const sortedReferences = useMemo(() => {\r\n    return [...references].sort((a, b) => {\r\n      // Try to sort numerically if possible\r\n      const numA = parseInt(a);\r\n      const numB = parseInt(b);\r\n      if (!isNaN(numA) && !isNaN(numB)) {\r\n        return numB - numA; // Descending order for numbers\r\n      }\r\n      return a.localeCompare(b);\r\n    });\r\n  }, [references]);\r\n\r\n  return (\r\n    <>\r\n      <motion.div\r\n        initial={{ opacity: 0, y: 20 }}\r\n        animate={{ opacity: 1, y: 0 }}\r\n        className='flex h-full items-center justify-between px-6'\r\n      >\r\n        <div className='flex-1'>\r\n          <p className={cn(textClasses['heading-large'], 'text-muted-foreground')}>\r\n            {description || `Generate ${title?.toLowerCase() || 'Report'}`}\r\n          </p>\r\n          {performanceMetrics.apiResponseTime && (\r\n            <p className={cn('mt-1', textClasses['label-small'], 'text-muted-foreground')}>\r\n              Last loaded in {performanceMetrics.apiResponseTime}ms\r\n              {performanceMetrics.optimized && ' (server-optimized)'}\r\n            </p>\r\n          )}\r\n        </div>\r\n\r\n        <Button\r\n          onClick={() => setIsDialogOpen(true)}\r\n          size='lg'\r\n          className='relative ml-4 select-none overflow-hidden px-8 py-6 text-lg'\r\n        >\r\n          <Download className='mr-3 h-6 w-6' />\r\n          Download\r\n        </Button>\r\n      </motion.div>\r\n\r\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\r\n        <DialogContent className='sm:max-w-[425px]'>\r\n          <DialogHeader>\r\n            <DialogTitle>{dialogTitle}</DialogTitle>\r\n            <DialogDescription>{dialogDescription}</DialogDescription>\r\n          </DialogHeader>\r\n\r\n          <div className='grid gap-4 py-4'>\r\n            {error && (\r\n              <div className={cn(\r\n                'rounded-md border p-3',\r\n                'border-destructive/20 bg-destructive/10'\r\n              )}>\r\n                <p className={cn(textClasses['body-small'])} style={{ color: semanticColors.destructive.DEFAULT }}>{error}</p>\r\n              </div>\r\n            )}\r\n\r\n            <div className='grid gap-2'>\r\n              <label htmlFor='reference' className={cn(\r\n                textClasses['body-small'],\r\n                'font-medium text-foreground'\r\n              )}>\r\n                {selectLabel}\r\n              </label>\r\n              <Select value={selectedRef} onValueChange={(value) => setSelectedRef(value)}>\r\n                <SelectTrigger\r\n                  id='reference'\r\n                  className={cn(\r\n                    'border-input bg-background/50 text-foreground',\r\n                    'hover:bg-background/70 focus:border-primary focus:ring-primary/50',\r\n                    textClasses['body-small']\r\n                  )}\r\n                >\r\n                  <SelectValue\r\n                    placeholder={\r\n                      isLoadingRefs ? 'Loading...' : `Select from ${references.length} options`\r\n                    }\r\n                  />\r\n                </SelectTrigger>\r\n                <SelectContent className={cn('max-h-[300px] border-border bg-card')}>\r\n                  {sortedReferences.map((ref: any) => (\r\n                    <SelectItem\r\n                      key={ref}\r\n                      value={ref}\r\n                      className={cn(\r\n                        'text-foreground hover:bg-accent focus:bg-accent focus:text-accent-foreground',\r\n                        textClasses['body-small']\r\n                      )}\r\n                    >\r\n                      {ref}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n\r\n              {metadata.totalCount && metadata.totalCount > references.length && (\r\n                <p className={cn(textClasses['label-small'], 'text-muted-foreground')}>\r\n                  Showing first {references.length} of {metadata.totalCount} total references\r\n                </p>\r\n              )}\r\n\r\n              {metadata.queryTime && (\r\n                <p className={cn(\r\n                  textClasses['label-small']\r\n                )} style={{ color: semanticColors.success.DEFAULT }}>\r\n                  ✓ Server-side query completed in {metadata.queryTime}\r\n                </p>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <DialogFooter>\r\n            <Button\r\n              variant='outline'\r\n              onClick={() => setIsDialogOpen(false)}\r\n              className={cn(\r\n                'border-border text-muted-foreground',\r\n                'hover:border-border/80 hover:bg-background/50 hover:text-foreground',\r\n                textClasses['body-small']\r\n              )}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              onClick={handleDownload}\r\n              disabled={!selectedRef || downloadStatus !== 'idle'}\r\n              className={cn(\r\n                'relative overflow-hidden text-primary-foreground shadow-lg',\r\n                getWidgetCategoryColor('reports', 'gradient'),\r\n                'hover:opacity-90',\r\n                downloadStatus === 'downloading' && 'opacity-50',\r\n                downloadStatus !== 'idle' && 'pointer-events-none',\r\n                !selectedRef && 'bg-muted hover:bg-muted',\r\n                textClasses['body-small']\r\n              )}\r\n            >\r\n              {downloadStatus === 'idle' && (\r\n                <>\r\n                  <Download className='mr-2 h-4 w-4' />\r\n                  Generate Report\r\n                </>\r\n              )}\r\n              {downloadStatus === 'downloading' && (\r\n                <div className='z-[5] flex items-center justify-center'>\r\n                  <Loader2 className='mr-2 h-4 w-4 animate-spin' />\r\n                  {Math.round(progress)}%\r\n                </div>\r\n              )}\r\n              {downloadStatus === 'downloaded' && (\r\n                <>\r\n                  <CheckCircle className='mr-2 h-4 w-4' />\r\n                  <span>Downloaded</span>\r\n                </>\r\n              )}\r\n              {downloadStatus === 'downloading' && (\r\n                <div\r\n                  className='absolute inset-0 bottom-0 left-0 z-[3] h-full bg-white/20 transition-all duration-200 ease-in-out'\r\n                  style={{ width: `${progress}%` }}\r\n                />\r\n              )}\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReportGeneratorWithDialogWidgetV2;\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/ReprintLabelWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/StaffWorkloadWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1972,1975],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1972,1975],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2144,2147],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2144,2147],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":148,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4465,4468],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4465,4468],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":163,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4950,4953],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4950,4953],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":198,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5850,5853],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5850,5853],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Staff Workload Widget - REST API Version\r\n * 顯示員工工作量折線圖\r\n * \r\n * v1.4 GraphQL Cleanup:\r\n * - 完全移除 GraphQL 代碼\r\n * - 使用純 REST API 調用\r\n * - 簡化代碼結構\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useMemo, useEffect, useState } from 'react';\nimport { DatabaseRecord } from '@/lib/types/database';\r\nimport { motion } from 'framer-motion';\r\nimport { \r\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend\r\n} from 'recharts';\r\nimport { format, startOfDay, endOfDay } from 'date-fns';\r\nimport { CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { ChartBarIcon } from '@heroicons/react/24/outline';\r\nimport { createDashboardAPIClient as createDashboardAPI } from '@/lib/api/admin/DashboardAPI.client';\r\nimport { TraditionalWidgetComponentProps } from '@/app/types/dashboard';\r\nimport { WidgetSkeleton } from './common/WidgetStates';\r\n\r\ninterface StaffWorkloadWidgetProps extends TraditionalWidgetComponentProps {\r\n  title: string;\r\n  department?: string;\r\n}\r\n\r\n// 顏色配置\r\nconst COLORS = [\r\n  '#3B82F6', // blue\r\n  '#10B981', // green  \r\n  '#F59E0B', // yellow\r\n  '#EF4444', // red\r\n  '#8B5CF6', // purple\r\n  '#06B6D4', // cyan\r\n  '#F97316', // orange\r\n  '#64748B', // gray\r\n  '#EC4899', // pink\r\n  '#6366F1'  // indigo\r\n];\r\n\r\nexport const StaffWorkloadWidget: React.FC<StaffWorkloadWidgetProps> = ({ \r\n  title, \r\n  timeFrame,\r\n  isEditMode,\r\n  department = 'Injection',\r\n  widget\r\n}) => {\r\n  const dashboardAPI = useMemo(() => createDashboardAPI(), []);\r\n\r\n  // 根據 timeFrame 設定查詢時間範圍\r\n  const dateRange = useMemo(() => {\r\n    if (!timeFrame) {\r\n      // 默認使用過去7天\r\n      const endDate = new Date();\r\n      const startDate = new Date();\r\n      startDate.setDate(startDate.getDate() - 7);\r\n      \r\n      return {\r\n        start: startDate,\r\n        end: endDate,\r\n      };\r\n    }\r\n    return {\r\n      start: timeFrame.start,\r\n      end: timeFrame.end,\r\n    };\r\n  }, [timeFrame]);\r\n\r\n  // API 狀態管理\r\n  const [chartData, setChartData] = useState<any[]>([]);\r\n  const [loading, setLoading] = useState(!isEditMode);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [metadata, setMetadata] = useState<any>({});\r\n\r\n  useEffect(() => {\r\n    if (isEditMode) return;\r\n\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        // 使用統一的 DashboardAPI 獲取數據\r\n        const result = await dashboardAPI.fetch(\r\n          {\r\n            widgetIds: ['statsCard'],\r\n            dateRange: {\r\n              start: dateRange.start.toISOString(),\r\n              end: dateRange.end.toISOString(),\r\n            },\r\n            params: {\r\n              dataSource: 'staff_workload',\r\n              staticValue: department,\r\n            },\r\n          },\r\n          {\r\n            strategy: 'server',\r\n            cache: { ttl: 300 }, // 5分鐘緩存\r\n          }\r\n        );\r\n\r\n        if (result.widgets && result.widgets.length > 0) {\r\n          const widgetData = result.widgets[0];\r\n\r\n          if (widgetData.data.error) {\r\n            console.error('[StaffWorkloadWidget as string] API error:', widgetData.data.error);\r\n            setError(widgetData.data.error);\r\n            setChartData([]);\r\n            return;\r\n          }\r\n\r\n          const workloadData = widgetData.data.value || [];\r\n          const widgetMetadata = widgetData.data.metadata || {};\r\n\r\n          console.log('[StaffWorkloadWidget as string] API returned data:', workloadData);\r\n          console.log('[StaffWorkloadWidget as string] Metadata:', widgetMetadata);\r\n\r\n          // 處理數據格式 - 轉換為 Recharts 需要的格式\r\n          const processedData = processWorkloadData(workloadData);\r\n          setChartData(processedData);\r\n          setMetadata({ ...widgetMetadata, useGraphQL: false });\r\n\r\n        } else {\r\n          console.warn('[StaffWorkloadWidget as string] No widget data returned from API');\r\n          setChartData([]);\r\n        }\r\n      } catch (err) {\r\n        console.error('[StaffWorkloadWidget as string] Error fetching data from API:', err);\r\n        setError(err instanceof Error ? (err as { message: string }).message : 'Unknown error');\r\n        setChartData([]);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [dashboardAPI, dateRange, department, isEditMode]);\r\n\r\n  // 處理工作量數據\r\n  const processWorkloadData = (rawData: Record<string, unknown>[]) => {\r\n    if (!rawData || rawData.length === 0) return [];\r\n\r\n    // 按日期分組\r\n    const dateGroups = new Map<string, any>();\r\n    const staffNames = new Set<string>();\r\n\r\n    rawData.forEach(item => {\r\n      const dateKey = format(new Date(item.work_date), 'MMM d');\r\n      staffNames.add(item.staff_name);\r\n      \r\n      if (!dateGroups.has(dateKey)) {\r\n        dateGroups.set(dateKey, { date: dateKey });\r\n      }\r\n      \r\n      dateGroups.get(dateKey)![item.staff_name] = item.action_count;\r\n    });\r\n\r\n    // 轉換為數組並補充缺失的員工數據\r\n    const processedData = Array.from(dateGroups.values()).map((dayData: any) => {\r\n      const completeData = { ...dayData };\r\n      staffNames.forEach(name => {\r\n        if (!(name in completeData)) {\r\n          completeData[name as string] = 0;\r\n        }\r\n      });\r\n      return completeData;\r\n    });\r\n\r\n    // 按日期排序\r\n    return processedData.sort((a, b) => {\r\n      const dateA = new Date(a.date + ', 2025');\r\n      const dateB = new Date(b.date + ', 2025');\r\n      return dateA.getTime() - dateB.getTime();\r\n    });\r\n  };\r\n\r\n  // 獲取員工名單\r\n  const staffNames = useMemo(() => {\r\n    if (chartData.length === 0) return [];\r\n    \r\n    const names = new Set<string>();\r\n    chartData.forEach(item => {\r\n      Object.keys(item).forEach(key => {\r\n        if (key !== 'date') {\r\n          names.add(key);\r\n        }\r\n      });\r\n    });\r\n    \r\n    return Array.from(names).sort();\r\n  }, [chartData]);\r\n\r\n  // 自定義 Tooltip\r\n  const CustomTooltip = ({ active, payload, label }: any) => {\r\n    if (active && payload && payload.length) {\r\n      return (\r\n        <div className=\"bg-slate-800 border border-slate-600 rounded-lg p-3 shadow-lg\">\r\n          <p className=\"text-white font-medium mb-2\">{label}</p>\r\n          {payload.map((item: DatabaseRecord, index: number) => (\r\n            <p key={index} className=\"text-sm\" style={{ color: item.color }}>\r\n              {item.dataKey}: <span className=\"font-semibold\">{item.value}</span>\r\n            </p>\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0, y: 20 }}\r\n      animate={{ opacity: 1, y: 0 }}\r\n      transition={{ delay: 0.1 }}\r\n      className=\"h-full flex flex-col relative\"\r\n    >\r\n      \r\n      <CardHeader className=\"pb-2\">\r\n        <CardTitle className=\"widget-title flex items-center gap-2\">\r\n          <ChartBarIcon className=\"w-5 h-5\" />\r\n          {title}\r\n        </CardTitle>\r\n        <p className=\"text-xs text-slate-400 mt-1\">\r\n          {department} Department - From {format(new Date(dateRange.start), 'MMM d')} to {format(new Date(dateRange.end), 'MMM d')}\r\n          <span className=\"text-green-400/70 ml-2\">\r\n            ✓ REST API\r\n          </span>\r\n        </p>\r\n      </CardHeader>\r\n      \r\n      <div className=\"flex-1 p-4\">\r\n        {loading ? (\r\n          <WidgetSkeleton type=\"chart-bar\" height={150} />\r\n        ) : error ? (\r\n          <div className=\"text-red-400 text-sm text-center h-full flex items-center justify-center\">\r\n            Error loading data: {error}\r\n          </div>\r\n        ) : chartData.length === 0 ? (\r\n          <div className=\"text-slate-400 text-sm text-center h-full flex items-center justify-center\">\r\n            No workload data available for {department} department\r\n          </div>\r\n        ) : (\r\n          <div className=\"h-full\">\r\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n              <LineChart\r\n                data={chartData}\r\n                margin={{\r\n                  top: 20,\r\n                  right: 30,\r\n                  left: 20,\r\n                  bottom: 5,\r\n                }}\r\n              >\r\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\r\n                <XAxis \r\n                  dataKey=\"date\" \r\n                  stroke=\"#9CA3AF\"\r\n                  fontSize={12}\r\n                  tick={{ fill: '#9CA3AF' }}\r\n                />\r\n                <YAxis \r\n                  stroke=\"#9CA3AF\"\r\n                  fontSize={12}\r\n                  tick={{ fill: '#9CA3AF' }}\r\n                />\r\n                <Tooltip content={<CustomTooltip />} />\r\n                <Legend />\r\n                \r\n                {staffNames.map((name, index) => (\r\n                  <Line\r\n                    key={name}\r\n                    type=\"monotone\"\r\n                    dataKey={name}\r\n                    stroke={COLORS[index % COLORS.length]}\r\n                    strokeWidth={2}\r\n                    dot={{ fill: COLORS[index % COLORS.length], strokeWidth: 2, r: 4 }}\r\n                    activeDot={{ r: 6 }}\r\n                  />\r\n                ))}\r\n              </LineChart>\r\n            </ResponsiveContainer>\r\n            \r\n            {metadata?.rpcFunction && (\r\n              <p className=\"text-xs text-green-400/70 mt-2 text-center\">\r\n                ✓ REST API optimized ({metadata.rpcFunction})\r\n              </p>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default StaffWorkloadWidget;","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/StatsCardWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/StillInAwaitPercentageWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/StillInAwaitWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/StockDistributionChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":188,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5931,5934],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5931,5934],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":281,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":281,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8815,8818],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8815,8818],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":300,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":300,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9474,9477],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9474,9477],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":340,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":340,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10926,10929],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10926,10929],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Stock Distribution Chart\r\n * 遷移至 REST API 架構，移除版本號\r\n * 使用 NestJS Inventory API 端點進行數據獲取\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { Treemap, ResponsiveContainer, Tooltip } from 'recharts';\r\nimport { TraditionalWidgetComponentProps } from '@/app/types/dashboard';\r\nimport { useAdminRefresh } from '@/app/admin/contexts/AdminRefreshContext';\r\nimport { WidgetSkeleton, WidgetError } from './common/WidgetStates';\r\nimport { \r\n  brandColors, \r\n  widgetColors, \r\n  semanticColors,\r\n  getWidgetCategoryColor \r\n} from '@/lib/design-system/colors';\r\nimport { textClasses, getTextClass } from '@/lib/design-system/typography';\r\nimport { spacing, widgetSpacing, spacingUtilities } from '@/lib/design-system/spacing';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface StockDistributionData {\r\n  product_code: string;\r\n  injection?: number;\r\n  pipeline?: number;\r\n  prebook?: number;\r\n  await?: number;\r\n  fold?: number;\r\n  bulk?: number;\r\n  await_grn?: number;\r\n  backcarpark?: number;\r\n  data_code?: {\r\n    description?: string;\r\n    colour?: string;\r\n    type?: string;\r\n  };\r\n}\r\n\r\ninterface TreemapData {\r\n  name: string;\r\n  value: number;\r\n  color: string;\r\n  description?: string;\r\n}\r\n\r\n// REST API client for stock distribution\r\nconst stockDistributionApiClient = {\r\n  async getStockDistribution(offset: number = 0, limit: number = 100): Promise<StockDistributionData[]> {\r\n    const url = new URL('/api/v1/inventory/stock-distribution', window.location.origin);\r\n    url.searchParams.append('offset', offset.toString());\r\n    url.searchParams.append('limit', limit.toString());\r\n    \r\n    const response = await fetch(url.toString(), {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch stock distribution: ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data.data || [];\r\n  },\r\n};\r\n\r\ninterface StockDistributionChartProps extends TraditionalWidgetComponentProps {\r\n  useGraphQL?: boolean;\r\n}\r\n\r\nexport const StockDistributionChart: React.FC<StockDistributionChartProps> = ({\r\n  widget,\r\n  isEditMode,\r\n  useGraphQL = false, // 默認使用 REST API\r\n}) => {\r\n  const [chartData, setChartData] = useState<StockDistributionData[]>([]);\r\n  const [selectedType, setSelectedType] = useState<string>('all');\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [performanceMetrics, setPerformanceMetrics] = useState<{\r\n    lastFetchTime?: number;\r\n    optimized?: boolean;\r\n    totalStock?: number;\r\n  }>({});\r\n  const { refreshTrigger } = useAdminRefresh();\r\n\r\n  const fetchStockDistribution = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const startTime = performance.now();\r\n      const data = await stockDistributionApiClient.getStockDistribution();\r\n      const endTime = performance.now();\r\n\r\n      // Calculate total stock\r\n      const totalStock = data.reduce((sum, item) => {\r\n        return sum + \r\n          (item.injection || 0) + \r\n          (item.pipeline || 0) + \r\n          (item.prebook || 0) + \r\n          (item.await || 0) + \r\n          (item.fold || 0) + \r\n          (item.bulk || 0) + \r\n          (item.await_grn || 0) + \r\n          (item.backcarpark || 0);\r\n      }, 0);\r\n\r\n      setChartData(data);\r\n      setPerformanceMetrics({\r\n        lastFetchTime: Math.round(endTime - startTime),\r\n        optimized: true,\r\n        totalStock,\r\n      });\r\n    } catch (err) {\r\n      console.error('[StockDistributionChart as string] Error fetching data:', err);\r\n      setError(err instanceof Error ? (err as { message: string }).message : 'Failed to fetch stock distribution');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!isEditMode) {\r\n      fetchStockDistribution();\r\n    }\r\n  }, [isEditMode, fetchStockDistribution, refreshTrigger]);\r\n\r\n  // Transform data for treemap visualization\r\n  const transformDataForTreemap = useCallback((data: StockDistributionData[], selectedType: string): TreemapData[] => {\r\n    if (!data || data.length === 0) return [];\r\n\r\n    const locations = ['injection', 'pipeline', 'prebook', 'await', 'fold', 'bulk', 'await_grn', 'backcarpark'];\r\n    const result: TreemapData[] = [];\r\n\r\n    data.forEach(item => {\r\n      locations.forEach(location => {\r\n        const value = item[location as keyof StockDistributionData] as number;\r\n        if (value && value > 0) {\r\n          // Filter by selected type if not \"all\"\r\n          if (selectedType !== 'all' && item.data_code?.type !== selectedType) {\r\n            return;\r\n          }\r\n\r\n          result.push({\r\n            name: `${item.product_code} (${location})`,\r\n            value,\r\n            color: getLocationColor(location),\r\n            description: item.data_code?.description || item.product_code,\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    return result.sort((a, b) => b.value - a.value);\r\n  }, []);\r\n\r\n  const getLocationColor = (location: string): string => {\r\n    const colorMap: Record<string, string> = {\r\n      injection: brandColors.primary[500],\r\n      pipeline: brandColors.secondary[500],\r\n      prebook: '#F59E0B',\r\n      await: '#EF4444',\r\n      fold: '#8B5CF6',\r\n      bulk: '#10B981',\r\n      await_grn: '#F97316',\r\n      backcarpark: '#6B7280',\r\n    };\r\n    return colorMap[location as string] || brandColors.primary[500];\r\n  };\r\n\r\n  const getAvailableTypes = useCallback(() => {\r\n    const types = new Set(['all']);\r\n    chartData.forEach(item => {\r\n      if (item.data_code?.type) {\r\n        types.add(item.data_code.type);\r\n      }\r\n    });\r\n    return Array.from(types);\r\n  }, [chartData]);\r\n\r\n  const treemapData = transformDataForTreemap(chartData, selectedType);\r\n\r\n  const customTooltip = ({ active, payload }: any) => {\r\n    if (active && payload && payload.length) {\r\n      const data = payload[0].payload;\r\n      return (\r\n        <div className={cn(\r\n          'rounded-lg border bg-card p-3 shadow-lg',\r\n          'border-border',\r\n          'text-foreground'\r\n        )}>\r\n          <p className={cn('font-semibold', textClasses['body-small'])}>\r\n            {data.description || data.name}\r\n          </p>\r\n          <p className={cn('text-muted-foreground', textClasses['label-small'])}>\r\n            Quantity: {data.value}\r\n          </p>\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  if (isEditMode) {\r\n    return (\r\n      <div className={cn(\r\n        'flex h-full w-full items-center justify-center rounded-lg border',\r\n        'border-border bg-card/40'\r\n      )}>\r\n        <div className='text-center'>\r\n          <h3 className={cn(textClasses['body-medium'], 'font-semibold text-foreground')}>\r\n            Stock Distribution Chart\r\n          </h3>\r\n          <p className={cn(textClasses['body-small'], 'text-muted-foreground')}>\r\n            Treemap visualization of stock distribution\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className={cn(\r\n        'flex h-full w-full items-center justify-center rounded-lg border',\r\n        'border-border bg-card/40'\r\n      )}>\r\n        <WidgetSkeleton type='chart-bar' />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className={cn(\r\n        'flex h-full w-full items-center justify-center rounded-lg border',\r\n        'border-border bg-card/40'\r\n      )}>\r\n        <WidgetError message={error} onRetry={fetchStockDistribution} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={cn(\r\n      'flex h-full w-full flex-col overflow-hidden rounded-lg border',\r\n      'border-border bg-card/40'\r\n    )}>\r\n      {/* Header */}\r\n      <div className={cn(\r\n        'flex-shrink-0 border-b px-3 py-2',\r\n        'border-border'\r\n      )}>\r\n        <div className='flex items-center justify-between'>\r\n          <div>\r\n            <h3 className={cn(textClasses['body-small'], 'font-semibold text-foreground')}>\r\n              Stock Distribution\r\n            </h3>\r\n            <p className={cn('mt-0.5', textClasses['label-small'], 'text-muted-foreground')}>\r\n              Treemap visualization\r\n            </p>\r\n          </div>\r\n          \r\n          {/* Type Filter */}\r\n          <div className='flex items-center gap-2'>\r\n            <select\r\n              value={selectedType}\r\n              onChange={(e) => setSelectedType(e.target.value)}\r\n              className={cn(\r\n                'rounded border px-2 py-1',\r\n                'border-border bg-background',\r\n                'text-foreground',\r\n                textClasses['label-small']\r\n              )}\r\n            >\r\n              {getAvailableTypes().map((type: any) => (\r\n                <option key={type} value={type}>\r\n                  {type === 'all' ? 'All Types' : type}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Chart Content */}\r\n      <div className={cn('min-h-0 flex-1', widgetSpacing.container)}>\r\n        {treemapData.length > 0 ? (\r\n          <ResponsiveContainer width='100%' height='100%'>\r\n            <Treemap\r\n              data={treemapData}\r\n              dataKey='value'\r\n              stroke='#ffffff'\r\n              fill={brandColors.primary[500]}\r\n              content={(({ x, y, width, height, payload }: any) => {\r\n                if (!payload || width < 40 || height < 30) return null;\r\n                \r\n                return (\r\n                  <g>\r\n                    <rect\r\n                      x={x}\r\n                      y={y}\r\n                      width={width}\r\n                      height={height}\r\n                      fill={payload.color}\r\n                      stroke='#ffffff'\r\n                      strokeWidth={1}\r\n                      opacity={0.8}\r\n                    />\r\n                    {width > 60 && height > 40 && (\r\n                      <text\r\n                        x={x + width / 2}\r\n                        y={y + height / 2 - 6}\r\n                        textAnchor='middle'\r\n                        fill='#ffffff'\r\n                        fontSize={12}\r\n                        fontWeight='bold'\r\n                      >\r\n                        {payload.name.split(' ')[0]}\r\n                      </text>\r\n                    )}\r\n                    {width > 60 && height > 40 && (\r\n                      <text\r\n                        x={x + width / 2}\r\n                        y={y + height / 2 + 8}\r\n                        textAnchor='middle'\r\n                        fill='#ffffff'\r\n                        fontSize={10}\r\n                      >\r\n                        {payload.value}\r\n                      </text>\r\n                    )}\r\n                  </g>\r\n                );\r\n              }) as any}\r\n            >\r\n              <Tooltip content={customTooltip} />\r\n            </Treemap>\r\n          </ResponsiveContainer>\r\n        ) : (\r\n          <div className='flex h-full items-center justify-center'>\r\n            <p className={cn(textClasses['body-small'], 'text-muted-foreground')}>\r\n              No stock distribution data available\r\n            </p>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Performance Metrics */}\r\n      {performanceMetrics.optimized && (\r\n        <div className={cn(\r\n          'flex-shrink-0 border-t px-3 py-2',\r\n          'border-border'\r\n        )}>\r\n          <div className='flex items-center justify-between'>\r\n            <div className={cn(\r\n              'text-right',\r\n              textClasses['label-small']\r\n            )} style={{ color: semanticColors.success.DEFAULT }}>\r\n              ✓ REST API optimized ({performanceMetrics.lastFetchTime}ms)\r\n            </div>\r\n            {performanceMetrics.totalStock && (\r\n              <div className={cn(\r\n                textClasses['label-small'],\r\n                'text-muted-foreground'\r\n              )}>\r\n                Total Stock: {performanceMetrics.totalStock}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StockDistributionChart;","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/StockDistributionChartV2.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":124,"column":325,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":328,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4405,4408],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4405,4408],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":129,"column":128,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":131,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4709,4712],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4709,4712],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":158,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5517,5520],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5517,5520],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":192,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":192,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6890,6893],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6890,6893],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Stock Distribution Chart V2\r\n * 完全遷移到 REST API 架構\r\n * 使用 NestJS API 端點進行數據獲取\r\n * 移除 GraphQL 依賴\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { Treemap, ResponsiveContainer, Tooltip } from 'recharts';\r\nimport { useQuery } from '@tanstack/react-query';\r\nimport { TraditionalWidgetComponentProps } from '@/app/types/dashboard';\r\nimport { useAdminRefresh } from '@/app/admin/contexts/AdminRefreshContext';\r\nimport { WidgetSkeleton, WidgetError } from './common/WidgetStates';\r\nimport { \r\n  brandColors, \r\n  widgetColors, \r\n  semanticColors,\r\n  getWidgetCategoryColor \r\n} from '@/lib/design-system/colors';\r\nimport { textClasses, getTextClass } from '@/lib/design-system/typography';\r\nimport { spacing, widgetSpacing, spacingUtilities } from '@/lib/design-system/spacing';\r\nimport { cn } from '@/lib/utils';\r\n\r\nimport { widgetAPI } from '@/lib/api/widgets/widget-api-client';\r\n\r\nexport interface StockDistributionData {\r\n  name: string;\r\n  size: number;\r\n  value: number;\r\n  percentage: number;\r\n  color: string;\r\n  fill: string;\r\n  description: string;\r\n  type: string;\r\n  stock: string;\r\n  stock_level: number;\r\n}\r\n\r\ninterface StockDistributionChartProps extends TraditionalWidgetComponentProps {\r\n  useGraphQL?: boolean;\r\n}\r\n\r\nexport const StockDistributionChartV2: React.FC<StockDistributionChartProps> = ({\r\n  widget,\r\n  isEditMode,\r\n  useGraphQL,\r\n}) => {\r\n  // 完全使用 NestJS REST API with React Query\r\n  const [selectedType, setSelectedType] = useState<string>('all');\r\n  const { refreshTrigger } = useAdminRefresh();\r\n\r\n  // React Query for data fetching\r\n  const { \r\n    data: response, \r\n    isLoading: loading, \r\n    error,\r\n    isError,\r\n    refetch\r\n  } = useQuery({\r\n    queryKey: ['stock-distribution', selectedType],\r\n    queryFn: () => widgetAPI.getStockDistribution({\r\n      type: selectedType === 'all' ? undefined : selectedType,\r\n    }),\r\n    enabled: !isEditMode, // Only fetch when not in edit mode\r\n    staleTime: 5 * 60 * 1000, // Consider data stale after 5 minutes\r\n    gcTime: 5 * 60 * 1000, // Cache for 5 minutes\r\n    refetchOnWindowFocus: false,\r\n    retry: 3,\r\n    retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),\r\n  });\r\n\r\n  // 數據處理函數\r\n  function processStockDistributionData(rawData: Record<string, unknown>[], type: string): StockDistributionData[] {\r\n    if (!rawData || !Array.isArray(rawData)) return [];\r\n    \r\n    // 過濾選定類型\r\n    let filteredData = rawData;\r\n    if (type !== 'all' && type !== 'ALL TYPES') {\r\n      filteredData = rawData.filter((item) => item.type === type);\r\n    }\r\n    \r\n    // 按庫存量排序\r\n    const sortedData = filteredData\r\n      .filter(item => item.stock_level > 0)\r\n      .sort((a, b) => b.stock_level - a.stock_level);\r\n    \r\n    const totalStock = sortedData.reduce((sum, item) => sum + item.stock_level, 0);\r\n    \r\n    // 設計系統顏色\r\n    const CHART_COLORS = [\r\n      widgetColors.charts.primary,\r\n      widgetColors.charts.secondary,\r\n      widgetColors.charts.accent,\r\n      semanticColors.success.DEFAULT,\r\n      semanticColors.warning.DEFAULT,\r\n      semanticColors.info.DEFAULT,\r\n      brandColors.primary[500],\r\n      brandColors.secondary[500],\r\n      widgetColors.charts.accent,\r\n      widgetColors.charts.grid,\r\n      // 備用顏色\r\n      '#10b981', '#3b82f6', '#8b5cf6', '#ec4899', '#f59e0b',\r\n      '#06b6d4', '#f97316', '#6366f1', '#84cc16', '#14b8a6',\r\n      '#a855f7', '#eab308', '#059669', '#2563eb', '#7c3aed',\r\n    ];\r\n    \r\n    return sortedData.map((item, index) => ({\r\n      name: item.product_code || item.stock || '',\r\n      size: item.stock_level || 0,\r\n      value: item.stock_level || 0,\r\n      percentage: totalStock > 0 ? (item.stock_level / totalStock) * 100 : 0,\r\n      color: CHART_COLORS[index % CHART_COLORS.length] || '#000000',\r\n      fill: CHART_COLORS[index % CHART_COLORS.length] || '#000000',\r\n      description: item.description || '-',\r\n      type: item.type || '-',\r\n      stock: item.product_code || item.stock || '',\r\n      stock_level: item.stock_level || 0,\r\n    }));\r\n  }\r\n\r\n  // Extract and process data\r\n  const rawData = (response && typeof response === 'object' && response !== null && 'success' in response && response.success && 'data' in response && response.data) ? (Array.isArray(response.data) ? response.data : (typeof response.data === 'object' && response.data !== null && 'data' in response.data ? (response.data as any).data : response.data) || []) : [];\r\n  const chartData = processStockDistributionData(rawData, selectedType);\r\n  \r\n  // Performance metrics\r\n  const performanceMetrics = {\r\n    lastFetchTime: (response && typeof response === 'object' && response !== null && 'responseTime' in response ? (response as any).responseTime : 0) || 0,\r\n    optimized: true,\r\n    totalStock: chartData.reduce((sum, item) => sum + item.stock_level, 0),\r\n  };\r\n\r\n\r\n  // 監聽刷新觸發器\r\n  useEffect(() => {\r\n    if (refreshTrigger) {\r\n      refetch();\r\n    }\r\n  }, [refreshTrigger, refetch]);\r\n\r\n  // 監聽類型變更事件\r\n  useEffect(() => {\r\n    const handleTypeChange = async (event: Event) => {\r\n      const customEvent = event as CustomEvent;\r\n      const { type } = customEvent.detail;\r\n      setSelectedType(type);\r\n      // React Query will automatically refetch when selectedType changes\r\n    };\r\n\r\n    window.addEventListener('stockTypeChanged', handleTypeChange);\r\n    return () => {\r\n      window.removeEventListener('stockTypeChanged', handleTypeChange);\r\n    };\r\n  }, []);\r\n\r\n  // 自定義 Tooltip\r\n  const CustomTooltip = ({ active, payload }: any) => {\r\n    if (active && payload && payload[0]) {\r\n      const data = payload[0].payload;\r\n      return (\r\n        <div className={cn(\r\n          'rounded-lg border bg-card p-3 shadow-lg',\r\n          'border-border'\r\n        )}>\r\n          <p className={cn(textClasses['body-small'], 'font-medium text-foreground')}>{data.name}</p>\r\n          <p className={cn('mt-1', textClasses['label-small'], 'text-muted-foreground')}>\r\n            Stock:{' '}\r\n            <span className='font-medium text-foreground'>{(data.value || 0).toLocaleString()}</span>\r\n          </p>\r\n          <p className={cn(textClasses['label-small'], 'text-muted-foreground')}>\r\n            Share:{' '}\r\n            <span className='font-medium text-foreground'>{(data.percentage || 0).toFixed(1)}%</span>\r\n          </p>\r\n          {data.description && (\r\n            <p className={cn('mt-1', textClasses['label-small'], 'text-muted-foreground')}>\r\n              Description: <span className='text-foreground'>{data.description}</span>\r\n            </p>\r\n          )}\r\n          {data.type && (\r\n            <p className={cn(textClasses['label-small'], 'text-muted-foreground')}>\r\n              Type: <span className='text-foreground'>{data.type}</span>\r\n            </p>\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // 自定義內容渲染\r\n  const CustomizedContent = (props: any) => {\r\n    const { x, y, width, height, name, value, percentage } = props;\r\n\r\n    // 只在有足夠空間時顯示內容\r\n    if (width < 50 || height < 40) return null;\r\n\r\n    // 判斷是否需要使用白色文字（深色背景）\r\n    const getTextColor = (bgColor: string) => {\r\n      // 轉換 hex 到 RGB\r\n      const hex = bgColor.replace('#', '');\r\n      const r = parseInt(hex.substr(0, 2), 16);\r\n      const g = parseInt(hex.substr(2, 2), 16);\r\n      const b = parseInt(hex.substr(4, 2), 16);\r\n\r\n      // 計算亮度\r\n      const brightness = (r * 299 + g * 587 + b * 114) / 1000;\r\n\r\n      // 如果背景較暗，使用設計系統的前景色；否則使用深色\r\n      return brightness < 128 ? 'hsl(var(--foreground))' : 'hsl(var(--foreground) / 0.8)';\r\n    };\r\n\r\n    const textColor = props.fill ? getTextColor(props.fill) : 'hsl(var(--foreground) / 0.8)';\r\n\r\n    return (\r\n      <g>\r\n        <rect\r\n          x={x}\r\n          y={y}\r\n          width={width}\r\n          height={height}\r\n          fill={props.fill}\r\n          stroke='rgba(0, 0, 0, 0.1)'\r\n          strokeWidth={1}\r\n        />\r\n        {width > 80 && height > 60 && (\r\n          <>\r\n            <text\r\n              x={x + width / 2}\r\n              y={y + height / 2 - 10}\r\n              textAnchor='middle'\r\n              fill={textColor}\r\n              fontSize={Math.min(width / 8, 18)}\r\n              fontWeight='600'\r\n            >\r\n              {name}\r\n            </text>\r\n            <text\r\n              x={x + width / 2}\r\n              y={y + height / 2 + 10}\r\n              textAnchor='middle'\r\n              fill={textColor}\r\n              fontSize={Math.min(width / 10, 14)}\r\n              opacity={0.8}\r\n            >\r\n              {(value || 0).toLocaleString()}\r\n            </text>\r\n            {percentage >= 1 && (\r\n              <text\r\n                x={x + width / 2}\r\n                y={y + height / 2 + 25}\r\n                textAnchor='middle'\r\n                fill={textColor}\r\n                fontSize={Math.min(width / 12, 12)}\r\n                opacity={0.6}\r\n              >\r\n                {percentage.toFixed(1)}%\r\n              </text>\r\n            )}\r\n          </>\r\n        )}\r\n        {width > 60 && height > 50 && width <= 80 && (\r\n          <text\r\n            x={x + width / 2}\r\n            y={y + height / 2}\r\n            textAnchor='middle'\r\n            fill={textColor}\r\n            fontSize={Math.min(width / 6, 14)}\r\n            fontWeight='500'\r\n          >\r\n            {name}\r\n          </text>\r\n        )}\r\n      </g>\r\n    );\r\n  };\r\n\r\n  if (loading) {\r\n    return <WidgetSkeleton type=\"chart-bar\" height={200} />;\r\n  }\r\n\r\n  if (isError) {\r\n    const errorMessage = error instanceof Error ? (error as { message: string }).message : 'Failed to fetch stock distribution data';\r\n    return (\r\n      <WidgetError \r\n        message={errorMessage}\r\n        severity=\"error\"\r\n        display=\"inline\"\r\n        onRetry={() => refetch()}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className='relative h-full w-full p-2'>\r\n      {chartData.length === 0 ? (\r\n        <div className='flex h-full items-center justify-center'>\r\n          <p className={cn(textClasses['body-base'], 'text-muted-foreground')}>No stock data available</p>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <ResponsiveContainer width='100%' height='100%'>\r\n            <Treemap\r\n              data={chartData}\r\n              dataKey='size'\r\n              aspectRatio={4 / 3}\r\n              stroke='rgba(0, 0, 0, 0.1)'\r\n              content={<CustomizedContent />}\r\n            >\r\n              <Tooltip content={<CustomTooltip />} />\r\n            </Treemap>\r\n          </ResponsiveContainer>\r\n\r\n          {/* Performance indicator */}\r\n          {performanceMetrics.optimized && (\r\n            <div className={cn(\r\n              'absolute bottom-2 right-2 rounded bg-card/80 border border-border px-2 py-1',\r\n              textClasses['label-small']\r\n            )}>\r\n              <span className='text-success'>\r\n                ✓ NestJS API ({performanceMetrics.lastFetchTime}ms)\r\n              </span>\r\n              {performanceMetrics.totalStock && (\r\n                <span className='ml-2 text-muted-foreground'>\r\n                  Total: {performanceMetrics.totalStock.toLocaleString()}\r\n                </span>\r\n              )}\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StockDistributionChartV2;","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/StockLevelHistoryChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1237,1240],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1237,1240],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":199,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6641,6644],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6641,6644],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":201,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6741,6744],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6741,6744],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":301,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":301,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9874,9877],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9874,9877],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":309,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":309,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10214,10217],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10214,10217],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":324,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":324,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10668,10671],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10668,10671],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":330,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":330,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10844,10847],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10844,10847],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  Legend,\r\n} from 'recharts';\r\nimport { TraditionalWidgetComponentProps } from '@/app/types/dashboard';\r\nimport { useAdminRefresh } from '@/app/admin/contexts/AdminRefreshContext';\r\nimport { TrendingUp } from 'lucide-react';\r\nimport { createDashboardAPIClient as createDashboardAPI } from '@/lib/api/admin/DashboardAPI.client';\r\nimport { format } from 'date-fns';\r\nimport { useInViewport } from '@/app/admin/hooks/useInViewport';\r\nimport { ChartContainer } from './common/charts/ChartContainer';\r\nimport { LineChartSkeleton } from './common/charts/ChartSkeleton';\r\nimport { \r\n  brandColors, \r\n  widgetColors, \r\n  semanticColors,\r\n  getWidgetCategoryColor \r\n} from '@/lib/design-system/colors';\r\nimport { textClasses, getTextClass } from '@/lib/design-system/typography';\r\nimport { spacing, widgetSpacing, spacingUtilities } from '@/lib/design-system/spacing';\r\nimport { cn } from '@/lib/utils';\r\n\r\n// GraphQL query removed - using REST API only\r\n\r\ninterface ChartDataPoint {\r\n  time: string;\r\n  timestamp: Date;\r\n  [key: string]: any; // 動態的產品代碼欄位\r\n}\r\n\r\ninterface StockData {\r\n  stock: string;\r\n  stock_level: number;\r\n  latest_update: string;\r\n}\r\n\r\ninterface StockLevelHistoryChartProps extends TraditionalWidgetComponentProps {\r\n  timeFrame?: {\r\n    start: Date;\r\n    end: Date;\r\n  };\r\n}\r\n\r\n// 顏色調色板 - 使用設計系統顏色\r\nconst LINE_COLORS = [\r\n  semanticColors.success.DEFAULT,\r\n  widgetColors.charts.primary,\r\n  semanticColors.warning.DEFAULT,\r\n  brandColors.primary[500],\r\n  semanticColors.destructive.DEFAULT,\r\n  widgetColors.charts.accent,\r\n  semanticColors.info.DEFAULT,\r\n  brandColors.secondary[500],\r\n];\r\n\r\nexport const StockLevelHistoryChart: React.FC<StockLevelHistoryChartProps> = ({\r\n  widget,\r\n  isEditMode,\r\n  timeFrame,\r\n}) => {\r\n  // Using REST API only - GraphQL removed\r\n  const [chartData, setChartData] = useState<ChartDataPoint[]>([]);\r\n  const [productCodes, setProductCodes] = useState<string[]>([]);\r\n  const [selectedType, setSelectedType] = useState<string>('all');\r\n  const [adjustedTimeFrame, setAdjustedTimeFrame] = useState<{ start: Date; end: Date } | null>(\r\n    null\r\n  );\r\n  const { refreshTrigger } = useAdminRefresh();\r\n  const dashboardAPI = useMemo(() => createDashboardAPI(), []);\r\n  \r\n  // Progressive loading setup\r\n  const chartRef = useRef<HTMLDivElement>(null);\r\n  const { isInViewport, hasBeenInViewport } = useInViewport(chartRef, {\r\n    threshold: 0.1,\r\n    rootMargin: '50px',\r\n    triggerOnce: true,\r\n  });\r\n\r\n  // 計算調整後的時間範圍\r\n  const calculateAdjustedTimeFrame = useCallback(\r\n    (originalTimeFrame?: { start: Date; end: Date }) => {\r\n      const now = new Date();\r\n      const twoWeeksAgo = new Date(now);\r\n      twoWeeksAgo.setDate(now.getDate() - 14);\r\n\r\n      // 如果沒有提供時間範圍，使用預設2週\r\n      if (!originalTimeFrame) {\r\n        console.log('[StockLevelHistoryChart as string] No timeFrame provided, using default 2 weeks');\r\n        return { start: twoWeeksAgo, end: now };\r\n      }\r\n\r\n      const duration = originalTimeFrame.end.getTime() - originalTimeFrame.start.getTime();\r\n      const days = duration / (1000 * 60 * 60 * 24);\r\n\r\n      // 如果時間範圍太短（少於1天），使用預設2週\r\n      if (days < 1) {\r\n        console.log('[StockLevelHistoryChart as string] Time range too short, using default 2 weeks');\r\n        return { start: twoWeeksAgo, end: now };\r\n      }\r\n\r\n      // 根據選擇的時間範圍調整顯示範圍\r\n      if (days <= 14) {\r\n        // 少於2週，使用原範圍\r\n        return originalTimeFrame;\r\n      } else if (days <= 21) {\r\n        // 2-3週，顯示3週\r\n        const threeWeeksAgo = new Date(now);\r\n        threeWeeksAgo.setDate(now.getDate() - 21);\r\n        return { start: threeWeeksAgo, end: now };\r\n      } else if (days <= 28) {\r\n        // 3-4週，顯示4週\r\n        const fourWeeksAgo = new Date(now);\r\n        fourWeeksAgo.setDate(now.getDate() - 28);\r\n        return { start: fourWeeksAgo, end: now };\r\n      } else if (days <= 60) {\r\n        // 4週-2個月，顯示2個月\r\n        const twoMonthsAgo = new Date(now);\r\n        twoMonthsAgo.setMonth(now.getMonth() - 2);\r\n        return { start: twoMonthsAgo, end: now };\r\n      } else if (days <= 90) {\r\n        // 2-3個月，顯示3個月\r\n        const threeMonthsAgo = new Date(now);\r\n        threeMonthsAgo.setMonth(now.getMonth() - 3);\r\n        return { start: threeMonthsAgo, end: now };\r\n      } else {\r\n        // 超過3個月，最多顯示6個月\r\n        const sixMonthsAgo = new Date(now);\r\n        sixMonthsAgo.setMonth(now.getMonth() - 6);\r\n        return { start: sixMonthsAgo, end: now };\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  // 更新調整後的時間範圍\r\n  useEffect(() => {\r\n    console.log('[StockLevelHistoryChart as string] timeFrame prop:', timeFrame);\r\n    const adjusted = calculateAdjustedTimeFrame(timeFrame);\r\n    console.log('[StockLevelHistoryChart as string] adjusted timeFrame:', adjusted);\r\n    setAdjustedTimeFrame(adjusted);\r\n  }, [timeFrame, calculateAdjustedTimeFrame]);\r\n\r\n  // Server action fallback for stock history data\r\n  const fetchStockHistoryServerAction = useCallback(\r\n    async (variables?: { productCodes: string[]; startDate: string; endDate: string }) => {\r\n      if (!variables || !adjustedTimeFrame || variables.productCodes.length === 0) {\r\n        return { chartData: [], productCodes: [] };\r\n      }\r\n\r\n      const limitedProducts = variables.productCodes.slice(0, 10);\r\n\r\n      try {\r\n        const result = await dashboardAPI.fetch(\r\n          {\r\n            widgetIds: ['statsCard'],\r\n            dateRange: {\r\n              start: variables.startDate,\r\n              end: variables.endDate,\r\n            },\r\n            params: {\r\n              dataSource: 'stock_level_history',\r\n              productCodes: limitedProducts,\r\n              timeSegments: 24,\r\n            },\r\n          },\r\n          {\r\n            strategy: 'server',\r\n            cache: { ttl: 60 }, // 1分鐘緩存\r\n          }\r\n        );\r\n\r\n        if (result.widgets && result.widgets.length > 0) {\r\n          const widgetData = result.widgets[0];\r\n          if (!widgetData.data.error) {\r\n            const historyData = widgetData.data.value || [];\r\n            return { chartData: historyData, productCodes: limitedProducts };\r\n          }\r\n        }\r\n        \r\n        return { chartData: [], productCodes: [] };\r\n      } catch (error) {\r\n        console.error('[StockLevelHistoryChart as string] Server action error:', error);\r\n        return { chartData: [], productCodes: [] };\r\n      }\r\n    },\r\n    [dashboardAPI, adjustedTimeFrame]\r\n  );\r\n\r\n  // State for data fetching\r\n  const [data, setData] = useState<any>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<any>(null);\r\n\r\n  // Fetch data using REST API\r\n  const fetchData = useCallback(async () => {\r\n    if (!adjustedTimeFrame || productCodes.length === 0 || !hasBeenInViewport) {\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const variables = {\r\n        productCodes: productCodes.slice(0, 10),\r\n        startDate: adjustedTimeFrame.start.toISOString(),\r\n        endDate: adjustedTimeFrame.end.toISOString(),\r\n      };\r\n\r\n      const result = await fetchStockHistoryServerAction(variables);\r\n      setData(result);\r\n      \r\n      if (result.chartData) {\r\n        setChartData(result.chartData);\r\n        setProductCodes(result.productCodes || productCodes);\r\n      }\r\n    } catch (err) {\r\n      setError(err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [adjustedTimeFrame, productCodes, hasBeenInViewport, fetchStockHistoryServerAction]);\r\n\r\n  // Effect to fetch data when dependencies change\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [fetchData]);\r\n\r\n  // Refetch function for compatibility\r\n  const refetch = useCallback(() => {\r\n    fetchData();\r\n  }, [fetchData]);\r\n\r\n  // Update chart data when data changes\r\n  useEffect(() => {\r\n    if (data?.chartData) {\r\n      setChartData(data.chartData);\r\n      if (data.productCodes) {\r\n        setProductCodes(data.productCodes);\r\n      }\r\n    }\r\n  }, [data]);\r\n\r\n  // 監聽 StockTypeSelector 的類型變更事件\r\n  useEffect(() => {\r\n    const handleTypeChange = (event: CustomEvent) => {\r\n      console.log('[StockLevelHistoryChart as string] Received stockTypeChanged event:', event.detail);\r\n      const { type, data } = event.detail;\r\n      setSelectedType(type);\r\n\r\n      // 獲取該類型所有產品的代碼（限制最多10個）\r\n      const codes = data.map((item: Record<string, unknown>) => item.stock).slice(0, 10);\r\n      console.log('[StockLevelHistoryChart as string] Product codes:', codes);\r\n\r\n      if (codes.length > 0) {\r\n        setProductCodes(codes);\r\n      } else {\r\n        console.log('[StockLevelHistoryChart as string] No product codes, clearing data');\r\n        setChartData([]);\r\n        setProductCodes([]);\r\n      }\r\n    };\r\n\r\n    window.addEventListener('stockTypeChanged', handleTypeChange as EventListener);\r\n    return () => {\r\n      window.removeEventListener('stockTypeChanged', handleTypeChange as EventListener);\r\n    };\r\n  }, []);\r\n\r\n  // 初始化時設定預設時間範圍\r\n  useEffect(() => {\r\n    if (!timeFrame) {\r\n      const now = new Date();\r\n      const twoWeeksAgo = new Date(now);\r\n      twoWeeksAgo.setDate(now.getDate() - 14);\r\n      setAdjustedTimeFrame({ start: twoWeeksAgo, end: now });\r\n    }\r\n  }, [timeFrame]);\r\n\r\n  // 當刷新觸發器改變時，重新加載數據\r\n  const prevRefreshTriggerRef = React.useRef(refreshTrigger);\r\n  useEffect(() => {\r\n    // 只在 refreshTrigger 真正改變時重新加載\r\n    if (productCodes.length > 0 && refreshTrigger !== prevRefreshTriggerRef.current) {\r\n      console.log('[StockLevelHistoryChart as string] Refresh triggered, reloading data');\r\n      prevRefreshTriggerRef.current = refreshTrigger;\r\n      refetch();\r\n    }\r\n  }, [refreshTrigger, productCodes.length, refetch]);\r\n\r\n  // 自定義 Tooltip\r\n  const CustomTooltip = ({ active, payload, label }: any) => {\r\n    if (active && payload && payload.length > 0) {\r\n      return (\r\n        <div className={cn(\r\n          'rounded-lg border bg-card p-3 shadow-lg',\r\n          'border-border'\r\n        )}>\r\n          <p className={cn('mb-2', textClasses['body-small'], 'font-medium text-foreground')}>{label}</p>\r\n          {payload.map((entry: any, index: number) => (\r\n            <p key={index} className={cn(textClasses['label-small'], 'text-foreground')}>\r\n              <span style={{ color: entry.color }}>{entry.name}:</span>\r\n              <span className='ml-2 font-medium'>\r\n                {(entry.value || 0).toLocaleString()}\r\n              </span>\r\n            </p>\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // 自定義圖例\r\n  const renderLegend = (props: any) => {\r\n    const { payload } = props;\r\n    return (\r\n      <div className={cn(\r\n        'mt-1 flex flex-wrap justify-center gap-2'\r\n      )}>\r\n        {payload.map((entry: any, index: number) => (\r\n          <div key={`legend-${index}`} className={cn('flex items-center gap-2')}>\r\n            <div className='h-2 w-2 rounded-full' style={{ backgroundColor: entry.color }} />\r\n            <span className={cn(textClasses['label-small'], 'text-muted-foreground')}>{entry.value}</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Return progressive loading skeleton if not in viewport yet\r\n  if (!hasBeenInViewport) {\r\n    return (\r\n      <div ref={chartRef} className=\"h-full w-full\">\r\n        <LineChartSkeleton height=\"100%\" showHeader={false} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div ref={chartRef} className=\"h-full w-full\">\r\n      <ChartContainer\r\n        title=\"Stock Level History\"\r\n        icon={TrendingUp}\r\n        iconColor=\"from-emerald-500 to-teal-500\"\r\n        loading={loading}\r\n        error={error}\r\n        onRetry={refetch}\r\n        onRefresh={refetch}\r\n        refreshing={loading}\r\n        height=\"100%\"\r\n        showHeader={false}\r\n        chartType=\"line\"\r\n        dateRange={adjustedTimeFrame || undefined}\r\n        performanceMetrics={{\r\n          optimized: true,\r\n          source: 'REST API',\r\n        }}\r\n      >\r\n      {chartData.length === 0 || productCodes.length === 0 ? (\r\n        <div className='flex h-full items-center justify-center'>\r\n          <p className={cn('text-center', textClasses['body-small'], 'text-muted-foreground')}>\r\n            Select a product type from the dropdown\r\n            <br />\r\n            to view stock level history\r\n            <br />\r\n            <span className={cn(textClasses['label-small'], 'text-muted-foreground')}>(最多顯示10款產品)</span>\r\n          </p>\r\n        </div>\r\n      ) : (\r\n        <ResponsiveContainer width='100%' height='100%'>\r\n          <LineChart data={chartData} margin={{ top: 5, right: 5, left: 0, bottom: 35 }}>\r\n            <CartesianGrid\r\n              strokeDasharray='3 3'\r\n              stroke={widgetColors.charts.grid}\r\n              vertical={false}\r\n            />\r\n            <XAxis\r\n              dataKey='time'\r\n              stroke={widgetColors.charts.grid}\r\n              fontSize={9}\r\n              tickLine={false}\r\n              axisLine={false}\r\n              angle={-45}\r\n              textAnchor='end'\r\n              height={50}\r\n              interval={Math.floor(chartData.length / 8)}\r\n            />\r\n            <YAxis\r\n              stroke={widgetColors.charts.grid}\r\n              fontSize={10}\r\n              tickLine={false}\r\n              axisLine={false}\r\n              width={45}\r\n              tickFormatter={value => {\r\n                if (value >= 1000) {\r\n                  return `${(value / 1000).toFixed(0)}k`;\r\n                }\r\n                return value.toString();\r\n              }}\r\n            />\r\n            <Tooltip content={<CustomTooltip />} />\r\n\r\n            {/* 為每個產品代碼創建一條線 */}\r\n            {productCodes.map((code, index) => (\r\n              <Line\r\n                key={code}\r\n                type='monotone'\r\n                dataKey={code}\r\n                name={code}\r\n                stroke={LINE_COLORS[index % LINE_COLORS.length]}\r\n                strokeWidth={2}\r\n                dot={false}\r\n                activeDot={{ r: 4 }}\r\n              />\r\n            ))}\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      )}\r\n    </ChartContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StockLevelHistoryChart;\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/StockTypeSelector.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":152,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5272,5275],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5272,5275],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { TraditionalWidgetComponentProps } from '@/app/types/dashboard';\r\nimport { useAdminRefresh } from '@/app/admin/contexts/AdminRefreshContext';\r\nimport { Loader2 } from 'lucide-react';\r\nimport { toast } from 'sonner';\r\n// GraphQL imports removed - using REST API only\r\nimport { createDashboardAPIClient as createDashboardAPI } from '@/lib/api/admin/DashboardAPI.client';\r\n\r\ninterface StockData {\r\n  stock: string;\r\n  stock_level: number;\r\n  description?: string;\r\n  type?: string;\r\n}\r\n\r\ninterface StockTypeSelectorProps extends TraditionalWidgetComponentProps {\r\n}\r\n\r\n// GraphQL queries removed - using REST API only\r\n\r\nexport const StockTypeSelector: React.FC<StockTypeSelectorProps> = ({ widget, isEditMode }) => {\r\n  const [productTypes, setProductTypes] = useState<string[]>([]);\r\n  const [selectedType, setSelectedType] = useState<string>('all');\r\n  const [stockData, setStockData] = useState<StockData[]>([]);\r\n  const [filteredStockData, setFilteredStockData] = useState<StockData[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<Error | null>(null);\r\n  const { refreshTrigger } = useAdminRefresh();\r\n\r\n  // REST API data fetching\r\n  const fetchStockData = useCallback(async () => {\r\n    if (isEditMode) return;\r\n    \r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const dashboardAPI = createDashboardAPI();\r\n      const result = await dashboardAPI.fetch(\r\n        {\r\n          widgetIds: ['stock_distribution', 'product_types'],\r\n          dateRange: {\r\n            start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days ago\r\n            end: new Date().toISOString(),\r\n          },\r\n        },\r\n        {\r\n          strategy: 'client',\r\n          cache: { ttl: 300 }, // 5-minute cache\r\n        }\r\n      );\r\n\r\n      if (result.widgets && result.widgets.length > 0) {\r\n        // Process stock distribution data\r\n        const stockWidget = result.widgets.find(w => w.widgetId === 'stock_distribution');\r\n        if (stockWidget && !stockWidget.data.error) {\r\n          const stockItems = stockWidget.data.value || [];\r\n          setStockData(stockItems.filter((item: Record<string, unknown>) => item.stock_level > 0));\r\n        }\r\n\r\n        // Process product types data\r\n        const typesWidget = result.widgets.find(w => w.widgetId === 'product_types');\r\n        if (typesWidget && !typesWidget.data.error) {\r\n          const types = typesWidget.data.value || [];\r\n          setProductTypes(types.length > 0 ? types : ['EasyLiner', 'EcoPlus', 'Slate', 'SupaStack', 'Manhole', 'ACO']);\r\n        } else {\r\n          // Use default types if API fails\r\n          setProductTypes(['EasyLiner', 'EcoPlus', 'Slate', 'SupaStack', 'Manhole', 'ACO']);\r\n        }\r\n      }\r\n    } catch (err) {\r\n      setError(err as Error);\r\n      toast.error('Failed to load stock data');\r\n      // Use default types on error\r\n      setProductTypes(['EasyLiner', 'EcoPlus', 'Slate', 'SupaStack', 'Manhole', 'ACO']);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [isEditMode]);\r\n\r\n  // Initial data load\r\n  useEffect(() => {\r\n    fetchStockData();\r\n  }, [fetchStockData]);\r\n\r\n  // Refresh on trigger\r\n  useEffect(() => {\r\n    if (refreshTrigger) {\r\n      fetchStockData();\r\n    }\r\n  }, [refreshTrigger, fetchStockData]);\r\n\r\n  // Filter stock data based on selected type\r\n  useEffect(() => {\r\n    let filtered: StockData[];\r\n    \r\n    if (selectedType === 'all') {\r\n      filtered = stockData;\r\n    } else if (selectedType === 'non-material') {\r\n      filtered = stockData.filter(item => \r\n        item.type && item.type.toLowerCase() !== 'material'\r\n      );\r\n    } else {\r\n      filtered = stockData.filter(item => item.type === selectedType);\r\n    }\r\n    \r\n    setFilteredStockData(filtered);\r\n\r\n    // 通知圖表組件更新\r\n    window.dispatchEvent(\r\n      new CustomEvent('stockTypeChanged', {\r\n        detail: { type: selectedType, data: filtered },\r\n      })\r\n    );\r\n  }, [stockData, selectedType]);\r\n\r\n  // 當選擇類型改變時\r\n  const handleTypeChange = (type: string) => {\r\n    setSelectedType(type);\r\n    fetchStockData(); // Refresh data\r\n  };\r\n\r\n  // Loading states\r\n  const isLoading = loading && !productTypes.length;\r\n  const isLoadingStock = loading;\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className='flex h-full items-center justify-center'>\r\n        <Loader2 className='h-8 w-8 animate-spin text-gray-400' />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className='flex h-full flex-col p-6'>\r\n      {/* Header with type selector */}\r\n      <div className='mb-6 flex items-center justify-between'>\r\n        <h3 className='text-xl font-semibold text-white'>\r\n          Stock Inventory\r\n          <span className='ml-2 text-xs text-green-400'>⚡ REST API</span>\r\n        </h3>\r\n        <select\r\n          value={selectedType}\r\n          onChange={e => handleTypeChange(e.target.value)}\r\n          className='w-[200px] rounded-lg border border-slate-600 bg-slate-700 px-4 py-2 text-white focus:border-blue-500 focus:outline-none'\r\n        >\r\n          <option value='all'>All Types</option>\r\n          <option value='non-material'>Non-Material</option>\r\n          {productTypes.map((type: any) => (\r\n            <option key={type} value={type}>\r\n              {type}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      {/* Stock table */}\r\n      <div className='flex-1 overflow-auto'>\r\n        {isLoadingStock ? (\r\n          <div className='flex h-32 items-center justify-center'>\r\n            <Loader2 className='h-6 w-6 animate-spin text-gray-400' />\r\n          </div>\r\n        ) : (\r\n          <table className='w-full'>\r\n            <thead className='sticky top-0 bg-slate-800/50 backdrop-blur-sm'>\r\n              <tr className='border-b border-slate-700'>\r\n                <th className='px-4 py-3 text-left text-xs font-medium uppercase text-gray-400'>\r\n                  Product Code\r\n                </th>\r\n                <th className='px-4 py-3 text-left text-xs font-medium uppercase text-gray-400'>\r\n                  Description\r\n                </th>\r\n                <th className='px-4 py-3 text-center text-xs font-medium uppercase text-gray-400'>\r\n                  Type\r\n                </th>\r\n                <th className='px-4 py-3 text-right text-xs font-medium uppercase text-gray-400'>\r\n                  Current Inventory\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {filteredStockData.length === 0 ? (\r\n                <tr>\r\n                  <td colSpan={4} className='py-8 text-center text-gray-400'>\r\n                    No stock data available {selectedType !== 'all' && `for type \"${selectedType}\"`}\r\n                  </td>\r\n                </tr>\r\n              ) : (\r\n                filteredStockData.map((item, index) => (\r\n                  <tr\r\n                    key={`${item.stock}-${index}`}\r\n                    className='border-b border-slate-700/50 hover:bg-slate-700/30'\r\n                  >\r\n                    <td className='px-4 py-3 text-sm font-medium text-white'>{item.stock}</td>\r\n                    <td className='px-4 py-3 text-sm text-gray-300'>{item.description}</td>\r\n                    <td className='px-4 py-3 text-center text-sm text-gray-300'>{item.type}</td>\r\n                    <td className='px-4 py-3 text-right text-sm font-medium text-white'>\r\n                      {(item.stock_level || 0).toLocaleString()}\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        )}\r\n      </div>\r\n\r\n      {/* Summary */}\r\n      {!isLoadingStock && filteredStockData.length > 0 && (\r\n        <div className='mt-4 flex justify-between border-t border-slate-700 pt-4 text-sm'>\r\n          <span className='text-gray-400'>\r\n            Showing {filteredStockData.length} products{' '}\r\n            {selectedType !== 'all' && `of type \"${selectedType}\"`}\r\n          </span>\r\n          <span className='text-gray-300'>\r\n            Total Stock:{' '}\r\n            <span className='font-semibold text-white'>\r\n              {filteredStockData.reduce((sum, item) => sum + (item.stock_level || 0), 0).toLocaleString()}\r\n            </span>\r\n          </span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StockTypeSelector;\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/SupplierUpdateWidgetV2.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3627,3630],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3627,3630],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Supplier Update Widget V2\r\n * 使用 RPC 函數優化 CRUD 操作\r\n * 遷移自原 SupplierUpdateWidget\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useState, useCallback } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport {\r\n  BuildingOfficeIcon,\r\n  MagnifyingGlassIcon,\r\n  PencilIcon,\r\n  CheckCircleIcon,\r\n  ExclamationTriangleIcon,\r\n  ArrowPathIcon,\r\n} from '@heroicons/react/24/outline';\r\nimport { WidgetComponentProps } from '@/app/types/dashboard';\r\nimport { CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { UniversalWidgetCard as WidgetCard } from '../UniversalWidgetCard';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { searchSupplier, createSupplier, updateSupplier } from '@/app/actions/supplierActions';\r\nimport { errorHandler } from '@/app/components/qc-label-form/services/ErrorHandler';\r\n// GraphQL dependencies removed - using REST API only\r\nimport { useWidgetErrorHandler } from '@/app/admin/hooks/useWidgetErrorHandler';\r\nimport { \r\n  brandColors, \r\n  widgetColors, \r\n  semanticColors,\r\n  getWidgetCategoryColor \r\n} from '@/lib/design-system/colors';\r\nimport { textClasses, getTextClass } from '@/lib/design-system/typography';\r\nimport { spacing, widgetSpacing, spacingUtilities } from '@/lib/design-system/spacing';\r\nimport { cn } from '@/lib/utils';\r\n\r\n// GraphQL queries removed - using REST API only\r\n\r\ninterface SupplierData {\r\n  supplier_code: string;\r\n  supplier_name: string;\r\n}\r\n\r\ninterface StatusMessageType {\r\n  type: 'success' | 'error' | 'warning' | 'info';\r\n  message: string;\r\n}\r\n\r\nexport const SupplierUpdateWidgetV2 = React.memo(function SupplierUpdateWidgetV2({\r\n  widget,\r\n  isEditMode,\r\n}: WidgetComponentProps) {\r\n  const { handleSuccess, handleError, handleWarning, handleSubmitError } = useWidgetErrorHandler(\r\n    widget && 'title' in widget && typeof widget.title === 'string' ? widget.title : \r\n    widget?.config?.title && typeof widget.config.title === 'string' ? widget.config.title : \r\n    'Supplier Update'\r\n  );\r\n  // State management\r\n  const [supplierData, setSupplierData] = useState<SupplierData | null>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [searchedCode, setSearchedCode] = useState('');\r\n  const [searchInput, setSearchInput] = useState(''); // Track input value\r\n  const [statusMessage, setStatusMessage] = useState<StatusMessageType | null>(null);\r\n  const [performanceMetrics, setPerformanceMetrics] = useState<{\r\n    lastOperationTime?: number;\r\n    optimized?: boolean;\r\n  }>({});\r\n\r\n  // Form state\r\n  const [formData, setFormData] = useState<SupplierData>({\r\n    supplier_code: '',\r\n    supplier_name: '',\r\n  });\r\n\r\n\r\n  // GraphQL mutations removed - using REST API only\r\n\r\n\r\n  // Reset state\r\n  const resetState = useCallback(() => {\r\n    setSupplierData(null);\r\n    setIsEditing(false);\r\n    setShowCreateDialog(false);\r\n    setShowForm(false);\r\n    setSearchedCode('');\r\n    setSearchInput(''); // Reset search input\r\n    setStatusMessage(null);\r\n    setFormData({\r\n      supplier_code: '',\r\n      supplier_name: '',\r\n    });\r\n  }, []);\r\n\r\n  // Search supplier using REST API only\r\n  const [searchData, setSearchData] = useState<{ data_supplierCollection: { edges: Array<{ node: SupplierData }> } } | null>(null);\r\n  const [searchLoading, setSearchLoading] = useState(false);\r\n  const [searchError, setSearchError] = useState<any>(null);\r\n\r\n  // Handle search using REST API only\r\n  const handleSearch = useCallback(\r\n    async (code: string) => {\r\n      if (!code || !code.trim()) {\r\n        handleWarning('Please enter a supplier code', 'search_validation');\r\n        setStatusMessage({\r\n          type: 'error',\r\n          message: 'Please enter a supplier code',\r\n        });\r\n        return;\r\n      }\r\n\r\n      setStatusMessage(null);\r\n      setSearchLoading(true);\r\n      setSearchError(null);\r\n      const searchCode = code.trim().toUpperCase();\r\n      setSearchedCode(searchCode);\r\n\r\n      try {\r\n        const startTime = performance.now();\r\n        const result = await searchSupplier(searchCode);\r\n        const endTime = performance.now();\r\n        \r\n        console.log(`[SupplierUpdateWidgetV2] Server Action search: ${Math.round(endTime - startTime)}ms`);\r\n        \r\n        if (result.exists && result.supplier) {\r\n          setSearchData({\r\n            data_supplierCollection: {\r\n              edges: [{ node: result.supplier }],\r\n            },\r\n          });\r\n        } else {\r\n          setSearchData({ data_supplierCollection: { edges: [] } });\r\n        }\r\n      } catch (error) {\r\n        setSearchError(error);\r\n        setStatusMessage({\r\n          type: 'error',\r\n          message: 'Search failed. Please try again.',\r\n        });\r\n      } finally {\r\n        setSearchLoading(false);\r\n      }\r\n    },\r\n    [handleWarning]\r\n  );\r\n\r\n  // React to search data changes\r\n  React.useEffect(() => {\r\n    if (searchData && searchedCode) {\r\n      const edges = searchData.data_supplierCollection?.edges || [];\r\n      \r\n      if (edges.length > 0) {\r\n        const supplier = edges[0].node;\r\n        setSupplierData(supplier);\r\n        setIsEditing(false);\r\n        setShowForm(false);\r\n        setShowCreateDialog(false);\r\n        setStatusMessage({\r\n          type: 'success',\r\n          message: `Found: ${supplier.supplier_code}`,\r\n        });\r\n        handleSuccess(`Supplier ${supplier.supplier_code} found`, 'search_supplier', {\r\n          supplierCode: supplier.supplier_code,\r\n        });\r\n      } else {\r\n        // Supplier not found\r\n        setSupplierData(null);\r\n        setShowCreateDialog(true);\r\n        setShowForm(false);\r\n        setIsEditing(false);\r\n        setFormData({\r\n          supplier_code: searchedCode,\r\n          supplier_name: '',\r\n        });\r\n        setStatusMessage({\r\n          type: 'warning',\r\n          message: `\"${searchedCode}\" not found`,\r\n        });\r\n      }\r\n    }\r\n  }, [searchData, searchedCode, handleSuccess]);\r\n\r\n  // Start editing\r\n  const handleEdit = useCallback(() => {\r\n    if (supplierData) {\r\n      setFormData(supplierData);\r\n      setIsEditing(true);\r\n      setShowForm(true);\r\n      setShowCreateDialog(false);\r\n    }\r\n  }, [supplierData]);\r\n\r\n  // Confirm create supplier\r\n  const handleConfirmCreate = useCallback(() => {\r\n    setFormData({\r\n      supplier_code: searchedCode,\r\n      supplier_name: '',\r\n    });\r\n    setIsEditing(false);\r\n    setShowForm(true);\r\n    setShowCreateDialog(false);\r\n    setStatusMessage({\r\n      type: 'info',\r\n      message: 'Fill in supplier details',\r\n    });\r\n  }, [searchedCode]);\r\n\r\n  // Cancel operation\r\n  const handleCancel = useCallback(() => {\r\n    setIsEditing(false);\r\n    setShowForm(false);\r\n    setShowCreateDialog(false);\r\n    setStatusMessage(null);\r\n  }, []);\r\n\r\n  // Submit form using REST API only\r\n  const handleSubmit = useCallback(\r\n    async (e: React.FormEvent) => {\r\n      e.preventDefault();\r\n      \r\n      // Validate form\r\n      if (!formData.supplier_code.trim() || !formData.supplier_name.trim()) {\r\n        handleWarning('Please fill in all required fields', 'form_validation');\r\n        setStatusMessage({\r\n          type: 'error',\r\n          message: 'Please fill in all required fields',\r\n        });\r\n        return;\r\n      }\r\n\r\n      const startTime = performance.now();\r\n      setIsLoading(true);\r\n\r\n      try {\r\n        if (isEditing) {\r\n          // Update existing supplier\r\n          const result = await updateSupplier(supplierData!.supplier_code, formData.supplier_name);\r\n          \r\n          if (!result.success) {\r\n            throw new Error(result.error || 'Update failed');\r\n          }\r\n          \r\n          if (result.supplier) {\r\n            setSupplierData(result.supplier);\r\n            setStatusMessage({ type: 'success', message: 'Updated successfully!' });\r\n            handleSuccess(`Supplier ${result.supplier.supplier_code} updated`, 'update_supplier', {\r\n              supplierCode: result.supplier.supplier_code,\r\n            });\r\n          }\r\n        } else {\r\n          // Create new supplier\r\n          const result = await createSupplier(formData.supplier_code, formData.supplier_name);\r\n          \r\n          if (!result.success) {\r\n            throw new Error(result.error || 'Creation failed');\r\n          }\r\n          \r\n          if (result.supplier) {\r\n            setSupplierData(result.supplier);\r\n            setStatusMessage({ type: 'success', message: 'Created successfully!' });\r\n            handleSuccess(`Supplier ${result.supplier.supplier_code} created`, 'create_supplier', {\r\n              supplierCode: result.supplier.supplier_code,\r\n            });\r\n          }\r\n        }\r\n\r\n        const endTime = performance.now();\r\n        setPerformanceMetrics({\r\n          lastOperationTime: Math.round(endTime - startTime),\r\n          optimized: true,\r\n        });\r\n\r\n        // Reset form after success\r\n        setIsEditing(false);\r\n        setShowForm(false);\r\n        setShowCreateDialog(false);\r\n      } catch (error: unknown) {\r\n        errorHandler.handleApiError(\r\n          error,\r\n          {\r\n            component: 'SupplierUpdateWidgetV2',\r\n            action: isEditing ? 'update_supplier' : 'create_supplier',\r\n            additionalData: {\r\n              supplierCode: formData.supplier_code,\r\n              isEditing,\r\n            },\r\n          },\r\n          getErrorMessage(error) || 'Unexpected error'\r\n        );\r\n        setStatusMessage({\r\n          type: 'error',\r\n          message: getErrorMessage(error) || 'Unexpected error',\r\n        });\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    },\r\n    [isEditing, supplierData, formData, handleWarning, handleSuccess]\r\n  );\r\n\r\n  // Handle form input change\r\n  const handleInputChange = useCallback((field: keyof SupplierData, value: string) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [field as string]: value,\r\n    }));\r\n  }, []);\r\n\r\n  return (\r\n    <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className='h-full'>\r\n      <WidgetCard widgetType='custom' isEditMode={isEditMode}>\r\n        <CardHeader className='pb-3'>\r\n          <CardTitle className='widget-title flex items-center justify-between'>\r\n            <div className='flex items-center gap-2'>\r\n              <BuildingOfficeIcon className='h-5 w-5' />\r\n              Supplier Update\r\n            </div>\r\n            {performanceMetrics.lastOperationTime && (\r\n              <span className={cn(textClasses['label-small'], 'text-muted-foreground')}>\r\n                {performanceMetrics.lastOperationTime}ms\r\n                {performanceMetrics.optimized && ' (optimized)'}\r\n              </span>\r\n            )}\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className='max-h-[calc(100%-60px)] space-y-4 overflow-y-auto'>\r\n          {/* Search Section */}\r\n          {!showForm && !showCreateDialog && (\r\n            <div className='space-y-3'>\r\n              <Label htmlFor='search' className={cn(textClasses['body-small'], 'text-muted-foreground')}>\r\n                Supplier Code\r\n              </Label>\r\n              <div className='flex gap-2'>\r\n                <Input\r\n                  id='search'\r\n                  type='text'\r\n                  value={searchInput}\r\n                  onChange={e => setSearchInput(e.target.value)}\r\n                  placeholder='Enter supplier code...'\r\n                  className={cn(\r\n                    'h-9 flex-1 border-input bg-background',\r\n                    textClasses['body-small']\r\n                  )}\r\n                  disabled={searchLoading || isEditMode}\r\n                />\r\n                <Button\r\n                  onClick={() => handleSearch(searchInput)}\r\n                  disabled={searchLoading || isEditMode}\r\n                  size='sm'\r\n                  className={cn(\r\n                    'h-9 px-4 bg-gradient-to-r',\r\n                    getWidgetCategoryColor('operations', 'gradient'),\r\n                    'hover:opacity-90'\r\n                  )}\r\n                >\r\n                  {isLoading ? (\r\n                    <div className='h-4 w-4 animate-spin rounded-full border-b-2 border-white' />\r\n                  ) : (\r\n                    <>\r\n                      <MagnifyingGlassIcon className='mr-2 h-4 w-4' />\r\n                      Search\r\n                    </>\r\n                  )}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Status Message */}\r\n          {statusMessage && (\r\n            <div\r\n              className={cn(\r\n                'rounded-lg p-3',\r\n                textClasses['body-small'],\r\n                statusMessage.type === 'success'\r\n                  ? 'bg-success/20 text-success'\r\n                  : statusMessage.type === 'error'\r\n                    ? 'bg-destructive/20 text-destructive'\r\n                    : statusMessage.type === 'warning'\r\n                      ? 'bg-warning/20 text-warning'\r\n                      : 'bg-info/20 text-info'\r\n              )}\r\n            >\r\n              {getErrorMessage(statusMessage)}\r\n            </div>\r\n          )}\r\n\r\n          {/* Create Confirmation */}\r\n          {showCreateDialog && (\r\n            <div className={cn(\r\n              'rounded-lg border border-warning/30 bg-card/50 p-4'\r\n            )}>\r\n              <div className='flex items-start space-x-3'>\r\n                <ExclamationTriangleIcon className='mt-0.5 h-5 w-5 text-warning' />\r\n                <div className='flex-1'>\r\n                  <p className={cn(textClasses['body-small'], 'font-medium text-warning')}>Supplier Not Found</p>\r\n                  <p className={cn('mt-1', textClasses['body-small'], 'text-muted-foreground')}>\r\n                    Create new supplier &quot;{searchedCode}&quot;?\r\n                  </p>\r\n                  <div className='mt-3 flex gap-2'>\r\n                    <Button\r\n                      onClick={handleConfirmCreate}\r\n                      size='sm'\r\n                      className={cn(\r\n                        'h-8 bg-success hover:bg-success/90 text-success-foreground',\r\n                        textClasses['body-small']\r\n                      )}\r\n                      disabled={isEditMode}\r\n                    >\r\n                      <CheckCircleIcon className='mr-1 h-4 w-4' />\r\n                      Create\r\n                    </Button>\r\n                    <Button\r\n                      onClick={handleCancel}\r\n                      size='sm'\r\n                      variant='outline'\r\n                      className={cn(\r\n                        'h-8 border-border',\r\n                        textClasses['body-small']\r\n                      )}\r\n                      disabled={isEditMode}\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Supplier Info Display */}\r\n          {supplierData && !showForm && (\r\n            <div className={cn(\r\n              'rounded-lg border border-border bg-card/50 p-4'\r\n            )}>\r\n              <div className='mb-3 flex items-center justify-between'>\r\n                <h4 className={cn(textClasses['body-small'], 'font-medium text-primary')}>Supplier Info</h4>\r\n                <Button\r\n                  onClick={handleEdit}\r\n                  size='sm'\r\n                  className={cn(\r\n                    'h-7 bg-primary hover:bg-primary/90 text-primary-foreground px-3',\r\n                    textClasses['label-small']\r\n                  )}\r\n                  disabled={isEditMode}\r\n                >\r\n                  <PencilIcon className='mr-1 h-3 w-3' />\r\n                  Edit\r\n                </Button>\r\n              </div>\r\n              <div className='space-y-2'>\r\n                <InfoRow label='Code' value={supplierData.supplier_code} />\r\n                <InfoRow label='Name' value={supplierData.supplier_name} />\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Supplier Form */}\r\n          {showForm && (\r\n            <form onSubmit={handleSubmit} className='space-y-4'>\r\n              <div className='mb-3 flex items-center justify-between'>\r\n                <h4 className={cn(textClasses['body-small'], 'font-medium text-primary')}>\r\n                  {isEditing ? 'Edit Supplier' : 'New Supplier'}\r\n                </h4>\r\n                <Button\r\n                  type='button'\r\n                  onClick={resetState}\r\n                  size='sm'\r\n                  variant='ghost'\r\n                  className={cn('h-7 px-3', textClasses['label-small'])}\r\n                  disabled={searchLoading || isEditMode}\r\n                >\r\n                  <ArrowPathIcon className='h-4 w-4' />\r\n                </Button>\r\n              </div>\r\n\r\n              <div className='space-y-3'>\r\n                <div>\r\n                  <Label htmlFor='supplier_code' className={textClasses['body-small']}>\r\n                    Code *\r\n                  </Label>\r\n                  <Input\r\n                    id='supplier_code'\r\n                    type='text'\r\n                    value={formData.supplier_code}\r\n                    onChange={e => handleInputChange('supplier_code', e.target.value.toUpperCase())}\r\n                    disabled={isEditing || isEditMode}\r\n                    className={cn(\r\n                      'mt-1 h-9 border-input bg-background',\r\n                      textClasses['body-small']\r\n                    )}\r\n                    required\r\n                  />\r\n                </div>\r\n\r\n                <div>\r\n                  <Label htmlFor='supplier_name' className={textClasses['body-small']}>\r\n                    Name *\r\n                  </Label>\r\n                  <Input\r\n                    id='supplier_name'\r\n                    type='text'\r\n                    value={formData.supplier_name}\r\n                    onChange={e => handleInputChange('supplier_name', e.target.value)}\r\n                    className={cn(\r\n                      'mt-1 h-9 border-input bg-background',\r\n                      textClasses['body-small']\r\n                    )}\r\n                    disabled={isEditMode}\r\n                    required\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className='flex gap-2 pt-2'>\r\n                <Button\r\n                  type='button'\r\n                  onClick={handleCancel}\r\n                  size='sm'\r\n                  variant='outline'\r\n                  className={cn(\r\n                    'h-8 flex-1 border-border',\r\n                    textClasses['body-small']\r\n                  )}\r\n                  disabled={searchLoading || isEditMode}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  type='submit'\r\n                  size='sm'\r\n                  disabled={searchLoading || isEditMode}\r\n                  className={cn(\r\n                    'h-8 flex-1 bg-primary hover:bg-primary/90 text-primary-foreground',\r\n                    textClasses['body-small']\r\n                  )}\r\n                >\r\n                  {isLoading ? (\r\n                    <div className='h-3 w-3 animate-spin rounded-full border-b-2 border-white' />\r\n                  ) : (\r\n                    <>\r\n                      <CheckCircleIcon className='mr-1 h-4 w-4' />\r\n                      {isEditing ? 'Update' : 'Create'}\r\n                    </>\r\n                  )}\r\n                </Button>\r\n              </div>\r\n            </form>\r\n          )}\r\n\r\n          {/* Performance indicator */}\r\n          {performanceMetrics.optimized && (\r\n            <div className={cn(\r\n              'mt-2 text-center text-success',\r\n              textClasses['label-small']\r\n            )}>\r\n              ✓ Server-side optimized (atomic operations)\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </WidgetCard>\r\n    </motion.div>\r\n  );\r\n});\r\n\r\nexport default SupplierUpdateWidgetV2;\r\n\r\n// Info Row Component\r\ninterface InfoRowProps {\r\n  label: string;\r\n  value: string;\r\n}\r\n\r\nfunction InfoRow({ label, value }: InfoRowProps) {\r\n  return (\r\n    <div className={cn(\r\n      'flex items-center justify-between rounded bg-background/30 px-3 py-2',\r\n      textClasses['body-small']\r\n    )}>\r\n      <span className='text-muted-foreground'>{label}:</span>\r\n      <span className='font-medium text-foreground'>{value || '-'}</span>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/TopProductsByQuantityWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/TopProductsDistributionWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":135,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4366,4369],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4366,4369],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":216,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7268,7271],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7268,7271],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Top Products Distribution Widget - REST API Version\r\n * 顯示指定時間範圍內產量最高的前10個產品的分布圖（Donut Chart）\r\n * 用於 Injection Dashboard\r\n * \r\n * REST API 版本，已移除所有 GraphQL 相關代碼\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useMemo, useEffect, useState } from 'react';\nimport { DatabaseRecord } from '@/lib/types/database';\r\nimport { CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { UniversalWidgetCard as WidgetCard } from '../UniversalWidgetCard';\r\nimport { ChartPieIcon } from '@heroicons/react/24/outline';\r\nimport { WidgetComponentProps } from '@/app/types/dashboard';\r\nimport { format, startOfDay, endOfDay } from 'date-fns';\r\nimport { createDashboardAPIClient as createDashboardAPI } from '@/lib/api/admin/DashboardAPI.client';\r\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\r\n// Note: Migrated to REST API - GraphQL hooks removed\r\nimport { WidgetSkeleton } from './common/WidgetStates';\r\n\r\ninterface ChartData {\r\n  name: string;\r\n  value: number;\r\n  percentage: number;\r\n  colour?: string;\r\n}\r\n\r\n// 預設顏色調色板\r\nconst COLORS = [\r\n  '#3B82F6', // blue-500\r\n  '#10B981', // emerald-500\r\n  '#F59E0B', // amber-500\r\n  '#EF4444', // red-500\r\n  '#8B5CF6', // violet-500\r\n  '#EC4899', // pink-500\r\n  '#06B6D4', // cyan-500\r\n  '#84CC16', // lime-500\r\n  '#F97316', // orange-500\r\n  '#6366F1', // indigo-500\r\n];\r\n\r\nexport const TopProductsDistributionWidget = React.memo(function TopProductsDistributionWidget({\r\n  widget,\r\n  isEditMode,\r\n  timeFrame,\r\n}: WidgetComponentProps) {\r\n  const [chartData, setChartData] = useState<ChartData[]>([]);\r\n\r\n  // 根據 timeFrame 設定查詢時間範圍\r\n  const { startDate, endDate } = useMemo(() => {\r\n    if (!timeFrame) {\r\n      const today = new Date();\r\n      return {\r\n        startDate: startOfDay(today).toISOString(),\r\n        endDate: endOfDay(today).toISOString(),\r\n      };\r\n    }\r\n    return {\r\n      startDate: timeFrame.start.toISOString(),\r\n      endDate: timeFrame.end.toISOString(),\r\n    };\r\n  }, [timeFrame]);\r\n\r\n  // 使用 REST API 獲取數據\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (isEditMode) return;\r\n\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        const dashboardAPI = createDashboardAPI();\r\n        const result = await dashboardAPI.fetch(\r\n          {\r\n            widgetIds: ['top_products_distribution'],\r\n            dateRange: { start: startDate, end: endDate },\r\n          },\r\n          {\r\n            strategy: 'client',\r\n            cache: { ttl: 300 }, // 5-minute cache\r\n          }\r\n        );\r\n\r\n        const widgetData = result.widgets?.find(\r\n          w => w.widgetId === 'top_products_distribution'\r\n        );\r\n\r\n        if (widgetData && !widgetData.data.error) {\r\n          const rawData = widgetData.data.value || [];\r\n          \r\n          // 轉換為圖表數據格式，計算百分比\r\n          const total = rawData.reduce((sum: number, item: Record<string, unknown>) => sum + (item.quantity || 0), 0);\r\n          \r\n          const chartData: ChartData[] = rawData.map((item: DatabaseRecord, index: number) => ({\r\n            name: item.product_code || item.name,\r\n            value: item.quantity || item.value || 0,\r\n            percentage: total > 0 ? ((item.quantity || item.value || 0) / total) * 100 : 0,\r\n            colour: item.colour || COLORS[index % COLORS.length],\r\n          }));\r\n          \r\n          setChartData(chartData);\r\n        } else {\r\n          throw new Error(widgetData?.data.error || 'No data received');\r\n        }\r\n      } catch (err) {\r\n        console.error('Error fetching product distribution:', err);\r\n        setError(err instanceof Error ? (err as { message: string }).message : 'Unknown error');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [startDate, endDate, isEditMode]);\r\n\r\n  // 獲取實際數據時間範圍（用於顯示）\r\n  const displayDateRange = useMemo(() => {\r\n    const start = timeFrame?.start || new Date();\r\n    const end = timeFrame?.end || new Date();\r\n    \r\n    if (format(start, 'yyyy-MM-dd') === format(end, 'yyyy-MM-dd')) {\r\n      return format(start, 'MMM d, yyyy');\r\n    }\r\n    \r\n    return `${format(start, 'MMM d')} - ${format(end, 'MMM d, yyyy')}`;\r\n  }, [timeFrame]);\r\n\r\n  // 自定義 Tooltip\r\n  const CustomTooltip = ({ active, payload }: any) => {\r\n    if (active && payload && payload.length) {\r\n      const data = payload[0];\r\n      return (\r\n        <div className='rounded-lg bg-slate-800 p-2 shadow-lg border border-slate-700'>\r\n          <p className='text-sm font-medium text-white'>{data.name}</p>\r\n          <p className='text-xs text-slate-400'>\r\n            Quantity: {data.value.toLocaleString()}\r\n          </p>\r\n          <p className='text-xs text-slate-400'>\r\n            Percentage: {data.payload.percentage.toFixed(1)}%\r\n          </p>\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  if (isEditMode) {\r\n    return (\r\n      <WidgetCard widgetType='custom' isEditMode={true}>\r\n        <div className='flex h-full items-center justify-center'>\r\n          <p className='font-medium text-slate-400'>Top Products Distribution</p>\r\n        </div>\r\n      </WidgetCard>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <WidgetCard widgetType='custom'>\r\n      <CardHeader className='pb-2'>\r\n        <CardTitle className='widget-title flex items-center gap-2'>\r\n          <ChartPieIcon className='h-5 w-5' />\r\n          Top 10 Products Distribution\r\n        </CardTitle>\r\n        <p className='mt-1 text-xs text-slate-400'>\r\n          {displayDateRange}\r\n          <span className='ml-2 text-xs text-green-400'>✓ REST API</span>\r\n        </p>\r\n      </CardHeader>\r\n      <CardContent className='flex-1'>\r\n        {loading ? (\r\n          <WidgetSkeleton type=\"chart-pie\" height={200} />\r\n        ) : error ? (\r\n          <div className='flex h-full items-center justify-center'>\r\n            <div className='text-center text-sm text-red-400'>\r\n              <p>Error loading data</p>\r\n              <p className='mt-1 text-xs'>{error}</p>\r\n            </div>\r\n          </div>\r\n        ) : chartData.length === 0 ? (\r\n          <div className='flex h-full items-center justify-center'>\r\n            <p className='text-sm text-slate-400'>No production data</p>\r\n          </div>\r\n        ) : (\r\n          <ResponsiveContainer width='100%' height='100%'>\r\n            <PieChart>\r\n              <Pie\r\n                data={chartData}\r\n                cx='50%'\r\n                cy='50%'\r\n                labelLine={false}\r\n                outerRadius={80}\r\n                innerRadius={40}\r\n                fill='#8884d8'\r\n                dataKey='value'\r\n                animationBegin={0}\r\n                animationDuration={800}\r\n              >\r\n                {chartData.map((entry, index) => (\r\n                  <Cell \r\n                    key={`cell-${index}`} \r\n                    fill={entry.colour || COLORS[index % COLORS.length]} \r\n                  />\r\n                ))}\r\n              </Pie>\r\n              <Tooltip content={<CustomTooltip />} />\r\n              <Legend \r\n                verticalAlign='middle' \r\n                align='right' \r\n                layout='vertical'\r\n                formatter={(value, entry: any) => (\r\n                  <span className='text-xs text-slate-300'>\r\n                    {value} ({entry.payload.percentage.toFixed(1)}%)\r\n                  </span>\r\n                )}\r\n              />\r\n            </PieChart>\r\n          </ResponsiveContainer>\r\n        )}\r\n      </CardContent>\r\n    </WidgetCard>\r\n  );\r\n});\r\n\r\nexport default TopProductsDistributionWidget;\r\n\r\n/**\r\n * GraphQL to REST API Migration completed on 2025-07-16\r\n * \r\n * Changes:\r\n * - Removed all GraphQL dependencies (Apollo Client, useGetTopProductsByQuantityQuery)\r\n * - Converted to pure REST API usage via Dashboard API client\r\n * - Removed environment variable control logic (NEXT_PUBLIC_ENABLE_GRAPHQL_INJECTION)\r\n * - Removed dual-mode GraphQL/REST architecture\r\n * - Maintained all functionality with simplified architecture\r\n * \r\n * Features:\r\n * - Pure REST API data fetching with 5-minute cache\r\n * - Interactive donut chart with Recharts\r\n * - Custom tooltips and legends\r\n * - Responsive design\r\n * \r\n * Performance improvements:\r\n * - Efficient data processing on client\r\n * - Dashboard API client cache reduces network requests\r\n * - Smooth animations with Recharts\r\n */","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/TransactionReportWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/TransferTimeDistributionWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3044,3047],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3044,3047],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3798,3801],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3798,3801],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Transfer Time Distribution Widget\r\n * 以線形圖顯示 transfer done 的時間分布\r\n * REST API 版本，已移除所有 GraphQL 相關代碼\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useMemo, useState, useEffect, useCallback, useRef } from 'react';\r\nimport { ChartBarIcon } from '@heroicons/react/24/outline';\r\nimport { WidgetComponentProps } from '@/app/types/dashboard';\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from 'recharts';\r\nimport { format, startOfHour, addHours } from 'date-fns';\r\nimport { getYesterdayRange } from '@/app/utils/timezone';\r\nimport { createDashboardAPIClient as createDashboardAPI } from '@/lib/api/admin/DashboardAPI.client';\r\nimport { WidgetStyles } from '@/app/utils/widgetStyles';\r\n// GraphQL imports removed - using REST API only\r\nimport { useInViewport } from '@/app/admin/hooks/useInViewport';\r\nimport { ChartContainer, LineChartSkeleton } from './common';\r\n\r\n// GraphQL query removed - using REST API only\r\n\r\ninterface TimeDistributionData {\r\n  timeSlots: Array<{\r\n    time: string;\r\n    value: number;\r\n    fullTime: string;\r\n  }>;\r\n  totalTransfers: number;\r\n  optimized?: boolean;\r\n  calculationTime?: string;\r\n  peakHour?: string;\r\n}\r\n\r\nexport const TransferTimeDistributionWidget = React.memo(function TransferTimeDistributionWidget({\r\n  widget,\r\n  isEditMode,\r\n  timeFrame,\r\n}: WidgetComponentProps) {\r\n  // Progressive Loading\r\n  const ref = useRef<HTMLDivElement>(null);\r\n  const { isInViewport } = useInViewport(ref, {\r\n    threshold: 0.1,\r\n    rootMargin: '50px',\r\n  });\r\n\r\n  // 根據 timeFrame 設定查詢時間範圍\r\n  const dateRange = useMemo(() => {\r\n    if (!timeFrame) {\r\n      const range = getYesterdayRange();\r\n      return {\r\n        start: new Date(range.start),\r\n        end: new Date(range.end),\r\n      };\r\n    }\r\n    return {\r\n      start: timeFrame.start,\r\n      end: timeFrame.end,\r\n    };\r\n  }, [timeFrame]);\r\n\r\n  // 使用 REST API 獲取數據\r\n  const [apiData, setApiData] = useState<{ timeSlots: Record<string, unknown>[]; totalTransfers: number } | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<Error | null>(null);\r\n\r\n  const fetchData = useCallback(async () => {\r\n    if (isEditMode || !isInViewport) return;\r\n    \r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const dashboardAPI = createDashboardAPI();\r\n      const dashboardResult = await dashboardAPI.fetch(\r\n        {\r\n          widgetIds: ['transfer_time_distribution'],\r\n          dateRange: {\r\n            start: dateRange.start.toISOString(),\r\n            end: dateRange.end.toISOString(),\r\n          },\r\n        },\r\n        {\r\n          strategy: 'client',\r\n          cache: { ttl: 300 }, // 5-minute cache\r\n        }\r\n      );\r\n\r\n      const widgetData = dashboardResult.widgets?.find(\r\n        w => w.widgetId === 'transfer_time_distribution'\r\n      );\r\n\r\n      if (widgetData && !widgetData.data.error) {\r\n        const timeSlots = widgetData.data.value || [];\r\n        const totalTransfers = timeSlots.reduce((sum: number, slot: any) => sum + (slot.value || 0), 0);\r\n        \r\n        setApiData({\r\n          timeSlots,\r\n          totalTransfers,\r\n        });\r\n      } else {\r\n        throw new Error(widgetData?.data.error || 'No data received');\r\n      }\r\n    } catch (err) {\r\n      setError(err as Error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [dateRange, isEditMode, isInViewport]);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [fetchData]);\r\n\r\n  // 處理數據 - 使用 REST API 的結果\r\n  const data = useMemo<TimeDistributionData>(() => {\r\n    if (!apiData) {\r\n      return { timeSlots: [], totalTransfers: 0 };\r\n    }\r\n\r\n    const { timeSlots, totalTransfers } = apiData;\r\n    \r\n    // 找出高峰時段\r\n    let peakHour = '';\r\n    let maxValue = 0;\r\n    timeSlots.forEach((slot: any) => {\r\n      if (slot.value > maxValue) {\r\n        maxValue = slot.value;\r\n        peakHour = slot.time;\r\n      }\r\n    });\r\n\r\n    return {\r\n      timeSlots,\r\n      totalTransfers,\r\n      peakHour,\r\n      optimized: true,\r\n    };\r\n  }, [apiData]);\r\n\r\n  // 當不在視窗中時顯示 skeleton\r\n  if (!isInViewport && !isEditMode) {\r\n    return (\r\n      <div ref={ref}>\r\n        <LineChartSkeleton\r\n          height=\"md\"\r\n          showHeader={true}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (isEditMode) {\r\n    return (\r\n      <div ref={ref}>\r\n        <LineChartSkeleton\r\n          height=\"md\"\r\n          showHeader={true}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const chartContent = (\r\n    <ResponsiveContainer width='100%' height='100%'>\r\n      <LineChart data={data.timeSlots} margin={{ top: 5, right: 5, left: 5, bottom: 5 }}>\r\n        <CartesianGrid strokeDasharray='3 3' stroke='#334155' />\r\n        <XAxis\r\n          dataKey='time'\r\n          stroke='#94a3b8'\r\n          fontSize={10}\r\n          angle={-45}\r\n          textAnchor='end'\r\n          height={60}\r\n        />\r\n        <YAxis stroke='#94a3b8' fontSize={11} width={30} />\r\n        <Tooltip\r\n          contentStyle={{\r\n            backgroundColor: '#1e293b',\r\n            border: '1px solid #334155',\r\n            borderRadius: '8px',\r\n            fontSize: '12px',\r\n          }}\r\n          labelFormatter={label => `Time: ${label}`}\r\n          formatter={(value: unknown) => [value, 'Transfers']}\r\n        />\r\n        <Line\r\n          type='monotone'\r\n          dataKey='value'\r\n          stroke='#3b82f6'\r\n          strokeWidth={2}\r\n          dot={false} // No dots as requested\r\n          activeDot={{ r: 4, fill: '#3b82f6' }}\r\n        />\r\n      </LineChart>\r\n    </ResponsiveContainer>\r\n  );\r\n\r\n  return (\r\n    <div ref={ref}>\r\n      <ChartContainer\r\n        title=\"Transfer Time Distribution\"\r\n        icon={ChartBarIcon}\r\n        loading={loading}\r\n        error={error}\r\n        isEmpty={data.timeSlots.length === 0}\r\n        emptyMessage=\"No transfers found in this time period\"\r\n        dateRange={dateRange}\r\n        performanceMetrics={{\r\n          source: 'REST API',\r\n          optimized: data.optimized,\r\n        }}\r\n        metadata={{\r\n          totalTransfers: data.totalTransfers,\r\n          peakHour: data.peakHour,\r\n        }}\r\n        onRefresh={() => {\r\n          fetchData();\r\n        }}\r\n      >\r\n        {chartContent}\r\n      </ChartContainer>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default TransferTimeDistributionWidget;\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/UnifiedChartWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":200,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4814,4817],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4814,4817],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":249,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6686,6689],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6686,6689],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo } from 'react';\r\nimport { ChartContainer } from './common/charts/ChartContainer';\r\nimport { ChartSkeleton } from './common/charts/ChartSkeleton';\r\nimport { useDashboardConcurrentQuery } from '@/app/admin/hooks/useDashboardConcurrentQuery';\r\nimport { AdminWidgetConfig } from '../adminDashboardLayouts';\r\n\r\n// 直接導入 recharts 組件以優化 bundle size\r\nimport { \r\n  BarChart, \r\n  Bar, \r\n  LineChart, \r\n  Line, \r\n  PieChart, \r\n  Pie, \r\n  AreaChart, \r\n  Area, \r\n  XAxis, \r\n  YAxis, \r\n  CartesianGrid, \r\n  Tooltip, \r\n  Legend,\r\n  ResponsiveContainer,\r\n  Cell\r\n} from '@/lib/recharts-dynamic';\r\n\r\ninterface UnifiedChartWidgetProps {\r\n  config: AdminWidgetConfig;\r\n  dateRange?: {\r\n    start: string;\r\n    end: string;\r\n  };\r\n  warehouse?: string;\r\n}\r\n\r\n/**\r\n * UnifiedChartWidget - 統一圖表組件\r\n * \r\n * 基於現有的 ChartContainer 組件，提供統一的圖表數據顯示\r\n * 支持多種圖表類型和動態配置\r\n */\r\nexport const UnifiedChartWidget: React.FC<UnifiedChartWidgetProps> = ({\r\n  config,\r\n  dateRange,\r\n  warehouse\r\n}) => {\r\n  // 轉換 dateRange 格式以匹配 DashboardDateRange 接口\r\n  const dashboardDateRange = dateRange ? {\r\n    startDate: new Date(dateRange.start),\r\n    endDate: new Date(dateRange.end)\r\n  } : {\r\n    startDate: null,\r\n    endDate: null\r\n  };\r\n\r\n  // 使用現有的統一API查詢機制\r\n  const { data, isLoading, error } = useDashboardConcurrentQuery({\r\n    dateRange: dashboardDateRange,\r\n    enabledWidgets: [config.dataSource || 'default'],\r\n    enabled: true\r\n  });\r\n\r\n  // 處理圖表數據\r\n  const processedChartData = useMemo(() => {\r\n    if (!data || !config.dataSource) return null;\r\n\r\n    const sourceData = data[config.dataSource];\r\n    if (!sourceData) return null;\r\n\r\n    // 根據圖表類型處理數據\r\n    const chartType = config.chartType || 'bar';\r\n    \r\n    switch (chartType) {\r\n      case 'bar':\r\n      case 'line':\r\n        return {\r\n          labels: sourceData.labels || [],\r\n          datasets: [{\r\n            label: config.title,\r\n            data: sourceData.values || [],\r\n            backgroundColor: sourceData.colors || ['#3B82F6'],\r\n            borderColor: sourceData.borderColors || ['#1E40AF'],\r\n            borderWidth: 1\r\n          }]\r\n        };\r\n        \r\n      case 'donut':\r\n      case 'pie':\r\n        return {\r\n          labels: sourceData.labels || [],\r\n          datasets: [{\r\n            data: sourceData.values || [],\r\n            backgroundColor: sourceData.colors || [\r\n              '#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6'\r\n            ],\r\n            borderWidth: 1\r\n          }]\r\n        };\r\n        \r\n      case 'area':\r\n        return {\r\n          labels: sourceData.labels || [],\r\n          datasets: [{\r\n            label: config.title,\r\n            data: sourceData.values || [],\r\n            backgroundColor: 'rgba(59, 130, 246, 0.1)',\r\n            borderColor: '#3B82F6',\r\n            borderWidth: 2,\r\n            fill: true\r\n          }]\r\n        };\r\n        \r\n      default:\r\n        return {\r\n          labels: sourceData.labels || [],\r\n          datasets: [{\r\n            label: config.title,\r\n            data: sourceData.values || [],\r\n            backgroundColor: '#3B82F6'\r\n          }]\r\n        };\r\n    }\r\n  }, [data, config.dataSource, config.chartType, config.title]);\r\n\r\n  // 獲取圖表配置\r\n  const getChartOptions = (chartType: string) => {\r\n    const baseOptions = {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      animation: {\r\n        duration: 1000\r\n      },\r\n      plugins: {\r\n        legend: {\r\n          display: true,\r\n          position: 'top' as const\r\n        },\r\n        tooltip: {\r\n          enabled: true,\r\n          mode: 'index' as const,\r\n          intersect: false\r\n        }\r\n      }\r\n    };\r\n\r\n    switch (chartType) {\r\n      case 'line':\r\n        return {\r\n          ...baseOptions,\r\n          scales: {\r\n            x: {\r\n              display: true,\r\n              title: {\r\n                display: true,\r\n                text: 'Time'\r\n              }\r\n            },\r\n            y: {\r\n              display: true,\r\n              title: {\r\n                display: true,\r\n                text: 'Value'\r\n              }\r\n            }\r\n          }\r\n        };\r\n        \r\n      case 'bar':\r\n        return {\r\n          ...baseOptions,\r\n          scales: {\r\n            x: {\r\n              display: true\r\n            },\r\n            y: {\r\n              display: true,\r\n              beginAtZero: true\r\n            }\r\n          }\r\n        };\r\n        \r\n      case 'donut':\r\n      case 'pie':\r\n        return {\r\n          ...baseOptions,\r\n          plugins: {\r\n            ...baseOptions.plugins,\r\n            legend: {\r\n              display: true,\r\n              position: 'right' as const\r\n            }\r\n          }\r\n        };\r\n        \r\n      default:\r\n        return baseOptions;\r\n    }\r\n  };\r\n\r\n  // 動態渲染圖表組件\r\n  const renderChart = (chartType: string, chartData: any, options: Record<string, unknown>) => {\r\n    const { labels, datasets } = chartData;\r\n    const data = labels.map((label: string, index: number) => ({\r\n      name: label,\r\n      value: datasets[0]?.data[index] || 0,\r\n      color: datasets[0]?.backgroundColor?.[index] || datasets[0]?.backgroundColor || '#3B82F6'\r\n    }));\r\n\r\n    switch (chartType) {\r\n      case 'bar':\r\n        return (\r\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <BarChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"name\" />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n              <Bar dataKey=\"value\" fill=\"#3B82F6\" />\r\n            </BarChart>\r\n          </ResponsiveContainer>\r\n        );\r\n      case 'line':\r\n        return (\r\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <LineChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"name\" />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n              <Line type=\"monotone\" dataKey=\"value\" stroke=\"#3B82F6\" strokeWidth={2} />\r\n            </LineChart>\r\n          </ResponsiveContainer>\r\n        );\r\n      case 'donut':\r\n      case 'pie':\r\n        return (\r\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <PieChart margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n              <Pie\r\n                data={data}\r\n                cx=\"50%\"\r\n                cy=\"50%\"\r\n                innerRadius={chartType === 'donut' ? 60 : 0}\r\n                outerRadius={80}\r\n                paddingAngle={5}\r\n                dataKey=\"value\"\r\n              >\r\n                {data.map((entry: any, index: number) => (\r\n                  <Cell key={`cell-${index}`} fill={entry.color} />\r\n                ))}\r\n              </Pie>\r\n              <Tooltip />\r\n              <Legend />\r\n            </PieChart>\r\n          </ResponsiveContainer>\r\n        );\r\n      case 'area':\r\n        return (\r\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <AreaChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"name\" />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n              <Area type=\"monotone\" dataKey=\"value\" stroke=\"#3B82F6\" fill=\"#3B82F6\" fillOpacity={0.3} />\r\n            </AreaChart>\r\n          </ResponsiveContainer>\r\n        );\r\n      default:\r\n        return (\r\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <BarChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"name\" />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n              <Bar dataKey=\"value\" fill=\"#3B82F6\" />\r\n            </BarChart>\r\n          </ResponsiveContainer>\r\n        );\r\n    }\r\n  };\r\n\r\n  // 錯誤狀態處理\r\n  if (error) {\r\n    return (\r\n      <ChartContainer\r\n        title={config.title}\r\n        subtitle={config.description}\r\n        className=\"min-h-[300px]\"\r\n      >\r\n        <div className=\"flex flex-col items-center justify-center h-full text-red-500\">\r\n          <div className=\"text-lg font-semibold\">資料載入失敗</div>\r\n          <div className=\"text-sm mt-2\">請稍後再試</div>\r\n        </div>\r\n      </ChartContainer>\r\n    );\r\n  }\r\n\r\n  // 載入狀態\r\n  if (isLoading || !processedChartData) {\r\n    return (\r\n      <ChartContainer\r\n        title={config.title}\r\n        subtitle={config.description}\r\n        className=\"min-h-[300px]\"\r\n      >\r\n        <ChartSkeleton />\r\n      </ChartContainer>\r\n    );\r\n  }\r\n\r\n  const chartType = config.chartType || 'bar';\r\n  const chartOptions = getChartOptions(chartType);\r\n\r\n  return (\r\n    <ChartContainer\r\n      title={config.title}\r\n      subtitle={config.description}\r\n      className=\"min-h-[300px]\"\r\n    >\r\n      <div className=\"h-full w-full\">\r\n        {renderChart(chartType, processedChartData, chartOptions)}\r\n      </div>\r\n    </ChartContainer>\r\n  );\r\n};\r\n\r\nexport default UnifiedChartWidget;","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/UnifiedChartWidgetWithErrorBoundary.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":255,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":255,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6124,6127],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6124,6127],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":305,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":305,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8053,8056],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8053,8056],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo } from 'react';\nimport { ChartContainer } from './common/charts/ChartContainer';\nimport { ChartSkeleton } from './common/charts/ChartSkeleton';\nimport { useDashboardConcurrentQuery } from '@/app/admin/hooks/useDashboardConcurrentQuery';\nimport { AdminWidgetConfig } from '../adminDashboardLayouts';\nimport { WidgetErrorBoundary, useErrorHandler, WidgetErrorFallback, ERROR_MESSAGES } from '@/lib/error-handling';\n\n// 直接導入 recharts 組件以優化 bundle size\nimport { \n  BarChart, \n  Bar, \n  LineChart, \n  Line, \n  PieChart, \n  Pie, \n  AreaChart, \n  Area, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  Legend,\n  ResponsiveContainer,\n  Cell\n} from '@/lib/recharts-dynamic';\n\ninterface UnifiedChartWidgetProps {\n  config: AdminWidgetConfig;\n  dateRange?: {\n    start: string;\n    end: string;\n  };\n  warehouse?: string;\n}\n\n/**\n * UnifiedChartWidget - 統一圖表組件 (增強錯誤處理版本)\n * \n * 基於現有的 ChartContainer 組件，提供統一的圖表數據顯示\n * 支持多種圖表類型和動態配置\n * 整合了統一錯誤邊界系統\n */\nexport const UnifiedChartWidget: React.FC<UnifiedChartWidgetProps> = (props) => {\n  return (\n    <WidgetErrorBoundary \n      widgetName=\"UnifiedChart\"\n      fallback={({ retry, reset }) => (\n        <WidgetErrorFallback \n          error={new Error(ERROR_MESSAGES.RENDERING.CHART_FAILED)}\n          retry={retry}\n          reset={reset}\n          widgetName={props.config.title}\n        />\n      )}\n      recoveryStrategy={{\n        primaryAction: 'retry',\n        secondaryActions: ['refresh'],\n        autoRetry: {\n          enabled: true,\n          maxAttempts: 3,\n          delayMs: 1000\n        }\n      }}\n    >\n      <UnifiedChartWidgetContent {...props} />\n    </WidgetErrorBoundary>\n  );\n};\n\n// 將實際的 widget 內容分離到獨立組件\nconst UnifiedChartWidgetContent: React.FC<UnifiedChartWidgetProps> = ({\n  config,\n  dateRange,\n  warehouse\n}) => {\n  const { handleError } = useErrorHandler('UnifiedChartWidget');\n\n  // 轉換 dateRange 格式以匹配 DashboardDateRange 接口\n  const dashboardDateRange = dateRange ? {\n    startDate: new Date(dateRange.start),\n    endDate: new Date(dateRange.end)\n  } : {\n    startDate: null,\n    endDate: null\n  };\n\n  // 使用現有的統一API查詢機制\n  const { data, isLoading, error } = useDashboardConcurrentQuery({\n    dateRange: dashboardDateRange,\n    enabledWidgets: [config.dataSource || 'default'],\n    enabled: true\n  });\n\n  // 處理查詢錯誤\n  React.useEffect(() => {\n    if (error) {\n      handleError(\n        typeof error === 'string' ? new Error(error) : error,\n        'data_fetch',\n        { \n          userMessage: ERROR_MESSAGES.WIDGET.CHART_DATA_FAILED\n        }\n      );\n    }\n  }, [error, handleError]);\n\n  // 處理圖表數據\n  const processedChartData = useMemo(() => {\n    try {\n      if (!data || !config.dataSource) return null;\n\n      const sourceData = data[config.dataSource];\n      if (!sourceData) return null;\n\n      // 根據圖表類型處理數據\n      const chartType = config.chartType || 'bar';\n      \n      switch (chartType) {\n        case 'bar':\n        case 'line':\n          return {\n            labels: sourceData.labels || [],\n            datasets: [{\n              label: config.title,\n              data: sourceData.values || [],\n              backgroundColor: sourceData.colors || ['#3B82F6'],\n              borderColor: '#3B82F6',\n              borderWidth: 2\n            }]\n          };\n          \n        case 'donut':\n        case 'pie':\n          return {\n            labels: sourceData.labels || [],\n            datasets: [{\n              data: sourceData.values || [],\n              backgroundColor: sourceData.colors || [\n                '#3B82F6', '#EF4444', '#10B981', '#F59E0B', '#8B5CF6'\n              ]\n            }]\n          };\n          \n        case 'area':\n          return {\n            labels: sourceData.labels || [],\n            datasets: [{\n              label: config.title,\n              data: sourceData.values || [],\n              backgroundColor: 'rgba(59, 130, 246, 0.1)',\n              borderColor: '#3B82F6',\n              borderWidth: 2,\n              fill: true\n            }]\n          };\n          \n        default:\n          return {\n            labels: sourceData.labels || [],\n            datasets: [{\n              label: config.title,\n              data: sourceData.values || [],\n              backgroundColor: '#3B82F6'\n            }]\n          };\n      }\n    } catch (processingError) {\n      handleError(\n        processingError as Error,\n        'data_processing',\n        { \n          userMessage: ERROR_MESSAGES.API.GENERAL\n        }\n      );\n      return null;\n    }\n  }, [data, config.dataSource, config.chartType, config.title, handleError]);\n\n  // 獲取圖表配置\n  const getChartOptions = (chartType: string) => {\n    const baseOptions = {\n      responsive: true,\n      maintainAspectRatio: false,\n      animation: {\n        duration: 1000\n      },\n      plugins: {\n        legend: {\n          display: true,\n          position: 'top' as const\n        },\n        tooltip: {\n          enabled: true,\n          mode: 'index' as const,\n          intersect: false\n        }\n      }\n    };\n\n    switch (chartType) {\n      case 'line':\n        return {\n          ...baseOptions,\n          scales: {\n            x: {\n              display: true,\n              title: {\n                display: true,\n                text: 'Time'\n              }\n            },\n            y: {\n              display: true,\n              title: {\n                display: true,\n                text: 'Value'\n              }\n            }\n          }\n        };\n        \n      case 'bar':\n        return {\n          ...baseOptions,\n          scales: {\n            x: {\n              display: true\n            },\n            y: {\n              display: true,\n              beginAtZero: true\n            }\n          }\n        };\n        \n      case 'donut':\n      case 'pie':\n        return {\n          ...baseOptions,\n          plugins: {\n            ...baseOptions.plugins,\n            legend: {\n              display: true,\n              position: 'right' as const\n            }\n          }\n        };\n        \n      default:\n        return baseOptions;\n    }\n  };\n\n  // 動態渲染圖表組件\n  const renderChart = (chartType: string, chartData: any, options: Record<string, unknown>) => {\n    try {\n      const { labels, datasets } = chartData;\n      const data = labels.map((label: string, index: number) => ({\n        name: label,\n        value: datasets[0]?.data[index] || 0,\n        color: datasets[0]?.backgroundColor?.[index] || datasets[0]?.backgroundColor || '#3B82F6'\n      }));\n\n      switch (chartType) {\n        case 'bar':\n          return (\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Bar dataKey=\"value\" fill=\"#3B82F6\" />\n              </BarChart>\n            </ResponsiveContainer>\n          );\n        case 'line':\n          return (\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Line type=\"monotone\" dataKey=\"value\" stroke=\"#3B82F6\" strokeWidth={2} />\n              </LineChart>\n            </ResponsiveContainer>\n          );\n        case 'donut':\n        case 'pie':\n          return (\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <PieChart margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n                <Pie\n                  data={data}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  innerRadius={chartType === 'donut' ? 60 : 0}\n                  outerRadius={80}\n                  paddingAngle={5}\n                  dataKey=\"value\"\n                >\n                  {data.map((entry: any, index: number) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip />\n                <Legend />\n              </PieChart>\n            </ResponsiveContainer>\n          );\n        case 'area':\n          return (\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <AreaChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Area type=\"monotone\" dataKey=\"value\" stroke=\"#3B82F6\" fill=\"#3B82F6\" fillOpacity={0.3} />\n              </AreaChart>\n            </ResponsiveContainer>\n          );\n        default:\n          return (\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Bar dataKey=\"value\" fill=\"#3B82F6\" />\n              </BarChart>\n            </ResponsiveContainer>\n          );\n      }\n    } catch (renderError) {\n      handleError(\n        renderError as Error,\n        'render_chart',\n        { \n          userMessage: ERROR_MESSAGES.RENDERING.CHART_FAILED\n        }\n      );\n      return null;\n    }\n  };\n\n  // 錯誤狀態處理 - 由錯誤邊界處理，這裡只返回 null\n  if (error) {\n    return null;\n  }\n\n  // 載入狀態\n  if (isLoading || !processedChartData) {\n    return (\n      <ChartContainer\n        title={config.title}\n        subtitle={config.description}\n        className=\"min-h-[300px]\"\n      >\n        <ChartSkeleton />\n      </ChartContainer>\n    );\n  }\n\n  const chartType = config.chartType || 'bar';\n  const chartOptions = getChartOptions(chartType);\n\n  return (\n    <ChartContainer\n      title={config.title}\n      subtitle={config.description}\n      className=\"min-h-[300px]\"\n    >\n      <div className=\"h-full w-full\">\n        {renderChart(chartType, processedChartData, chartOptions)}\n      </div>\n    </ChartContainer>\n  );\n};\n\nexport default UnifiedChartWidget;","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/UnifiedStatsWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/UnifiedStatsWidgetWithErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/UnifiedTableWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/UnifiedTableWidgetWithErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/UploadFilesWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2747,2750],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2747,2750],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":209,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":209,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6092,6095],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6092,6095],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":214,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":214,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6219,6222],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6219,6222],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Upload Files Widget - 文件上傳功能\r\n * 支援拖放和多文件上傳\r\n * 使用 Server Actions 優化\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useState, useRef, useCallback, useEffect } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { CloudArrowUpIcon, DocumentIcon, PhotoIcon } from '@heroicons/react/24/outline';\r\nimport { WidgetComponentProps } from '@/app/types/dashboard';\r\nimport { GoogleDriveUploadToast } from './GoogleDriveUploadToast';\r\nimport { useUploadRefresh } from '@/app/admin/contexts/UploadRefreshContext';\r\nimport { uploadFile } from '@/app/actions/fileActions';\r\nimport { useWidgetToast } from '@/app/admin/hooks/useWidgetToast';\r\nimport { \r\n  brandColors, \r\n  widgetColors, \r\n  semanticColors,\r\n  getWidgetCategoryColor \r\n} from '@/lib/design-system/colors';\r\nimport { textClasses, getTextClass } from '@/lib/design-system/typography';\r\nimport { spacing, widgetSpacing, spacingUtilities } from '@/lib/design-system/spacing';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface UploadingFile {\r\n  id: string;\r\n  name: string;\r\n  progress: number;\r\n  status: 'uploading' | 'completed' | 'error';\r\n  error?: string;\r\n  file: File;\r\n  folder: 'stockPic' | 'productSpec';\r\n}\r\n\r\nconst fileValidation: Record<string, string[]> = {\r\n  stockPic: ['.png', '.jpeg', '.jpg'],\r\n  productSpec: ['.pdf', '.doc', '.docx'],\r\n};\r\n\r\nconst maxFileSize = 10 * 1024 * 1024; // 10MB\r\n\r\nexport const UploadFilesWidget = React.memo(function UploadFilesWidget({\r\n  widget,\r\n  isEditMode,\r\n}: WidgetComponentProps) {\r\n  const [isDragOver, setIsDragOver] = useState(false);\r\n  const [selectedFolder, setSelectedFolder] = useState<'stockPic' | 'productSpec'>('stockPic');\r\n  const [uploadingFiles, setUploadingFiles] = useState<UploadingFile[]>([]);\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n  const { triggerOtherFilesRefresh } = useUploadRefresh();\r\n  const { showSuccess, showError } = useWidgetToast();\r\n\r\n\r\n  // 驗證文件\r\n  const validateFile = useCallback(\r\n    (file: File): string | null => {\r\n      const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase();\r\n      const folderKey = selectedFolder as string;\r\n\r\n      // 檢查文件格式\r\n      if (!fileValidation[folderKey].includes(fileExtension)) {\r\n        return `Invalid file format. Allowed: ${fileValidation[folderKey].join(', ')}`;\r\n      }\r\n\r\n      // 檢查文件大小\r\n      if (file.size > maxFileSize) {\r\n        return 'File size must be less than 10MB';\r\n      }\r\n\r\n      return null;\r\n    },\r\n    [selectedFolder]\r\n  );\r\n\r\n  // 上傳單個文件\r\n  const uploadFileAction = useCallback(\r\n    async (uploadingFile: UploadingFile) => {\r\n      try {\r\n        // 更新進度\r\n        const updateProgress = (progress: number) => {\r\n          setUploadingFiles(prev =>\r\n            prev.map((f: any) => (f.id === uploadingFile.id ? { ...f, progress } : f))\r\n          );\r\n        };\r\n\r\n        // Server Actions 不支援實時進度，使用模擬進度\r\n        updateProgress(20);\r\n\r\n        const formData = new FormData();\r\n        formData.append('file', uploadingFile.file);\r\n        formData.append('folder', uploadingFile.folder);\r\n        formData.append('fileName', uploadingFile.file.name);\r\n\r\n        // 使用 Server Action 上傳\r\n        updateProgress(40);\r\n        const result = await uploadFile(formData);\r\n        updateProgress(80);\r\n\r\n        if (!result.success) {\r\n          throw new Error(result.error || 'Upload failed');\r\n        }\r\n\r\n        updateProgress(100);\r\n\r\n        // 標記為完成\r\n        setUploadingFiles(prev =>\r\n          prev.map(f =>\r\n            f.id === uploadingFile.id ? { ...f, status: 'completed', progress: 100 } : f\r\n          )\r\n        );\r\n\r\n        // 顯示成功提示\r\n        showSuccess(`Successfully uploaded ${uploadingFile.file.name}`);\r\n\r\n        // 觸發歷史記錄更新\r\n        triggerOtherFilesRefresh();\r\n      } catch (error) {\r\n        console.error('[UploadFilesWidget as string] Upload error:', error);\r\n        setUploadingFiles(prev =>\r\n          prev.map(f =>\r\n            f.id === uploadingFile.id\r\n              ? {\r\n                  ...f,\r\n                  status: 'error',\r\n                  error: error instanceof Error ? (error as { message: string }).message : 'Upload failed',\r\n                }\r\n              : f\r\n          )\r\n        );\r\n        \r\n        // 顯示錯誤提示\r\n        showError(\r\n          `Failed to upload ${uploadingFile.file.name}`,\r\n          error instanceof Error ? error : undefined\r\n        );\r\n      }\r\n    },\r\n    [triggerOtherFilesRefresh, showSuccess, showError]\r\n  );\r\n\r\n  // 處理文件選擇\r\n  const handleFiles = useCallback(\r\n    (files: FileList | null) => {\r\n      if (!files || files.length === 0 || isEditMode) return;\r\n\r\n      const newFiles: UploadingFile[] = [];\r\n\r\n      for (let i = 0; i < files.length; i++) {\r\n        const file = files[i];\r\n        const error = validateFile(file);\r\n\r\n        if (error) {\r\n          showError(`${file.name}: ${error}`);\r\n          continue;\r\n        }\r\n\r\n        const uploadingFile: UploadingFile = {\r\n          id: `${Date.now()}-${i}`,\r\n          name: file.name,\r\n          progress: 0,\r\n          status: 'uploading',\r\n          file: file,\r\n          folder: selectedFolder,\r\n        };\r\n\r\n        newFiles.push(uploadingFile);\r\n      }\r\n\r\n      if (newFiles.length > 0) {\r\n        setUploadingFiles(prev => [...prev, ...newFiles]);\r\n\r\n        // 開始上傳\r\n        newFiles.forEach(file => {\r\n          uploadFileAction(file);\r\n        });\r\n      }\r\n    },\r\n    [selectedFolder, isEditMode, uploadFileAction, validateFile, showError]\r\n  );\r\n\r\n  // 拖放處理\r\n  const handleDragOver = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsDragOver(true);\r\n  };\r\n\r\n  const handleDragLeave = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsDragOver(false);\r\n  };\r\n\r\n  const handleDrop = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsDragOver(false);\r\n    handleFiles(e.dataTransfer.files);\r\n  };\r\n\r\n  // 點擊上傳\r\n  const handleClick = () => {\r\n    if (!isEditMode) {\r\n      fileInputRef.current?.click();\r\n    }\r\n  };\r\n\r\n  // 移除已完成的文件\r\n  const handleRemoveFile = (id: string) => {\r\n    setUploadingFiles(prev => prev.filter((f: any) => f.id !== id));\r\n  };\r\n\r\n  // 關閉上傳提示\r\n  const handleCloseToast = () => {\r\n    setUploadingFiles(prev => prev.filter((f: any) => (f as { status: string }).status === 'uploading'));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className='flex h-full flex-col items-center justify-center'\r\n        onDragOver={handleDragOver}\r\n        onDragLeave={handleDragLeave}\r\n        onDrop={handleDrop}\r\n      >\r\n        <div\r\n          onClick={handleClick}\r\n          className='cursor-pointer p-8 transition-transform hover:scale-105'\r\n        >\r\n          <CloudArrowUpIcon\r\n            className='mx-auto mb-4 h-20 w-20 transition-colors'\r\n            style={{ color: selectedFolder === 'stockPic' ? semanticColors.success.DEFAULT : semanticColors.info.DEFAULT }}\r\n          />\r\n          <p className={cn('text-center', textClasses['body-base'], 'text-muted-foreground')}>Upload Files</p>\r\n        </div>\r\n        <div className='mt-2 flex gap-2'>\r\n          <button\r\n            onClick={e => {\r\n              e.stopPropagation();\r\n              setSelectedFolder('stockPic');\r\n            }}\r\n            disabled={isEditMode}\r\n            className={cn(\r\n              'rounded-md px-3 py-1 font-medium transition-all',\r\n              textClasses['label-small'],\r\n              selectedFolder === 'stockPic'\r\n                ? 'bg-success text-success-foreground'\r\n                : 'bg-muted text-muted-foreground hover:bg-muted/80'\r\n            )}\r\n          >\r\n            Pictures\r\n          </button>\r\n          <button\r\n            onClick={e => {\r\n              e.stopPropagation();\r\n              setSelectedFolder('productSpec');\r\n            }}\r\n            disabled={isEditMode}\r\n            className={cn(\r\n              'rounded-md px-3 py-1 font-medium transition-all',\r\n              textClasses['label-small'],\r\n              selectedFolder === 'productSpec'\r\n                ? 'bg-info text-info-foreground'\r\n                : 'bg-muted text-muted-foreground hover:bg-muted/80'\r\n            )}\r\n          >\r\n            Specs\r\n          </button>\r\n        </div>\r\n        <p className={cn('mt-2', textClasses['label-small'], 'text-muted-foreground/70')}>\r\n          {selectedFolder === 'stockPic' ? 'PNG, JPEG, JPG' : 'PDF, DOC, DOCX'}\r\n        </p>\r\n\r\n        <input\r\n          ref={fileInputRef}\r\n          type='file'\r\n          multiple\r\n          accept={fileValidation[selectedFolder as string].join(',')}\r\n          onChange={e => handleFiles(e.target.files)}\r\n          className='hidden'\r\n        />\r\n      </div>\r\n\r\n      {/* Upload Toast */}\r\n      {uploadingFiles.length > 0 && (\r\n        <GoogleDriveUploadToast\r\n          files={uploadingFiles}\r\n          onClose={handleCloseToast}\r\n          onRemoveFile={handleRemoveFile}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n});\r\n\r\nexport default UploadFilesWidget;\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/UploadOrdersWidgetV2.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1340,1343],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1340,1343],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2847,2850],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2847,2850],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":233,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":233,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6647,6650],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6647,6650],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":238,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6769,6772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6769,6772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Upload Orders Widget V2\n * 訂單 PDF 上傳功能 - 使用 Server Actions 優化\n * 保留客戶端檔案上傳，優化分析流程\n */\n\n'use client';\n\nimport React, { useState, useRef, useCallback, useEffect } from 'react';\nimport { DocumentArrowUpIcon, SparklesIcon } from '@heroicons/react/24/outline';\nimport { WidgetComponentProps } from '@/app/types/dashboard';\nimport { toast } from 'sonner';\nimport { GoogleDriveUploadToast } from './GoogleDriveUploadToast';\nimport { OrderAnalysisResultDialog } from './OrderAnalysisResultDialog';\nimport { useUploadRefresh } from '@/app/admin/contexts/UploadRefreshContext';\nimport { analyzeOrderPDF, getCurrentUserId } from '@/app/actions/orderUploadActions';\n\ninterface UploadingFile {\n  id: string;\n  name: string;\n  progress: number;\n  status: 'uploading' | 'completed' | 'error';\n  error?: string;\n  file: File;\n  orderNumber?: string;\n}\n\nconst maxFileSize = 10 * 1024 * 1024; // 10MB\n\nexport const UploadOrdersWidgetV2 = React.memo(function UploadOrdersWidgetV2({\n  widget,\n  isEditMode,\n}: WidgetComponentProps) {\n  const [currentUserId, setCurrentUserId] = useState<number | null>(null);\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [uploadingFiles, setUploadingFiles] = useState<UploadingFile[]>([]);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [analysisResult, setAnalysisResult] = useState<any>(null);\n  const [showAnalysisDialog, setShowAnalysisDialog] = useState(false);\n  const [performanceMetrics, setPerformanceMetrics] = useState<{\n    lastAnalysisTime?: number;\n    optimized?: boolean;\n  }>({});\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { triggerOrderHistoryRefresh } = useUploadRefresh();\n\n  // 獲取當前用戶 ID\n  useEffect(() => {\n    const fetchUserId = async () => {\n      try {\n        const userId = await getCurrentUserId();\n        setCurrentUserId(userId);\n      } catch (error) {\n        console.error('[UploadOrdersWidgetV2] Error getting user:', error);\n      }\n    };\n\n    fetchUserId();\n  }, []);\n\n  // 驗證文件\n  const validateFile = (file: File): string | null => {\n    const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase();\n\n    if (fileExtension !== '.pdf') {\n      return 'Only PDF files are allowed';\n    }\n\n    if (file.size > maxFileSize) {\n      return 'File size must be less than 10MB';\n    }\n\n    return null;\n  };\n\n  // 從文件名提取訂單號\n  const extractOrderNumber = (fileName: string): string => {\n    const match = fileName.match(/(\\d+)\\.pdf$/i);\n    return match ? match[1] : fileName.replace('.pdf', '').replace('.PDF', '');\n  };\n\n  // 使用 Server Action 分析訂單\n  const uploadAndAnalyzeOrder = useCallback(\n    async (uploadingFile: UploadingFile) => {\n      try {\n        const startTime = performance.now();\n\n        // 更新進度\n        const updateProgress = (progress: number) => {\n          setUploadingFiles(prev =>\n            prev.map((f: any) => (f.id === uploadingFile.id ? { ...f, progress } : f))\n          );\n        };\n\n        updateProgress(10);\n        setIsAnalyzing(true);\n\n        // 讀取文件為 ArrayBuffer\n        const arrayBuffer = await uploadingFile.file.arrayBuffer();\n\n        updateProgress(30);\n\n        // 使用 Server Action 分析 PDF\n        const result = await analyzeOrderPDF(\n          {\n            buffer: arrayBuffer,\n            name: uploadingFile.file.name,\n          },\n          currentUserId?.toString() || '',\n          true // saveToStorage\n        );\n\n        updateProgress(80);\n\n        if (!result.success) {\n          throw new Error(result.error || 'Analysis failed');\n        }\n\n        updateProgress(90);\n\n        const endTime = performance.now();\n        setPerformanceMetrics({\n          lastAnalysisTime: Math.round(endTime - startTime),\n          optimized: true,\n        });\n\n        updateProgress(100);\n        setIsAnalyzing(false);\n\n        // 標記為完成\n        setUploadingFiles(prev =>\n          prev.map(f =>\n            f.id === uploadingFile.id ? { ...f, status: 'completed', progress: 100 } : f\n          )\n        );\n\n        // 顯示分析結果\n        if (result.extractedData && result.extractedData.length > 0) {\n          toast.success(`Successfully analyzed ${result.extractedData.length} orders`);\n          setAnalysisResult(result);\n          setShowAnalysisDialog(true);\n\n          // 觸發訂單歷史記錄更新\n          triggerOrderHistoryRefresh();\n        } else if (result.success && result.recordCount === 0) {\n          toast.warning('PDF processed but no orders found');\n        } else {\n          toast.error('Analysis completed but no data extracted');\n        }\n      } catch (error) {\n        console.error('[UploadOrdersWidgetV2] Upload/analyze error:', error);\n        setIsAnalyzing(false);\n        setUploadingFiles(prev =>\n          prev.map(f =>\n            f.id === uploadingFile.id\n              ? {\n                  ...f,\n                  status: 'error',\n                  error: error instanceof Error ? (error as { message: string }).message : 'Upload failed',\n                }\n              : f\n          )\n        );\n\n        toast.error(error instanceof Error ? (error as { message: string }).message : 'Failed to analyze PDF');\n      }\n    },\n    [currentUserId, triggerOrderHistoryRefresh]\n  );\n\n  // 處理文件選擇\n  const handleFiles = useCallback(\n    async (files: FileList | null) => {\n      if (!files || files.length === 0 || isEditMode) return;\n\n      if (!currentUserId) {\n        toast.error('User not authenticated. Please refresh and try again.');\n        return;\n      }\n\n      // 只處理第一個文件\n      const file = files[0];\n      const error = validateFile(file);\n\n      if (error) {\n        toast.error(`${file.name}: ${error}`);\n        return;\n      }\n\n      // 創建上傳文件對象\n      const uploadingFile: UploadingFile = {\n        id: `${Date.now()}`,\n        name: file.name,\n        progress: 0,\n        status: 'uploading',\n        file: file,\n        orderNumber: extractOrderNumber(file.name),\n      };\n\n      // 開始分析\n      setUploadingFiles(prev => [...prev, uploadingFile]);\n      uploadAndAnalyzeOrder(uploadingFile);\n    },\n    [isEditMode, uploadAndAnalyzeOrder, currentUserId]\n  );\n\n  // 拖放處理\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n    handleFiles(e.dataTransfer.files);\n  };\n\n  // 點擊上傳\n  const handleClick = () => {\n    if (!isEditMode) {\n      fileInputRef.current?.click();\n    }\n  };\n\n  // 移除已完成的文件\n  const handleRemoveFile = (id: string) => {\n    setUploadingFiles(prev => prev.filter((f: any) => f.id !== id));\n  };\n\n  // 關閉上傳提示\n  const handleCloseToast = () => {\n    setUploadingFiles(prev => prev.filter((f: any) => (f as { status: string }).status === 'uploading'));\n  };\n\n  return (\n    <>\n      <div\n        className='relative flex h-full flex-col items-center justify-center'\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onDrop={handleDrop}\n      >\n        <div\n          onClick={handleClick}\n          className={`cursor-pointer p-8 transition-all duration-300 ${isDragOver ? 'scale-110 opacity-80' : 'hover:scale-105'} `}\n        >\n          <div className='relative'>\n            <DocumentArrowUpIcon\n              className={`mx-auto mb-4 h-20 w-20 transition-all duration-300 ${isDragOver ? 'text-blue-400' : 'text-blue-500 hover:text-blue-400'} `}\n            />\n            {isAnalyzing && (\n              <div className='absolute inset-0 flex items-center justify-center'>\n                <div className='h-20 w-20 animate-spin rounded-full border-4 border-blue-500/20 border-t-blue-500' />\n              </div>\n            )}\n          </div>\n          <p className='text-center font-medium text-gray-400'>Upload Orders</p>\n          <p className='mt-1 text-center text-xs text-gray-500'>Order PDF</p>\n        </div>\n\n        {isAnalyzing && (\n          <div className='mt-2 flex items-center gap-1'>\n            <SparklesIcon className='h-3 w-3 animate-pulse text-yellow-500' />\n            <span className='text-xs text-yellow-500'>Analyzing with AI...</span>\n          </div>\n        )}\n\n        {/* Performance indicator */}\n        {performanceMetrics.optimized && performanceMetrics.lastAnalysisTime && (\n          <div className='absolute bottom-2 right-2 text-[10px] text-green-400'>\n            ✓ Server-optimized ({performanceMetrics.lastAnalysisTime}ms)\n          </div>\n        )}\n\n        <input\n          ref={fileInputRef}\n          type='file'\n          accept='.pdf'\n          onChange={e => handleFiles(e.target.files)}\n          className='hidden'\n        />\n      </div>\n\n      {/* Upload Toast */}\n      {uploadingFiles.length > 0 && (\n        <GoogleDriveUploadToast\n          files={uploadingFiles}\n          onClose={handleCloseToast}\n          onRemoveFile={handleRemoveFile}\n        />\n      )}\n\n      {/* Analysis Result Dialog */}\n      {showAnalysisDialog && analysisResult && (\n        <OrderAnalysisResultDialog\n          isOpen={showAnalysisDialog}\n          onClose={() => setShowAnalysisDialog(false)}\n          data={analysisResult}\n        />\n      )}\n    </>\n  );\n});\n\nexport default UploadOrdersWidgetV2;\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/UploadPhotoWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2285,2288],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2285,2288],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":205,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5772,5775],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5772,5775],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":217,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":217,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6133,6136],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6133,6136],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Upload Photo Widget - 照片上傳功能\r\n * 支援圖片預覽和多圖片上傳\r\n * 使用 Server Actions 優化\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useState, useRef, useCallback, useEffect } from 'react';\r\nimport { AnimatePresence } from 'framer-motion';\r\nimport { PhotoIcon, XMarkIcon } from '@heroicons/react/24/outline';\r\nimport { WidgetComponentProps } from '@/app/types/dashboard';\r\nimport { toast } from 'sonner';\r\nimport { GoogleDriveUploadToast } from './GoogleDriveUploadToast';\r\nimport { useUploadRefresh } from '@/app/admin/contexts/UploadRefreshContext';\r\nimport { uploadFile } from '@/app/actions/fileActions';\r\n\r\ninterface UploadingFile {\r\n  id: string;\r\n  name: string;\r\n  progress: number;\r\n  status: 'uploading' | 'completed' | 'error';\r\n  error?: string;\r\n  file: File;\r\n  preview?: string;\r\n}\r\n\r\nconst fileValidation = ['.png', '.jpeg', '.jpg', '.gif', '.webp'];\r\nconst maxFileSize = 10 * 1024 * 1024; // 10MB\r\n\r\nexport const UploadPhotoWidget = React.memo(function UploadPhotoWidget({\r\n  widget,\r\n  isEditMode,\r\n}: WidgetComponentProps) {\r\n  const [isDragOver, setIsDragOver] = useState(false);\r\n  const [uploadingFiles, setUploadingFiles] = useState<UploadingFile[]>([]);\r\n  const [previews, setPreviews] = useState<{ id: string; url: string }[]>([]);\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n  const { triggerOtherFilesRefresh } = useUploadRefresh();\r\n\r\n\r\n  // 清理預覽 URL\r\n  useEffect(() => {\r\n    return () => {\r\n      previews.forEach(preview => URL.revokeObjectURL(preview.url));\r\n    };\r\n  }, [previews]);\r\n\r\n  // 驗證文件\r\n  const validateFile = (file: File): string | null => {\r\n    const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase();\r\n\r\n    if (!fileValidation.includes(fileExtension)) {\r\n      return `Invalid file format. Allowed: ${fileValidation.join(', ')}`;\r\n    }\r\n\r\n    if (file.size > maxFileSize) {\r\n      return 'File size must be less than 10MB';\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  // 創建圖片預覽\r\n  const createPreview = (file: File): string => {\r\n    return URL.createObjectURL(file);\r\n  };\r\n\r\n  // 上傳單個文件\r\n  const uploadFileAction = useCallback(\r\n    async (uploadingFile: UploadingFile) => {\r\n      try {\r\n        // 更新進度\r\n        const updateProgress = (progress: number) => {\r\n          setUploadingFiles(prev =>\r\n            prev.map((f: any) => (f.id === uploadingFile.id ? { ...f, progress } : f))\r\n          );\r\n        };\r\n\r\n        // Server Actions 不支援實時進度，使用模擬進度\r\n        updateProgress(20);\r\n\r\n        const formData = new FormData();\r\n        formData.append('file', uploadingFile.file);\r\n        formData.append('folder', 'photos');\r\n        formData.append('fileName', uploadingFile.file.name);\r\n\r\n        // 使用 Server Action 上傳\r\n        updateProgress(40);\r\n        const result = await uploadFile(formData);\r\n        updateProgress(80);\r\n\r\n        if (!result.success) {\r\n          throw new Error(result.error || 'Upload failed');\r\n        }\r\n\r\n        updateProgress(100);\r\n\r\n        // 標記為完成\r\n        setUploadingFiles(prev =>\r\n          prev.map(f =>\r\n            f.id === uploadingFile.id ? { ...f, status: 'completed', progress: 100 } : f\r\n          )\r\n        );\r\n\r\n        toast.success(`${uploadingFile.file.name} uploaded successfully`);\r\n\r\n        // 觸發歷史記錄更新\r\n        triggerOtherFilesRefresh();\r\n      } catch (error) {\r\n        console.error('[UploadPhotoWidget as string] Upload error:', error);\r\n        setUploadingFiles(prev =>\r\n          prev.map(f =>\r\n            f.id === uploadingFile.id\r\n              ? {\r\n                  ...f,\r\n                  status: 'error',\r\n                  error: error instanceof Error ? (error as { message: string }).message : 'Upload failed',\r\n                }\r\n              : f\r\n          )\r\n        );\r\n        \r\n        // 顯示錯誤提示\r\n        toast.error(\r\n          error instanceof Error ? (error as { message: string }).message : `Failed to upload ${uploadingFile.file.name}`\r\n        );\r\n      }\r\n    },\r\n    [triggerOtherFilesRefresh]\r\n  );\r\n\r\n  // 處理文件選擇\r\n  const handleFiles = useCallback(\r\n    (files: FileList | null) => {\r\n      if (!files || files.length === 0 || isEditMode) return;\r\n\r\n      const newFiles: UploadingFile[] = [];\r\n      const newPreviews: { id: string; url: string }[] = [];\r\n\r\n      for (let i = 0; i < files.length; i++) {\r\n        const file = files[i];\r\n        const error = validateFile(file);\r\n\r\n        if (error) {\r\n          toast.error(`${file.name}: ${error}`);\r\n          continue;\r\n        }\r\n\r\n        const id = `${Date.now()}-${i}`;\r\n        const preview = createPreview(file);\r\n\r\n        const uploadingFile: UploadingFile = {\r\n          id,\r\n          name: file.name,\r\n          progress: 0,\r\n          status: 'uploading',\r\n          file: file,\r\n          preview,\r\n        };\r\n\r\n        newFiles.push(uploadingFile);\r\n        newPreviews.push({ id, url: preview });\r\n      }\r\n\r\n      if (newFiles.length > 0) {\r\n        setUploadingFiles(prev => [...prev, ...newFiles]);\r\n        setPreviews(prev => [...prev, ...newPreviews]);\r\n\r\n        // 開始上傳\r\n        newFiles.forEach(file => {\r\n          uploadFileAction(file);\r\n        });\r\n      }\r\n    },\r\n    [isEditMode, uploadFileAction]\r\n  );\r\n\r\n  // 拖放處理\r\n  const handleDragOver = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsDragOver(true);\r\n  };\r\n\r\n  const handleDragLeave = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsDragOver(false);\r\n  };\r\n\r\n  const handleDrop = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsDragOver(false);\r\n    handleFiles(e.dataTransfer.files);\r\n  };\r\n\r\n  // 點擊上傳\r\n  const handleClick = () => {\r\n    if (!isEditMode) {\r\n      fileInputRef.current?.click();\r\n    }\r\n  };\r\n\r\n  // 移除已完成的文件\r\n  const handleRemoveFile = (id: string) => {\r\n    setUploadingFiles(prev => prev.filter((f: any) => f.id !== id));\r\n    setPreviews(prev => {\r\n      const preview = prev.find(p => p.id === id);\r\n      if (preview) {\r\n        URL.revokeObjectURL(preview.url);\r\n      }\r\n      return prev.filter((p: Record<string, unknown>) => p.id !== id);\r\n    });\r\n  };\r\n\r\n  // 關閉上傳提示\r\n  const handleCloseToast = () => {\r\n    setUploadingFiles(prev => prev.filter((f: any) => (f as { status: string }).status === 'uploading'));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className='flex h-full flex-col items-center justify-center'\r\n        onDragOver={handleDragOver}\r\n        onDragLeave={handleDragLeave}\r\n        onDrop={handleDrop}\r\n      >\r\n        <div\r\n          onClick={handleClick}\r\n          className='cursor-pointer p-8 transition-transform hover:scale-105'\r\n        >\r\n          <PhotoIcon className='mx-auto mb-4 h-20 w-20 text-green-500 transition-colors hover:text-green-400' />\r\n          <p className='text-center font-medium text-gray-400'>Upload Photo</p>\r\n          <p className='mt-1 text-center text-xs text-gray-500'>PNG, JPEG, JPG, GIF, WEBP</p>\r\n        </div>\r\n        {previews.length > 0 && (\r\n          <div className='mt-2 text-xs text-green-400'>\r\n            {previews.length} photo{previews.length > 1 ? 's' : ''} selected\r\n          </div>\r\n        )}\r\n\r\n        <input\r\n          ref={fileInputRef}\r\n          type='file'\r\n          multiple\r\n          accept={fileValidation.join(',')}\r\n          onChange={e => handleFiles(e.target.files)}\r\n          className='hidden'\r\n        />\r\n      </div>\r\n\r\n      {/* Upload Toast */}\r\n      {uploadingFiles.length > 0 && (\r\n        <GoogleDriveUploadToast\r\n          files={uploadingFiles}\r\n          onClose={handleCloseToast}\r\n          onRemoveFile={handleRemoveFile}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n});\r\n\r\nexport default UploadPhotoWidget;\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/UploadProductSpecWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1853,1856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1853,1856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":182,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5095,5098],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5095,5098],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":187,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5222,5225],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5222,5225],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Upload Product Spec Widget - 產品規格文件上傳功能\r\n * 使用 Server Actions 優化\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useState, useRef, useCallback, useEffect } from 'react';\r\nimport { DocumentTextIcon } from '@heroicons/react/24/outline';\r\nimport { WidgetComponentProps } from '@/app/types/dashboard';\r\nimport { toast } from 'sonner';\r\nimport { GoogleDriveUploadToast } from './GoogleDriveUploadToast';\r\nimport { useUploadRefresh } from '@/app/admin/contexts/UploadRefreshContext';\r\nimport { uploadFile } from '@/app/actions/fileActions';\r\n\r\ninterface UploadingFile {\r\n  id: string;\r\n  name: string;\r\n  progress: number;\r\n  status: 'uploading' | 'completed' | 'error';\r\n  error?: string;\r\n  file: File;\r\n}\r\n\r\nconst fileValidation = ['.pdf', '.doc', '.docx'];\r\nconst maxFileSize = 10 * 1024 * 1024; // 10MB\r\n\r\nexport const UploadProductSpecWidget = React.memo(function UploadProductSpecWidget({\r\n  widget,\r\n  isEditMode,\r\n}: WidgetComponentProps) {\r\n  const [isDragOver, setIsDragOver] = useState(false);\r\n  const [uploadingFiles, setUploadingFiles] = useState<UploadingFile[]>([]);\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n  const { triggerOtherFilesRefresh } = useUploadRefresh();\r\n\r\n\r\n  // 驗證文件\r\n  const validateFile = (file: File): string | null => {\r\n    const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase();\r\n\r\n    if (!fileValidation.includes(fileExtension)) {\r\n      return `Invalid file format. Allowed: ${fileValidation.join(', ')}`;\r\n    }\r\n\r\n    if (file.size > maxFileSize) {\r\n      return 'File size must be less than 10MB';\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  // 上傳單個文件\r\n  const uploadFileAction = useCallback(\r\n    async (uploadingFile: UploadingFile) => {\r\n      try {\r\n        // 更新進度\r\n        const updateProgress = (progress: number) => {\r\n          setUploadingFiles(prev =>\r\n            prev.map((f: any) => (f.id === uploadingFile.id ? { ...f, progress } : f))\r\n          );\r\n        };\r\n\r\n        // Server Actions 不支援實時進度，使用模擬進度\r\n        updateProgress(20);\r\n\r\n        const formData = new FormData();\r\n        formData.append('file', uploadingFile.file);\r\n        formData.append('folder', 'productSpec');\r\n        formData.append('fileName', uploadingFile.file.name);\r\n\r\n        // 使用 Server Action 上傳\r\n        updateProgress(40);\r\n        const result = await uploadFile(formData);\r\n        updateProgress(80);\r\n\r\n        if (!result.success) {\r\n          throw new Error(result.error || 'Upload failed');\r\n        }\r\n\r\n        updateProgress(100);\r\n\r\n        // 標記為完成\r\n        setUploadingFiles(prev =>\r\n          prev.map(f =>\r\n            f.id === uploadingFile.id ? { ...f, status: 'completed', progress: 100 } : f\r\n          )\r\n        );\r\n\r\n        toast.success(`${uploadingFile.file.name} uploaded successfully`);\r\n\r\n        // 觸發歷史記錄更新\r\n        triggerOtherFilesRefresh();\r\n      } catch (error) {\r\n        console.error('[UploadProductSpecWidget as string] Upload error:', error);\r\n        setUploadingFiles(prev =>\r\n          prev.map(f =>\r\n            f.id === uploadingFile.id\r\n              ? {\r\n                  ...f,\r\n                  status: 'error',\r\n                  error: error instanceof Error ? (error as { message: string }).message : 'Upload failed',\r\n                }\r\n              : f\r\n          )\r\n        );\r\n        \r\n        // 顯示錯誤提示\r\n        toast.error(\r\n          error instanceof Error ? (error as { message: string }).message : `Failed to upload ${uploadingFile.file.name}`\r\n        );\r\n      }\r\n    },\r\n    [triggerOtherFilesRefresh]\r\n  );\r\n\r\n  // 處理文件選擇\r\n  const handleFiles = useCallback(\r\n    (files: FileList | null) => {\r\n      if (!files || files.length === 0 || isEditMode) return;\r\n\r\n      const newFiles: UploadingFile[] = [];\r\n\r\n      for (let i = 0; i < files.length; i++) {\r\n        const file = files[i];\r\n        const error = validateFile(file);\r\n\r\n        if (error) {\r\n          toast.error(`${file.name}: ${error}`);\r\n          continue;\r\n        }\r\n\r\n        const uploadingFile: UploadingFile = {\r\n          id: `${Date.now()}-${i}`,\r\n          name: file.name,\r\n          progress: 0,\r\n          status: 'uploading',\r\n          file: file,\r\n        };\r\n\r\n        newFiles.push(uploadingFile);\r\n      }\r\n\r\n      if (newFiles.length > 0) {\r\n        setUploadingFiles(prev => [...prev, ...newFiles]);\r\n\r\n        // 開始上傳\r\n        newFiles.forEach(file => {\r\n          uploadFileAction(file);\r\n        });\r\n      }\r\n    },\r\n    [isEditMode, uploadFileAction]\r\n  );\r\n\r\n  // 拖放處理\r\n  const handleDragOver = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsDragOver(true);\r\n  };\r\n\r\n  const handleDragLeave = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsDragOver(false);\r\n  };\r\n\r\n  const handleDrop = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsDragOver(false);\r\n    handleFiles(e.dataTransfer.files);\r\n  };\r\n\r\n  // 點擊上傳\r\n  const handleClick = () => {\r\n    if (!isEditMode) {\r\n      fileInputRef.current?.click();\r\n    }\r\n  };\r\n\r\n  // 移除已完成的文件\r\n  const handleRemoveFile = (id: string) => {\r\n    setUploadingFiles(prev => prev.filter((f: any) => f.id !== id));\r\n  };\r\n\r\n  // 關閉上傳提示\r\n  const handleCloseToast = () => {\r\n    setUploadingFiles(prev => prev.filter((f: any) => (f as { status: string }).status === 'uploading'));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className='flex h-full flex-col items-center justify-center'\r\n        onDragOver={handleDragOver}\r\n        onDragLeave={handleDragLeave}\r\n        onDrop={handleDrop}\r\n      >\r\n        <div\r\n          onClick={handleClick}\r\n          className='cursor-pointer p-8 transition-transform hover:scale-105'\r\n        >\r\n          <DocumentTextIcon className='mx-auto mb-4 h-20 w-20 text-purple-500 transition-colors hover:text-purple-400' />\r\n          <p className='text-center font-medium text-gray-400'>Upload Product Spec</p>\r\n          <p className='mt-1 text-center text-xs text-gray-500'>PDF, DOC, DOCX</p>\r\n        </div>\r\n\r\n        <input\r\n          ref={fileInputRef}\r\n          type='file'\r\n          multiple\r\n          accept={fileValidation.join(',')}\r\n          onChange={e => handleFiles(e.target.files)}\r\n          className='hidden'\r\n        />\r\n      </div>\r\n\r\n      {/* Upload Toast */}\r\n      {uploadingFiles.length > 0 && (\r\n        <GoogleDriveUploadToast\r\n          files={uploadingFiles}\r\n          onClose={handleCloseToast}\r\n          onRemoveFile={handleRemoveFile}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n});\r\n\r\nexport default UploadProductSpecWidget;\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/VoidPalletWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":506,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":506,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18343,18346],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18343,18346],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Void Pallet Widget\r\n * Full featured version - migrated from original VoidPalletWidget\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useState, useCallback, useRef } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport { X, Search, QrCode, Loader2, CheckCircle, Package2, List, AlertCircle } from 'lucide-react';\r\nimport { useRouter } from 'next/navigation';\r\nimport { useWidgetToast } from '@/app/admin/hooks/useWidgetToast';\r\nimport { useVoidPallet } from '@/app/void-pallet/hooks/useVoidPallet';\r\nimport { useBatchVoid } from '@/app/void-pallet/hooks/useBatchVoid';\r\nimport { VOID_REASONS } from '@/app/void-pallet/types';\r\nimport { BatchPalletItem } from '@/app/void-pallet/types/batch';\r\nimport { BatchVoidPanel } from '@/app/void-pallet/components/BatchVoidPanel';\r\nimport { SimpleQRScanner } from '@/components/qr-scanner/simple-qr-scanner';\r\nimport { WidgetComponentProps } from '@/app/types/dashboard';\r\nimport { CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { UniversalWidgetCard as WidgetCard } from '../UniversalWidgetCard';\r\nimport { getProductByCode } from '@/app/actions/productActions';\r\nimport { WidgetError } from './common/WidgetStates';\r\nimport { \r\n  brandColors, \r\n  widgetColors, \r\n  semanticColors,\r\n  getWidgetCategoryColor \r\n} from '@/lib/design-system/colors';\r\nimport { textClasses, getTextClass } from '@/lib/design-system/typography';\r\nimport { spacing, widgetSpacing, spacingUtilities } from '@/lib/design-system/spacing';\r\nimport { cn } from '@/lib/utils';\r\n\r\ntype VoidStep = 'search' | 'confirm' | 'result';\r\n\r\nexport const VoidPalletWidget = React.memo(function VoidPalletWidget({\r\n  widget,\r\n  isEditMode,\r\n}: WidgetComponentProps) {\r\n  const router = useRouter();\r\n  const { showSuccess, showError, showLoading, showWarning } = useWidgetToast();\r\n  const {\r\n    state,\r\n    updateState,\r\n    searchPallet,\r\n    executeVoid,\r\n    handleDamageQuantityChange,\r\n    handleVoidReasonChange,\r\n    clearError,\r\n    canExecuteVoid,\r\n    showDamageQuantityInput,\r\n  } = useVoidPallet();\r\n\r\n  // Batch mode integration\r\n  const {\r\n    batchState,\r\n    toggleMode,\r\n    addToBatch,\r\n    removeFromBatch,\r\n    selectAll: selectAllItems,\r\n    clearBatch,\r\n    executeBatchVoid,\r\n  } = useBatchVoid();\r\n\r\n  const [currentStep, setCurrentStep] = useState<VoidStep>('search');\r\n  const [searchValue, setSearchValue] = useState('');\r\n  const [showQrScanner, setShowQrScanner] = useState(false);\r\n  const [voidResult, setVoidResult] = useState<{\r\n    success: boolean;\r\n    message: string;\r\n    remainingQty?: number;\r\n    requiresReprint?: boolean;\r\n  } | null>(null);\r\n  const [productDescription, setProductDescription] = useState<string>('');\r\n  const [password, setPassword] = useState<string>('');\r\n\r\n  // Batch mode specific state\r\n  const [batchVoidResult, setBatchVoidResult] = useState<{\r\n    total: number;\r\n    successful: number;\r\n    failed: number;\r\n    details: Record<string, unknown>[];\r\n  } | null>(null);\r\n\r\n  const searchInputRef = useRef<HTMLInputElement>(null);\r\n  const isMobile =\r\n    typeof window !== 'undefined' &&\r\n    /Mobi|Android|iPhone|iPad|iPod|Mobile/i.test(navigator.userAgent);\r\n\r\n  // Auto focus search input\r\n  const focusSearchInput = useCallback(() => {\r\n    setTimeout(() => {\r\n      if (searchInputRef.current) {\r\n        searchInputRef.current.focus();\r\n      }\r\n    }, 100);\r\n  }, []);\r\n\r\n  // Watch for found pallet and move to confirm step (single mode only)\r\n  React.useEffect(() => {\r\n    if (state.foundPallet && currentStep === 'search' && batchState.mode === 'single') {\r\n      setCurrentStep('confirm');\r\n      // Fetch product description\r\n      getProductByCode(state.foundPallet.product_code)\r\n        .then(result => {\r\n          if (result.success && result.data) {\r\n            setProductDescription(result.data.description);\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error('Failed to fetch product description:', error);\r\n        });\r\n    }\r\n  }, [state.foundPallet, currentStep, batchState.mode]);\r\n\r\n  // Handle batch mode - add found pallet to batch list\r\n  React.useEffect(() => {\r\n    if (state.foundPallet && currentStep === 'search' && batchState.mode === 'batch') {\r\n      // Add to batch list\r\n      addToBatch(searchValue, state.searchType || 'pallet_num').then(success => {\r\n        if (success) {\r\n          showSuccess(`Added ${state.foundPallet?.plt_num} to batch list`);\r\n          // Clear search\r\n          setSearchValue('');\r\n          updateState({ foundPallet: null });\r\n          focusSearchInput();\r\n        }\r\n      });\r\n    }\r\n  }, [\r\n    state.foundPallet,\r\n    currentStep,\r\n    batchState.mode,\r\n    searchValue,\r\n    state.searchType,\r\n    addToBatch,\r\n    updateState,\r\n    focusSearchInput,\r\n    showSuccess,\r\n  ]);\r\n\r\n  // Handle search submission\r\n  const handleSearch = async () => {\r\n    if (!searchValue.trim()) {\r\n      showError('Please enter a Pallet number');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await searchPallet(searchValue.trim(), 'pallet_num');\r\n      // The searchPallet function updates the state directly\r\n      // We'll check if pallet was found after state update\r\n    } catch (error) {\r\n      console.error('Search error:', error);\r\n      showError('An unexpected error occurred during search');\r\n    }\r\n  };\r\n\r\n  // Handle QR scan result\r\n  const handleQrScan = async (qrValue: string) => {\r\n    setShowQrScanner(false);\r\n    setSearchValue(qrValue);\r\n\r\n    try {\r\n      await searchPallet(qrValue, 'qr');\r\n      // The searchPallet function updates the state directly\r\n      // We'll check if pallet was found after state update\r\n    } catch (error) {\r\n      console.error('QR scan error:', error);\r\n      showError('An unexpected error occurred during QR scan');\r\n    }\r\n  };\r\n\r\n  // Handle void submission\r\n  const handleVoidSubmit = async () => {\r\n    if (!state.foundPallet || !state.voidReason || !password) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Call the void action directly with parameters\r\n      const { voidPalletAction, processDamageAction } = await import('@/app/void-pallet/actions');\r\n\r\n      let result;\r\n      if (state.voidReason === 'Damage' && state.damageQuantity > 0) {\r\n        result = await processDamageAction({\r\n          palletInfo: state.foundPallet,\r\n          voidReason: state.voidReason,\r\n          password: password,\r\n          damageQuantity: state.damageQuantity,\r\n        });\r\n      } else {\r\n        result = await voidPalletAction({\r\n          palletInfo: state.foundPallet,\r\n          voidReason: state.voidReason,\r\n          password: password,\r\n        });\r\n      }\r\n\r\n      if (!result) {\r\n        setVoidResult({ success: false, message: 'Void operation failed - no response' });\r\n        setCurrentStep('result');\r\n        return;\r\n      }\r\n\r\n      if (result.success) {\r\n        setVoidResult({\r\n          success: true,\r\n          message: getErrorMessage(result) || 'Pallet void successfully',\r\n          remainingQty: result.remainingQty,\r\n          requiresReprint: result.requiresReprint,\r\n        });\r\n        setCurrentStep('result');\r\n      } else {\r\n        setVoidResult({ success: false, message: result.error || 'Void failed' });\r\n        setCurrentStep('result');\r\n      }\r\n    } catch (error) {\r\n      console.error('Void error:', error);\r\n      setVoidResult({ success: false, message: 'System error occurred' });\r\n      setCurrentStep('result');\r\n    }\r\n  };\r\n\r\n  // Reset to search step\r\n  const resetToSearch = () => {\r\n    setCurrentStep('search');\r\n    setSearchValue('');\r\n    setVoidResult(null);\r\n    setBatchVoidResult(null);\r\n    setProductDescription('');\r\n    setPassword('');\r\n    updateState({ foundPallet: null, voidReason: '', damageQuantity: 0 });\r\n    clearError();\r\n    focusSearchInput();\r\n  };\r\n\r\n  // Handle batch void submission\r\n  const handleBatchVoid = async () => {\r\n    if (!password || batchState.selectedCount === 0) {\r\n      showError('Please select items and enter password');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Process batch with fixed void reason\r\n      const result = await executeBatchVoid({\r\n        voidReason: 'Print Extra Label',\r\n        password: password,\r\n      });\r\n\r\n      if (result.success) {\r\n        setBatchVoidResult({\r\n          total: result.summary?.total || 0,\r\n          successful: result.summary?.successful || 0,\r\n          failed: result.summary?.failed || 0,\r\n          details: batchState.items\r\n            .filter(item => (item as { status: string }).status === 'completed' || (item as { status: string }).status === 'error')\r\n            .map((item: Record<string, unknown>) => ({\r\n              plt_num: item.palletInfo.plt_num,\r\n              success: (item as { status: string }).status === 'completed',\r\n              error: item.error,\r\n            })),\r\n        });\r\n        setCurrentStep('result');\r\n      } else {\r\n        showError('Batch void failed');\r\n      }\r\n    } catch (error: unknown) {\r\n      console.error('Batch void error:', error);\r\n      showError('Batch void failed', error);\r\n    }\r\n  };\r\n\r\n  // Clear error\r\n  const handleClearError = () => {\r\n    clearError();\r\n  };\r\n\r\n  // Render search step\r\n  const renderSearchStep = () => (\r\n    <div className='space-y-4'>\r\n      {/* Mode toggle buttons */}\r\n      <div className='mb-4 flex space-x-2'>\r\n        <button\r\n          onClick={() => {\r\n            toggleMode();\r\n            clearBatch();\r\n            resetToSearch();\r\n          }}\r\n          disabled={isEditMode || batchState.isProcessing}\r\n          className={cn(\r\n            'flex flex-1 items-center justify-center gap-2 rounded-lg px-4 py-2 font-medium transition-colors',\r\n            batchState.mode === 'single'\r\n              ? 'bg-primary text-primary-foreground'\r\n              : 'bg-secondary/50 text-secondary-foreground hover:bg-secondary/70',\r\n            'disabled:cursor-not-allowed disabled:opacity-50'\r\n          )}\r\n        >\r\n          <Package2 className='h-4 w-4' />\r\n          <span>Single Mode</span>\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            toggleMode();\r\n            clearBatch();\r\n            resetToSearch();\r\n          }}\r\n          disabled={isEditMode || batchState.isProcessing}\r\n          className={cn(\r\n            'flex flex-1 items-center justify-center gap-2 rounded-lg px-4 py-2 font-medium transition-colors',\r\n            batchState.mode === 'batch'\r\n              ? 'bg-primary text-primary-foreground'\r\n              : 'bg-secondary/50 text-secondary-foreground hover:bg-secondary/70',\r\n            'disabled:cursor-not-allowed disabled:opacity-50'\r\n          )}\r\n        >\r\n          <List className='h-4 w-4' />\r\n          <span>Batch Mode</span>\r\n        </button>\r\n      </div>\r\n\r\n      <div className={cn('flex flex-col', spacingUtilities.list.container)}>\r\n        <div className='flex gap-2'>\r\n          <div className='relative flex-1'>\r\n            <input\r\n              ref={searchInputRef}\r\n              type='text'\r\n              value={searchValue}\r\n              onChange={e => setSearchValue(e.target.value)}\r\n              placeholder='Enter Pallet number...'\r\n              className={cn(\r\n                'w-full rounded-lg border bg-background px-3 py-2',\r\n                'border-input placeholder:text-muted-foreground',\r\n                'focus:border-primary/50 focus:outline-none',\r\n                textClasses['body-base']\r\n              )}\r\n              disabled={state.isSearching || isEditMode}\r\n            />\r\n            {state.isSearching && (\r\n              <div className='absolute right-3 top-1/2 -translate-y-1/2 transform'>\r\n                <Loader2 className='h-4 w-4 animate-spin text-primary' />\r\n              </div>\r\n            )}\r\n          </div>\r\n          <button\r\n            onClick={handleSearch}\r\n            disabled={state.isSearching || !searchValue.trim() || isEditMode}\r\n            className={cn(\r\n              'flex items-center gap-2 rounded-lg px-4 py-2',\r\n              'bg-primary text-primary-foreground hover:bg-primary/90',\r\n              'disabled:cursor-not-allowed disabled:opacity-50',\r\n              textClasses['label-base']\r\n            )}\r\n          >\r\n            <Search className='h-4 w-4' />\r\n            <span>Search</span>\r\n          </button>\r\n        </div>\r\n\r\n        <button\r\n          onClick={() => setShowQrScanner(true)}\r\n          disabled={isEditMode}\r\n          className={cn(\r\n            'flex w-full items-center justify-center gap-2 rounded-lg px-4 py-2',\r\n            'bg-secondary text-secondary-foreground hover:bg-secondary/80',\r\n            'disabled:cursor-not-allowed disabled:opacity-50',\r\n            textClasses['label-base']\r\n          )}\r\n        >\r\n          <QrCode className='h-4 w-4' />\r\n          <span>QR Scan</span>\r\n        </button>\r\n      </div>\r\n\r\n      {state.error && (\r\n        <WidgetError\r\n          message={(state.error as { message: string }).message}\r\n          severity='error'\r\n          display='inline'\r\n          actions={[\r\n            {\r\n              label: 'Clear error',\r\n              onClick: handleClearError,\r\n              variant: 'ghost',\r\n            },\r\n          ]}\r\n        />\r\n      )}\r\n\r\n      {/* Batch mode list */}\r\n      {batchState.mode === 'batch' && batchState.items.length > 0 && (\r\n        <div className='mt-4'>\r\n          <div className='mb-2 flex items-center justify-between'>\r\n            <h4 className={cn(textClasses['label-large'], 'text-muted-foreground')}>\r\n              Batch List ({batchState.items.length} items, {batchState.selectedCount} selected)\r\n            </h4>\r\n            <button\r\n              onClick={() => setCurrentStep('confirm')}\r\n              disabled={batchState.selectedCount === 0 || isEditMode}\r\n              className={cn(\r\n                'rounded-lg px-4 py-2',\r\n                'bg-primary text-primary-foreground hover:bg-primary/90',\r\n                'disabled:cursor-not-allowed disabled:opacity-50',\r\n                textClasses['label-base']\r\n              )}\r\n            >\r\n              Proceed to Confirm\r\n            </button>\r\n          </div>\r\n          <BatchVoidPanel\r\n            items={batchState.items}\r\n            onSelectItem={(id, selected) => {\r\n              // Toggle selection by updating item\r\n              const item = batchState.items.find(i => i.id === id);\r\n              if (item) {\r\n                item.selected = selected;\r\n              }\r\n            }}\r\n            onSelectAll={selectAllItems}\r\n            onRemoveItem={removeFromBatch}\r\n            onClearAll={clearBatch}\r\n            isProcessing={batchState.isProcessing}\r\n            selectedCount={batchState.selectedCount}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  // Render confirm step\r\n  const renderConfirmStep = () => (\r\n    <div className='space-y-4'>\r\n      {/* Single mode - show pallet information */}\r\n      {batchState.mode === 'single' && state.foundPallet && (\r\n        <div className='rounded-lg border border-border bg-card p-4'>\r\n          <h4 className={cn('mb-3', textClasses['label-large'], 'text-muted-foreground')}>Pallet Information</h4>\r\n          <div className='grid grid-cols-2 gap-4'>\r\n            {/* Row 1 */}\r\n            <div>\r\n              <p className={cn(textClasses['body-base'], 'font-medium')}>{state.foundPallet.plt_num}</p>\r\n              <p className={cn(textClasses['label-small'], 'text-muted-foreground')}>Pallet Number</p>\r\n            </div>\r\n            <div>\r\n              <p className={textClasses['body-base']}>{state.foundPallet.product_code}</p>\r\n              <p className={cn(textClasses['label-small'], 'text-muted-foreground')}>Product Code</p>\r\n            </div>\r\n            {/* Row 2 */}\r\n            <div>\r\n              <p className={textClasses['body-base']}>{productDescription || 'N/A'}</p>\r\n              <p className={cn(textClasses['label-small'], 'text-muted-foreground')}>Product Description</p>\r\n            </div>\r\n            <div>\r\n              <p className={textClasses['body-base']}>{state.foundPallet.product_qty} units</p>\r\n              <p className={cn(textClasses['label-small'], 'text-muted-foreground')}>Quantity on Pallet</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Batch mode - show selected items */}\r\n      {batchState.mode === 'batch' && (\r\n        <div className='rounded-lg border border-slate-700/30 bg-slate-800/30 p-4'>\r\n          <h4 className='mb-3 text-sm font-medium text-gray-400'>\r\n            Batch Void Confirmation ({batchState.selectedCount} items selected)\r\n          </h4>\r\n          <div className='max-h-40 overflow-y-auto'>\r\n            <BatchVoidPanel\r\n              items={batchState.items.filter(item => item.selected)}\r\n              onSelectItem={(id, selected) => {\r\n              // Toggle selection by updating item\r\n              const item = batchState.items.find(i => i.id === id);\r\n              if (item) {\r\n                item.selected = selected;\r\n              }\r\n            }}\r\n              onSelectAll={selectAllItems}\r\n              onRemoveItem={removeFromBatch}\r\n              onClearAll={clearBatch}\r\n              isProcessing={batchState.isProcessing}\r\n              selectedCount={batchState.selectedCount}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Void reason selection */}\r\n      <div className='space-y-2'>\r\n        <label className='text-sm font-medium text-gray-400'>\r\n          Void Reason\r\n          {batchState.mode === 'batch' && (\r\n            <span className='ml-2 text-xs text-blue-400'>\r\n              (Batch mode: fixed to Print Extra Label)\r\n            </span>\r\n          )}\r\n        </label>\r\n        <select\r\n          value={batchState.mode === 'batch' ? 'Print Extra Label' : state.voidReason}\r\n          onChange={e => batchState.mode === 'single' && handleVoidReasonChange(e.target.value)}\r\n          disabled={isEditMode || batchState.mode === 'batch'}\r\n          className={`w-full rounded-lg border border-slate-700/50 bg-slate-800/50 px-3 py-2 text-white focus:border-blue-500/50 focus:outline-none disabled:opacity-50 ${\r\n            batchState.mode === 'batch' ? 'cursor-not-allowed bg-slate-900/50' : ''\r\n          }`}\r\n        >\r\n          <option value=''>Select reason...</option>\r\n          {VOID_REASONS.map((reason: any) => (\r\n            <option key={reason.value} value={reason.value}>\r\n              {reason.label}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      {/* Password input - show only when void reason is selected or in batch mode */}\r\n      {(state.voidReason || batchState.mode === 'batch') && (\r\n        <div className='space-y-2'>\r\n          <label className='text-sm font-medium text-gray-400'>Password</label>\r\n          <input\r\n            type='password'\r\n            value={password}\r\n            onChange={e => setPassword(e.target.value)}\r\n            disabled={isEditMode}\r\n            placeholder='Enter password to confirm...'\r\n            className='w-full rounded-lg border border-slate-700/50 bg-slate-800/50 px-3 py-2 text-white placeholder-gray-400 focus:border-blue-500/50 focus:outline-none disabled:opacity-50'\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      {/* Damage quantity input - only show in single mode */}\r\n      {showDamageQuantityInput && batchState.mode === 'single' && (\r\n        <div className='space-y-2'>\r\n          <label className='text-sm font-medium text-gray-400'>Damage Quantity</label>\r\n          <input\r\n            type='number'\r\n            value={state.damageQuantity}\r\n            onChange={e => handleDamageQuantityChange(parseInt(e.target.value) || 0)}\r\n            disabled={isEditMode}\r\n            className='w-full rounded-lg border border-slate-700/50 bg-slate-800/50 px-3 py-2 text-white focus:border-blue-500/50 focus:outline-none disabled:opacity-50'\r\n            min='0'\r\n            max={state.foundPallet?.product_qty}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      {/* Action buttons */}\r\n      <div className='flex space-x-3'>\r\n        <button\r\n          onClick={resetToSearch}\r\n          disabled={isEditMode}\r\n          className='flex-1 rounded-lg bg-slate-700 px-4 py-2 text-white hover:bg-slate-600 disabled:cursor-not-allowed disabled:opacity-50'\r\n        >\r\n          Back to Search\r\n        </button>\r\n        <button\r\n          onClick={batchState.mode === 'batch' ? handleBatchVoid : handleVoidSubmit}\r\n          disabled={\r\n            batchState.mode === 'batch'\r\n              ? !password || batchState.selectedCount === 0 || batchState.isProcessing || isEditMode\r\n              : !state.voidReason ||\r\n                !password ||\r\n                (showDamageQuantityInput &&\r\n                  (!state.damageQuantity ||\r\n                    state.damageQuantity <= 0 ||\r\n                    state.damageQuantity > (state.foundPallet?.product_qty || 0))) ||\r\n                state.isProcessing ||\r\n                isEditMode\r\n          }\r\n          className='flex flex-1 items-center justify-center space-x-2 rounded-lg bg-red-600 px-4 py-2 text-white hover:bg-red-700 disabled:cursor-not-allowed disabled:opacity-50'\r\n        >\r\n          {state.isProcessing || batchState.isProcessing ? (\r\n            <>\r\n              <Loader2 className='h-4 w-4 animate-spin' />\r\n              <span>Processing...</span>\r\n            </>\r\n          ) : (\r\n            <span>\r\n              {batchState.mode === 'batch'\r\n                ? `Confirm Batch Void (${batchState.selectedCount} items)`\r\n                : 'Confirm Void'}\r\n            </span>\r\n          )}\r\n        </button>\r\n      </div>\r\n\r\n      {state.error && (\r\n        <WidgetError\r\n          message={(state.error as { message: string }).message}\r\n          severity='error'\r\n          display='inline'\r\n          actions={[\r\n            {\r\n              label: 'Clear error',\r\n              onClick: handleClearError,\r\n              variant: 'ghost',\r\n            },\r\n          ]}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  // Render result step\r\n  const renderResultStep = () => {\r\n    // Batch mode result\r\n    if (batchState.mode === 'batch' && batchVoidResult) {\r\n      return (\r\n        <div className='space-y-4'>\r\n          <div\r\n            className={`mx-auto flex h-16 w-16 items-center justify-center rounded-full ${\r\n              batchVoidResult.failed === 0\r\n                ? 'border border-green-700/50 bg-green-900/50'\r\n                : 'border border-yellow-700/50 bg-yellow-900/50'\r\n            }`}\r\n          >\r\n            {batchVoidResult.failed === 0 ? (\r\n              <CheckCircle className='h-8 w-8 text-green-400' />\r\n            ) : (\r\n              <AlertCircle className='h-8 w-8 text-yellow-400' />\r\n            )}\r\n          </div>\r\n\r\n          <div className='text-center'>\r\n            <h4 className='text-lg font-medium text-white'>Batch Void Complete</h4>\r\n            <p className='mt-1 text-sm text-gray-400'>\r\n              Total: {batchVoidResult.total} | Success: {batchVoidResult.successful} | Failed:{' '}\r\n              {batchVoidResult.failed}\r\n            </p>\r\n          </div>\r\n\r\n          {/* Show failed items if any */}\r\n          {batchVoidResult.failed > 0 && (\r\n            <WidgetError\r\n              message='Failed Items'\r\n              severity='error'\r\n              display='inline'\r\n              error={new Error(\r\n                batchVoidResult.details\r\n                  .filter(item => !item.success)\r\n                  .map((item: Record<string, unknown>) => `${item.plt_num}: ${item.error}`)\r\n                  .join('\\n')\r\n              )}\r\n            />\r\n          )}\r\n\r\n          <button\r\n            onClick={() => {\r\n              clearBatch();\r\n              resetToSearch();\r\n            }}\r\n            className='w-full rounded-lg bg-blue-600 px-6 py-2 text-white hover:bg-blue-700'\r\n          >\r\n            Continue\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // Single mode result\r\n    return (\r\n      <div className='space-y-4 text-center'>\r\n        <div\r\n          className={`mx-auto flex h-16 w-16 items-center justify-center rounded-full ${\r\n            voidResult?.success\r\n              ? 'border border-green-700/50 bg-green-900/50'\r\n              : 'border border-red-700/50 bg-red-900/50'\r\n          }`}\r\n        >\r\n          {voidResult?.success ? (\r\n            <CheckCircle className='h-8 w-8 text-green-400' />\r\n          ) : (\r\n            <X className='h-8 w-8 text-red-400' />\r\n          )}\r\n        </div>\r\n\r\n        <div>\r\n          <h4\r\n            className={`text-lg font-medium ${\r\n              voidResult?.success ? 'text-green-400' : 'text-red-400'\r\n            }`}\r\n          >\r\n            {voidResult?.success ? 'Success' : 'Failed'}\r\n          </h4>\r\n          <p className='mt-1 text-sm text-gray-400'>{voidResult?.message}</p>\r\n        </div>\r\n\r\n        <div className='flex flex-col space-y-3'>\r\n          {voidResult?.requiresReprint &&\r\n            voidResult?.remainingQty &&\r\n            voidResult?.remainingQty > 0 && (\r\n              <button\r\n                onClick={async () => {\r\n                  // Use auto-reprint functionality\r\n                  if (state.foundPallet) {\r\n                    let dismiss: (() => void) | undefined;\r\n                    try {\r\n                      dismiss = showLoading('Processing reprint...');\r\n\r\n                      // Get current user clock number\r\n                      const { getCurrentUserClockNumberAsync } = await import(\r\n                        '@/app/hooks/useAuth'\r\n                      );\r\n                      const clockNumber = await getCurrentUserClockNumberAsync();\r\n\r\n                      if (!clockNumber || clockNumber === 'unknown') {\r\n                        throw new Error('Unable to get user information. Please login again.');\r\n                      }\r\n\r\n                      // Call auto-reprint API\r\n                      const response = await fetch('/api/auto-reprint-label-v2', {\r\n                        method: 'POST',\r\n                        headers: {\r\n                          'Content-Type': 'application/json',\r\n                        },\r\n                        body: JSON.stringify({\r\n                          productCode: state.foundPallet.product_code,\r\n                          quantity: voidResult.remainingQty,\r\n                          originalPltNum: state.foundPallet.plt_num,\r\n                          originalLocation: state.foundPallet.plt_loc || 'Pipeline',\r\n                          sourceAction: 'void_damage',\r\n                          targetLocation: state.foundPallet.plt_loc || 'Pipeline',\r\n                          reason: state.voidReason,\r\n                          operatorClockNum: clockNumber,\r\n                        }),\r\n                      });\r\n\r\n                      if (!response.ok) {\r\n                        const errorText = await response.text();\r\n                        console.error('Reprint API error:', errorText);\r\n\r\n                        // Check for duplicate pallet number error\r\n                        if (errorText.includes('already exists')) {\r\n                          throw new Error('Duplicate pallet number detected. Please try again.');\r\n                        }\r\n                        throw new Error('Reprint failed. Please try again.');\r\n                      }\r\n\r\n                      const result = await response.json();\r\n                      if (result.success) {\r\n                        dismiss();\r\n\r\n                        // Generate and print PDF\r\n                        try {\r\n                          const { prepareQcLabelData, mergeAndPrintPdfs } = await import(\r\n                            '@/lib/pdfUtils'\r\n                          );\r\n                          const { renderReactPDFToBlob } = await import('@/lib/services/unified-pdf-service');\r\n                          const { PrintLabelPdf } = await import(\r\n                            '@/components/print-label-pdf/PrintLabelPdf'\r\n                          );\r\n\r\n                          // Prepare PDF data\r\n                          const pdfLabelProps = await prepareQcLabelData(result.data.qcInputData);\r\n\r\n                          // Generate PDF blob\r\n                          const pdfBlob = await renderReactPDFToBlob(<PrintLabelPdf {...pdfLabelProps} />);\r\n\r\n                          if (!pdfBlob) {\r\n                            throw new Error('PDF generation failed');\r\n                          }\r\n\r\n                          // Convert blob to ArrayBuffer for printing\r\n                          const pdfArrayBuffer = await pdfBlob.arrayBuffer();\r\n\r\n                          // Auto-print the PDF\r\n                          await mergeAndPrintPdfs([pdfArrayBuffer], result.data.fileName);\r\n\r\n                          showSuccess(\r\n                            `New pallet ${result.data.newPalletNumber} created and sent to printer`\r\n                          );\r\n                        } catch (printError: unknown) {\r\n                          console.error('Print error:', printError);\r\n                          showWarning(\r\n                            `New pallet ${result.data.newPalletNumber} created but printing failed. Please print manually.`\r\n                          );\r\n                        }\r\n\r\n                        resetToSearch();\r\n                      } else {\r\n                        // Check for specific error types\r\n                        if (result.error && result.error.includes('already exists')) {\r\n                          throw new Error('Duplicate pallet number detected. Please try again.');\r\n                        }\r\n                        throw new Error(result.error || 'Reprint failed');\r\n                      }\r\n                    } catch (error: unknown) {\r\n                      if (dismiss) dismiss();\r\n                      showError(`Reprint failed: ${getErrorMessage(error)}`);\r\n                    }\r\n                  }\r\n                }}\r\n                disabled={isEditMode}\r\n                className='rounded-lg bg-green-600 px-6 py-2 text-white hover:bg-green-700 disabled:cursor-not-allowed disabled:opacity-50'\r\n              >\r\n                Reprint Label ({voidResult.remainingQty} units)\r\n              </button>\r\n            )}\r\n          <button\r\n            onClick={resetToSearch}\r\n            disabled={isEditMode}\r\n            className='rounded-lg bg-blue-600 px-6 py-2 text-white hover:bg-blue-700 disabled:cursor-not-allowed disabled:opacity-50'\r\n          >\r\n            Continue\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className='h-full'>\r\n      <WidgetCard widgetType='VOID_PALLET' isEditMode={isEditMode}>\r\n        <CardHeader className='pb-3'>\r\n          <CardTitle className='widget-title'>Void Pallet</CardTitle>\r\n        </CardHeader>\r\n        <CardContent className='p-6'>\r\n          {/* Step indicator */}\r\n          <div className='mb-6 flex items-center justify-center space-x-4'>\r\n            <div\r\n              className={`flex items-center space-x-2 ${\r\n                currentStep === 'search'\r\n                  ? 'text-blue-400'\r\n                  : currentStep === 'confirm' || currentStep === 'result'\r\n                    ? 'text-green-400'\r\n                    : 'text-gray-500'\r\n              }`}\r\n            >\r\n              <div\r\n                className={`flex h-6 w-6 items-center justify-center rounded-full border text-xs font-medium ${\r\n                  currentStep === 'search'\r\n                    ? 'border-blue-500 bg-blue-600'\r\n                    : currentStep === 'confirm' || currentStep === 'result'\r\n                      ? 'border-green-500 bg-green-600'\r\n                      : 'border-gray-500 bg-gray-600'\r\n                }`}\r\n              >\r\n                1\r\n              </div>\r\n              <span className='text-sm'>Search</span>\r\n            </div>\r\n\r\n            <div\r\n              className={`h-px w-8 ${\r\n                currentStep === 'confirm' || currentStep === 'result'\r\n                  ? 'bg-green-500'\r\n                  : 'bg-gray-600'\r\n              }`}\r\n            />\r\n\r\n            <div\r\n              className={`flex items-center space-x-2 ${\r\n                currentStep === 'confirm'\r\n                  ? 'text-blue-400'\r\n                  : currentStep === 'result'\r\n                    ? 'text-green-400'\r\n                    : 'text-gray-500'\r\n              }`}\r\n            >\r\n              <div\r\n                className={`flex h-6 w-6 items-center justify-center rounded-full border text-xs font-medium ${\r\n                  currentStep === 'confirm'\r\n                    ? 'border-blue-500 bg-blue-600'\r\n                    : currentStep === 'result'\r\n                      ? 'border-green-500 bg-green-600'\r\n                      : 'border-gray-500 bg-gray-600'\r\n                }`}\r\n              >\r\n                2\r\n              </div>\r\n              <span className='text-sm'>Confirm</span>\r\n            </div>\r\n\r\n            <div\r\n              className={`h-px w-8 ${currentStep === 'result' ? 'bg-green-500' : 'bg-gray-600'}`}\r\n            />\r\n\r\n            <div\r\n              className={`flex items-center space-x-2 ${\r\n                currentStep === 'result' ? 'text-blue-400' : 'text-gray-500'\r\n              }`}\r\n            >\r\n              <div\r\n                className={`flex h-6 w-6 items-center justify-center rounded-full border text-xs font-medium ${\r\n                  currentStep === 'result'\r\n                    ? 'border-blue-500 bg-blue-600'\r\n                    : 'border-gray-500 bg-gray-600'\r\n                }`}\r\n              >\r\n                3\r\n              </div>\r\n              <span className='text-sm'>Result</span>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Step content */}\r\n          <div className='flex-1'>\r\n            {currentStep === 'search' && renderSearchStep()}\r\n            {currentStep === 'confirm' && renderConfirmStep()}\r\n            {currentStep === 'result' && renderResultStep()}\r\n          </div>\r\n        </CardContent>\r\n      </WidgetCard>\r\n\r\n      {/* QR Scanner */}\r\n      {showQrScanner && (\r\n        <SimpleQRScanner\r\n          open={showQrScanner}\r\n          onClose={() => setShowQrScanner(false)}\r\n          onScan={handleQrScan}\r\n          title='Scan Pallet QR Code'\r\n        />\r\n      )}\r\n    </motion.div>\r\n  );\r\n});\r\n\r\nexport default VoidPalletWidget;\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/WarehouseTransferListWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2676,2679],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2676,2679],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":144,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4434,4437],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4434,4437],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Warehouse Transfer List Widget - REST API Version\r\n * 列表形式顯示 record_transfer 內容\r\n * 只需顯示 \"time\", \"pallet number\", \"operator\"\r\n * 只顯示 operator department = \"Warehouse\" 的記錄\r\n *\r\n * Features:\r\n * - 使用 REST API 進行數據獲取\r\n * - Progressive Loading with useInViewport\r\n * - 保留 DataTable 實現和固定 50 筆記錄設計\r\n * - 保留日期範圍過濾和部門過濾功能\r\n * - 保留性能指標顯示\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useMemo, useRef, useState, useEffect, useCallback } from 'react';\r\nimport { DocumentTextIcon } from '@heroicons/react/24/outline';\r\nimport { WidgetComponentProps } from '@/app/types/dashboard';\r\nimport { format, parseISO } from 'date-fns';\r\nimport { Clock, Box, User } from 'lucide-react';\r\nimport { DataTable, DataTableColumn } from './common/data-display/DataTable';\r\nimport { useWidgetDateRange } from './common/filters/DateRangeFilter';\r\nimport { useInViewport } from '@/app/admin/hooks/useInViewport';\r\n\r\ninterface TransferRecord {\r\n  tran_date: string;\r\n  plt_num: string;\r\n  operator_name: string;\r\n}\r\n\r\n// REST API client for warehouse transfers\r\nconst warehouseTransferApiClient = {\r\n  async getTransferList(params: {\r\n    startDate?: string;\r\n    endDate?: string;\r\n    fromLocation?: string;\r\n    toLocation?: string;\r\n    status?: string;\r\n    offset?: number;\r\n    limit?: number;\r\n  }): Promise<{ transfers: Record<string, unknown>[], total_records: number }> {\r\n    const url = new URL('/api/v1/warehouse-transfers/list', window.location.origin);\r\n    \r\n    Object.entries(params).forEach(([key, value]) => {\r\n      if (value !== undefined && value !== null) {\r\n        url.searchParams.append(key, value.toString());\r\n      }\r\n    });\r\n    \r\n    const response = await fetch(url.toString(), {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch warehouse transfers: ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return {\r\n      transfers: data.transfers || [],\r\n      total_records: data.total_records || 0,\r\n    };\r\n  },\r\n};\r\n\r\nexport const WarehouseTransferListWidget = React.memo(function WarehouseTransferListWidget({\r\n  widget,\r\n  isEditMode,\r\n  timeFrame,\r\n}: WidgetComponentProps) {\r\n  const widgetRef = useRef<HTMLDivElement>(null);\r\n  \r\n  // 使用通用 hook 處理日期範圍\r\n  const dateRange = useWidgetDateRange(timeFrame, 'yesterday');\r\n  \r\n  // Progressive Loading - 檢測 widget 是否在視窗內\r\n  const { isInViewport, hasBeenInViewport } = useInViewport(widgetRef, {\r\n    threshold: 0.1,\r\n    triggerOnce: true, // 只加載一次\r\n    rootMargin: '50px', // 提前 50px 開始加載\r\n  });\r\n\r\n  // State management\r\n  const [data, setData] = useState<any[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [performanceMetrics, setPerformanceMetrics] = useState<{\r\n    lastFetchTime?: number;\r\n    mode?: string;\r\n    optimized?: boolean;\r\n  }>({});\r\n\r\n  // 準備 API parameters\r\n  const apiParams = useMemo(() => ({\r\n    startDate: dateRange.start.toISOString(),\r\n    endDate: dateRange.end.toISOString(),\r\n    limit: 50,\r\n    offset: 0,\r\n  }), [dateRange]);\r\n\r\n  // Fetch data function\r\n  const fetchData = useCallback(async () => {\r\n    if (isEditMode || !hasBeenInViewport) return;\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const startTime = performance.now();\r\n      const result = await warehouseTransferApiClient.getTransferList(apiParams);\r\n      const endTime = performance.now();\r\n\r\n      setData(result.transfers);\r\n      setPerformanceMetrics({\r\n        lastFetchTime: Math.round(endTime - startTime),\r\n        mode: 'REST API',\r\n        optimized: true,\r\n      });\r\n    } catch (err) {\r\n      console.error('[WarehouseTransferListWidget as string] Error fetching data:', err);\r\n      setError(err instanceof Error ? (err as { message: string }).message : 'Failed to fetch warehouse transfers');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [isEditMode, hasBeenInViewport, apiParams]);\r\n\r\n  // Initial data fetch and periodic refresh\r\n  useEffect(() => {\r\n    fetchData();\r\n\r\n    // Set up polling every 60 seconds\r\n    const interval = setInterval(fetchData, 60000);\r\n    return () => clearInterval(interval);\r\n  }, [fetchData]);\r\n\r\n  // 處理數據格式\r\n  const transfers = useMemo<TransferRecord[]>(() => {\r\n    if (!data || !Array.isArray(data)) return [];\r\n    \r\n    return data.map((transfer: any) => ({\r\n      tran_date: transfer.transfer_date || transfer.tran_date || new Date().toISOString(),\r\n      plt_num: transfer.pallet_ref || transfer.plt_num || 'N/A',\r\n      operator_name: transfer.transferred_by || transfer.operator_name || 'Unknown Operator',\r\n    }));\r\n  }, [data]);\r\n\r\n  // 定義 DataTable columns\r\n  const columns = useMemo<DataTableColumn<TransferRecord>[]>(() => [\r\n    {\r\n      key: 'tran_date',\r\n      header: 'Time',\r\n      icon: Clock,\r\n      width: '33%',\r\n      render: (value) => {\r\n        try {\r\n          return format(parseISO(value), 'HH:mm:ss');\r\n        } catch {\r\n          return 'Invalid Date';\r\n        }\r\n      },\r\n      className: 'font-medium text-slate-300',\r\n    },\r\n    {\r\n      key: 'plt_num',\r\n      header: 'Pallet Number',\r\n      icon: Box,\r\n      width: '33%',\r\n      className: 'font-medium text-white',\r\n    },\r\n    {\r\n      key: 'operator_name',\r\n      header: 'Operator',\r\n      icon: User,\r\n      width: '34%',\r\n      className: 'font-medium text-slate-300',\r\n    },\r\n  ], []);\r\n\r\n  // Edit mode - 顯示空白狀態\r\n  if (isEditMode) {\r\n    return (\r\n      <div ref={widgetRef}>\r\n        <DataTable\r\n          title=\"Warehouse Transfers\"\r\n          icon={DocumentTextIcon}\r\n          iconColor=\"from-blue-500 to-cyan-500\"\r\n          data={[]}\r\n          columns={columns}\r\n          loading={false}\r\n          error={null}\r\n          emptyMessage=\"Configure warehouse transfer tracking\"\r\n          pagination={{ enabled: false }}\r\n          onRetry={() => {}}\r\n          performanceMetrics={{\r\n            mode: 'Edit Mode',\r\n            optimized: false,\r\n          }}\r\n          className=\"h-full\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Progressive Loading - 如果未進入視窗，顯示 skeleton\r\n  if (!hasBeenInViewport) {\r\n    return (\r\n      <div ref={widgetRef}>\r\n        <DataTable\r\n          title=\"Warehouse Transfers\"\r\n          icon={DocumentTextIcon}\r\n          iconColor=\"from-blue-500 to-cyan-500\"\r\n          data={[]}\r\n          columns={columns}\r\n          loading={true}\r\n          error={null}\r\n          emptyMessage=\"Loading warehouse transfers...\"\r\n          pagination={{ enabled: false }}\r\n          onRetry={() => {}}\r\n          performanceMetrics={{\r\n            mode: 'Progressive Loading',\r\n            optimized: false,\r\n          }}\r\n          className=\"h-full\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div ref={widgetRef}>\r\n      <DataTable\r\n        title=\"Warehouse Transfers\"\r\n        icon={DocumentTextIcon}\r\n        iconColor=\"from-blue-500 to-cyan-500\"\r\n        data={transfers}\r\n        columns={columns}\r\n        loading={loading}\r\n        error={error ? new Error(error) : null}\r\n        emptyMessage=\"No warehouse transfers found\"\r\n        pagination={{ enabled: false }}\r\n        onRetry={fetchData}\r\n        performanceMetrics={performanceMetrics}\r\n        className=\"h-full\"\r\n      />\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default WarehouseTransferListWidget;","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/WarehouseWorkLevelAreaChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":214,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":214,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7981,7984],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7981,7984],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":214,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":214,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7993,7996],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7993,7996],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useMemo, useEffect, useState } from 'react';\r\nimport { CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { UniversalWidgetCard as WidgetCard } from '../UniversalWidgetCard';\r\nimport { ChartBarIcon } from '@heroicons/react/24/outline';\r\nimport { WidgetComponentProps } from '@/app/types/dashboard';\r\nimport { motion } from 'framer-motion';\r\nimport {\r\n  AreaChart,\r\n  Area,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from 'recharts';\r\nimport { format, startOfDay } from 'date-fns';\r\nimport { getYesterdayRange } from '@/app/utils/timezone';\r\nimport { WidgetStyles } from '@/app/utils/widgetStyles';\r\nimport { createDashboardAPIClient as createDashboardAPI } from '@/lib/api/admin/DashboardAPI.client';\r\n// Note: Migrated to REST API - GraphQL hooks removed\r\nimport { WidgetSkeleton } from './common/WidgetStates';\r\nimport { \r\n  brandColors, \r\n  widgetColors, \r\n  semanticColors,\r\n  getWidgetCategoryColor \r\n} from '@/lib/design-system/colors';\r\nimport { textClasses, getTextClass } from '@/lib/design-system/typography';\r\nimport { spacing, widgetSpacing, spacingUtilities } from '@/lib/design-system/spacing';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface WorkLevelData {\r\n  date: string;\r\n  value: number;\r\n  fullDate?: string;\r\n}\r\n\r\ninterface WorkLevelStats {\r\n  dailyStats: WorkLevelData[];\r\n  totalMoves: number;\r\n  uniqueOperators: number;\r\n  avgMovesPerDay: number;\r\n  peakDay?: string;\r\n  optimized?: boolean;\r\n  calculationTime?: string;\r\n}\r\n\r\nexport const WarehouseWorkLevelAreaChart = React.memo(function WarehouseWorkLevelAreaChart({\r\n  widget,\r\n  isEditMode,\r\n  timeFrame,\r\n}: WidgetComponentProps) {\r\n  const [performanceMetrics, setPerformanceMetrics] = useState<{\r\n    fetchTime: number;\r\n    cacheHit: boolean;\r\n  } | null>(null);\r\n\r\n  // 根據 timeFrame 設定查詢時間範圍\r\n  const dateRange = useMemo(() => {\r\n    if (!timeFrame) {\r\n      const range = getYesterdayRange();\r\n      return {\r\n        start: new Date(range.start),\r\n        end: new Date(range.end),\r\n      };\r\n    }\r\n    return {\r\n      start: timeFrame.start,\r\n      end: timeFrame.end,\r\n    };\r\n  }, [timeFrame]);\r\n\r\n  // GraphQL 已遷移到 REST API - 使用 Server Actions\r\n  const useGraphQL = false; // 禁用 GraphQL\r\n\r\n  // Server Actions fallback\r\n  const [serverActionsData, setServerActionsData] = useState<WorkLevelStats>({\r\n    dailyStats: [],\r\n    totalMoves: 0,\r\n    uniqueOperators: 0,\r\n    avgMovesPerDay: 0,\r\n  });\r\n  const [serverActionsLoading, setServerActionsLoading] = useState(!useGraphQL);\r\n  const [serverActionsError, setServerActionsError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (useGraphQL || isEditMode) return;\r\n\r\n    const fetchData = async () => {\r\n      setServerActionsLoading(true);\r\n      setServerActionsError(null);\r\n      const fetchStartTime = performance.now();\r\n\r\n      try {\r\n        // Use optimized DashboardAPI with server-side JOIN and filtering\r\n        const dashboardAPI = createDashboardAPI();\r\n        const dashboardResult = await dashboardAPI.fetch(\r\n          {\r\n            widgetIds: ['warehouse_work_level'],\r\n            dateRange: {\r\n              start: dateRange.start.toISOString(),\r\n              end: dateRange.end.toISOString(),\r\n            },\r\n          },\r\n          {\r\n            strategy: 'client', // Force client strategy for client components\r\n            cache: { ttl: 180 }, // 3-minute cache for work level analysis\r\n          }\r\n        );\r\n\r\n        const fetchTime = performance.now() - fetchStartTime;\r\n\r\n        // Extract widget data\r\n        const widgetData = dashboardResult.widgets?.find(\r\n          w => w.widgetId === 'warehouse_work_level'\r\n        );\r\n\r\n        if (widgetData && !widgetData.data.error) {\r\n          const dailyStats = widgetData.data.value || [];\r\n\r\n          setServerActionsData({\r\n            dailyStats,\r\n            totalMoves: widgetData.data.metadata?.totalMoves || 0,\r\n            uniqueOperators: widgetData.data.metadata?.uniqueOperators || 0,\r\n            avgMovesPerDay: widgetData.data.metadata?.avgMovesPerDay || 0,\r\n            peakDay: widgetData.data.metadata?.peakDay,\r\n            optimized: widgetData.data.metadata?.optimized,\r\n            calculationTime: widgetData.data.metadata?.calculationTime,\r\n          });\r\n\r\n          setPerformanceMetrics({\r\n            fetchTime,\r\n            cacheHit: dashboardResult.metadata?.cacheHit || false,\r\n          });\r\n        } else {\r\n          throw new Error(widgetData?.data.error || 'No data received');\r\n        }\r\n\r\n        setServerActionsError(null);\r\n      } catch (err) {\r\n        console.error('Error fetching warehouse work level:', err);\r\n        setServerActionsError(err instanceof Error ? (err as { message: string }).message : 'Unknown error');\r\n      } finally {\r\n        setServerActionsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [dateRange, useGraphQL, isEditMode]);\r\n\r\n  // 使用 Server Actions 數據 (GraphQL 已移除)\r\n  const data = serverActionsData;\r\n  const loading = serverActionsLoading;\r\n  const error = serverActionsError ? new Error(serverActionsError) : null;\r\n\r\n  if (isEditMode) {\r\n    return (\r\n      <WidgetCard widgetType={widget?.type?.toUpperCase() as keyof typeof WidgetStyles.borders || 'DEFAULT'} isEditMode={true}>\r\n        <div className='flex h-full items-center justify-center'>\r\n          <p className='font-medium text-slate-400'>Warehouse Work Level Chart</p>\r\n        </div>\r\n      </WidgetCard>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <WidgetCard widgetType={widget?.type?.toUpperCase() as keyof typeof WidgetStyles.borders || 'DEFAULT'}>\r\n      <CardHeader className='pb-2'>\r\n        <CardTitle className='widget-title flex items-center gap-2'>\r\n          <ChartBarIcon className='h-5 w-5' />\r\n          Warehouse Work Level\r\n        </CardTitle>\r\n        <p className={cn('mt-1', textClasses['label-small'], 'text-muted-foreground')}>\r\n          From {format(dateRange.start, 'MMM d')} to {format(dateRange.end, 'MMM d')}\r\n        </p>\r\n      </CardHeader>\r\n      <CardContent className='flex-1'>\r\n        {loading ? (\r\n          <WidgetSkeleton type=\"chart-area\" height={200} />\r\n        ) : error ? (\r\n          <div className={cn('text-center', textClasses['body-small'])} style={{ color: semanticColors.destructive.DEFAULT }}>\r\n            <p>Error loading data</p>\r\n            <p className={cn('mt-1', textClasses['label-small'])}>{(error as { message: string }).message}</p>\r\n          </div>\r\n        ) : data.dailyStats.length === 0 ? (\r\n          <div className={cn('py-8 text-center font-medium', textClasses['body-base'], 'text-muted-foreground')}>\r\n            <ChartBarIcon className='mx-auto mb-2 h-12 w-12 opacity-50' />\r\n            <p>No work level data found</p>\r\n          </div>\r\n        ) : (\r\n          <motion.div\r\n            initial={{ opacity: 0, scale: 0.95 }}\r\n            animate={{ opacity: 1, scale: 1 }}\r\n            transition={{ duration: 0.3 }}\r\n            className='h-full'\r\n          >\r\n            <div className='relative h-full'>\r\n              <ResponsiveContainer width='100%' height='100%'>\r\n                <AreaChart data={data.dailyStats} margin={{ top: 5, right: 5, left: 5, bottom: 5 }}>\r\n                  <CartesianGrid strokeDasharray='3 3' stroke={widgetColors.charts.grid} />\r\n                  <XAxis dataKey='date' stroke={widgetColors.charts.grid} fontSize={11} />\r\n                  <YAxis stroke={widgetColors.charts.grid} fontSize={11} width={30} />\r\n                  <Tooltip\r\n                    contentStyle={{\r\n                      backgroundColor: 'hsl(var(--card))',\r\n                      border: '1px solid hsl(var(--border))',\r\n                      borderRadius: '8px',\r\n                      fontSize: '12px',\r\n                      color: 'hsl(var(--foreground))',\r\n                    }}\r\n                    labelFormatter={label => `Date: ${label}`}\r\n                    formatter={(value: unknown, name: any, props: any) => [\r\n                      `${value} moves`,\r\n                      'Total Moves',\r\n                    ]}\r\n                  />\r\n                  <Area\r\n                    type='monotone'\r\n                    dataKey='value'\r\n                    stroke={widgetColors.charts.primary}\r\n                    fill={widgetColors.charts.primary}\r\n                    fillOpacity={0.3}\r\n                    strokeWidth={2}\r\n                  />\r\n                </AreaChart>\r\n              </ResponsiveContainer>\r\n\r\n              {/* Performance and metadata indicators */}\r\n              {data.optimized && (\r\n                <div className={cn(\r\n                  'absolute right-2 top-2 flex items-center gap-2',\r\n                  textClasses['label-small']\r\n                )} style={{ color: semanticColors.info.DEFAULT }}>\r\n                  <span>⚡</span>\r\n                  <span>{useGraphQL ? 'GraphQL' : 'Optimized'}</span>\r\n                  {performanceMetrics && !useGraphQL && (\r\n                    <span className='ml-1'>({performanceMetrics.fetchTime.toFixed(0)}ms)</span>\r\n                  )}\r\n                </div>\r\n              )}\r\n\r\n              {/* Summary stats */}\r\n              <div className={cn(\r\n                'absolute bottom-2 left-2 space-y-0.5',\r\n                textClasses['label-small'],\r\n                'text-muted-foreground'\r\n              )}>\r\n                <div>Total: {data.totalMoves.toLocaleString()} moves</div>\r\n                <div>{data.uniqueOperators} operators</div>\r\n                {data.peakDay && <div>Peak: {data.peakDay}</div>}\r\n              </div>\r\n\r\n              {data.avgMovesPerDay > 0 && (\r\n                <div className={cn(\r\n                  'absolute bottom-2 right-2',\r\n                  textClasses['label-small'],\r\n                  'text-muted-foreground'\r\n                )}>\r\n                  Avg: {data.avgMovesPerDay.toFixed(0)} moves/day\r\n                </div>\r\n              )}\r\n            </div>\r\n          </motion.div>\r\n        )}\r\n      </CardContent>\r\n    </WidgetCard>\r\n  );\r\n});\r\n\r\nexport default WarehouseWorkLevelAreaChart;\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/YesterdayTransferCountWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2907,2910],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2907,2910],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Yesterday Transfer Count Widget\r\n * 顯示昨天 transfer done 的總數\r\n * 支援頁面的 time frame selector\r\n * \r\n * 已優化為使用批量查詢系統和 MetricCard 通用組件\r\n * - 從 DashboardDataContext 獲取數據\r\n * - 使用 MetricCard 統一顯示邏輯\r\n * - 減少代碼重複，提高維護性\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useMemo } from 'react';\r\nimport { TruckIcon } from '@heroicons/react/24/outline';\r\nimport { WidgetComponentProps } from '@/app/types/dashboard';\r\nimport { format } from 'date-fns';\r\nimport { useWidgetData } from '@/app/admin/contexts/DashboardDataContext';\r\nimport { MetricCard } from './common/data-display/MetricCard';\r\n\r\ninterface TransferCountData {\r\n  count: number;\r\n  trend: number;\r\n  dateRange: {\r\n    start: string;\r\n    end: string;\r\n  };\r\n  optimized?: boolean;\r\n}\r\n\r\nconst YesterdayTransferCountWidget = React.memo(function YesterdayTransferCountWidget({\r\n  widget,\r\n  widgetId,\r\n  isEditMode,\r\n  timeFrame,\r\n}: WidgetComponentProps) {\r\n  // 使用批量查詢系統獲取數據\r\n  const queryKey = widgetId || 'yesterdayTransferCount';\r\n  const { data: widgetData, loading, error, refetch } = useWidgetData<TransferCountData>(queryKey);\r\n  \r\n  // 格式化顯示數據\r\n  const displayData = useMemo(() => {\r\n    if (!widgetData) {\r\n      return {\r\n        count: 0,\r\n        trend: 0,\r\n        dateRange: {\r\n          start: timeFrame?.start.toISOString() || new Date().toISOString(),\r\n          end: timeFrame?.end.toISOString() || new Date().toISOString()\r\n        },\r\n        optimized: false\r\n      };\r\n    }\r\n    \r\n    return {\r\n      count: widgetData.count || 0,\r\n      trend: widgetData.trend || 0,\r\n      dateRange: widgetData.dateRange || {\r\n        start: timeFrame?.start.toISOString() || new Date().toISOString(),\r\n        end: timeFrame?.end.toISOString() || new Date().toISOString()\r\n      },\r\n      optimized: widgetData.optimized || false\r\n    };\r\n  }, [widgetData, timeFrame]);\r\n\r\n  // 計算 trend 方向\r\n  const trendDirection = displayData.trend > 0 ? 'up' : displayData.trend < 0 ? 'down' : 'neutral';\r\n\r\n  // 格式化日期範圍\r\n  const dateRangeText = `${format(new Date(displayData.dateRange.start), 'MMM d')} to ${format(new Date(displayData.dateRange.end), 'MMM d')}`;\r\n\r\n  if (isEditMode) {\r\n    return (\r\n      <MetricCard\r\n        title=\"Transfer Done\"\r\n        value={0}\r\n        label=\"Total Transfers\"\r\n        icon={TruckIcon}\r\n        isEditMode={true}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <MetricCard\r\n      title=\"Transfer Done\"\r\n      value={displayData.count}\r\n      label=\"Total Transfers\"\r\n      icon={TruckIcon}\r\n      trend={trendDirection}\r\n      trendValue={`${Math.abs(displayData.trend).toFixed(1)}%`}\r\n      trendLabel=\"vs Today\"\r\n      dateRange={dateRangeText}\r\n      performanceMetrics={displayData.optimized ? {\r\n        source: 'Batch',\r\n        optimized: true\r\n      } : undefined}\r\n      loading={loading}\r\n      error={error}\r\n      onRetry={refetch}\r\n      animateOnMount={true}\r\n      widgetType={widget?.type.toUpperCase() as any}\r\n    />\r\n  );\r\n});\r\n\r\nexport default YesterdayTransferCountWidget;\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/__tests__/unified/UnifiedChartWidget.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/__tests__/unified/UnifiedStatsWidget.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/__tests__/unified/UnifiedTableWidget.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/__tests__/unified/index.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/__tests__/unified/test-utils.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/common/WidgetStates.example.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[713,716],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[713,716],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * WidgetStates Usage Examples\r\n * 展示如何在 widgets 中使用通用狀態組件\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport {\r\n  WidgetSkeleton,\r\n  WidgetError,\r\n  WidgetEmpty,\r\n  WidgetLoadingOverlay,\r\n  WidgetStateWrapper,\r\n} from './WidgetStates';\r\nimport { Button } from '@/components/ui/button';\r\n\r\n// ================================\r\n// Example 1: 使用 WidgetStateWrapper (推薦)\r\n// ================================\r\n\r\nexport function ExampleWidgetWithStateWrapper() {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<Error | null>(null);\r\n  const [data, setData] = useState<any[]>([]);\r\n\r\n  const fetchData = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      // Simulate different scenarios\r\n      const random = Math.random();\r\n      if (random < 0.3) {\r\n        throw new Error('Failed to fetch data');\r\n      } else if (random < 0.6) {\r\n        setData([]);\r\n      } else {\r\n        setData([1, 2, 3]);\r\n      }\r\n    } catch (err) {\r\n      setError(err as Error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card className='h-full'>\r\n      <CardHeader>\r\n        <CardTitle>Example Widget with State Wrapper</CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <WidgetStateWrapper\r\n          loading={loading}\r\n          error={error}\r\n          empty={data.length === 0}\r\n          onRetry={fetchData}\r\n          emptyMessage='No items found'\r\n          emptyDescription='Try adjusting your filters or add new items'\r\n          errorMessage='Failed to load data'\r\n          skeletonRows={4}\r\n          showHeaderSkeleton={true}\r\n        >\r\n          {/* Your actual content */}\r\n          <div className='space-y-2'>\r\n            {data.map((item, index) => (\r\n              <div key={index} className='rounded bg-slate-800 p-3'>\r\n                Item {item}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </WidgetStateWrapper>\r\n        <Button onClick={fetchData} className='mt-4'>\r\n          Fetch Data\r\n        </Button>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\n// ================================\r\n// Example 2: 使用個別組件\r\n// ================================\r\n\r\nexport function ExampleWidgetWithIndividualStates() {\r\n  const [state, setState] = useState<'loading' | 'error' | 'empty' | 'data'>('data');\r\n  const [overlayLoading, setOverlayLoading] = useState(false);\r\n\r\n  const handleAction = async () => {\r\n    setOverlayLoading(true);\r\n    await new Promise(resolve => setTimeout(resolve, 2000));\r\n    setOverlayLoading(false);\r\n  };\r\n\r\n  return (\r\n    <Card className='relative h-full'>\r\n      <CardHeader>\r\n        <CardTitle>Example Widget with Individual States</CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {/* Loading State */}\r\n        {state === 'loading' && (\r\n          <WidgetSkeleton rows={5} showHeader={true}>\r\n            {/* Custom skeleton content */}\r\n            <div className='space-y-3'>\r\n              <div className='h-6 w-40 rounded bg-slate-700' />\r\n              <div className='grid grid-cols-3 gap-3'>\r\n                <div className='h-20 rounded bg-slate-700' />\r\n                <div className='h-20 rounded bg-slate-700' />\r\n                <div className='h-20 rounded bg-slate-700' />\r\n              </div>\r\n            </div>\r\n          </WidgetSkeleton>\r\n        )}\r\n\r\n        {/* Error State */}\r\n        {state === 'error' && (\r\n          <WidgetError\r\n            message='Unable to load widget data'\r\n            error={new Error('Network request failed')}\r\n            onRetry={() => setState('loading')}\r\n          />\r\n        )}\r\n\r\n        {/* Empty State */}\r\n        {state === 'empty' && (\r\n          <WidgetEmpty\r\n            message='No data yet'\r\n            description='Start by adding some items to see them here'\r\n            action={{\r\n              label: 'Add First Item',\r\n              onClick: () => alert('Add item clicked'),\r\n            }}\r\n          />\r\n        )}\r\n\r\n        {/* Normal Content */}\r\n        {state === 'data' && (\r\n          <div className='space-y-3'>\r\n            <div className='rounded bg-slate-800 p-4'>\r\n              <h3 className='mb-2 font-semibold'>Content Item 1</h3>\r\n              <p className='text-sm text-slate-400'>This is your widget content</p>\r\n            </div>\r\n            <div className='rounded bg-slate-800 p-4'>\r\n              <h3 className='mb-2 font-semibold'>Content Item 2</h3>\r\n              <p className='text-sm text-slate-400'>More widget content here</p>\r\n            </div>\r\n            <Button onClick={handleAction} className='w-full'>\r\n              Perform Action\r\n            </Button>\r\n          </div>\r\n        )}\r\n\r\n        {/* State Toggle Buttons */}\r\n        <div className='mt-4 flex gap-2'>\r\n          <Button size='sm' variant='outline' onClick={() => setState('loading')}>\r\n            Loading\r\n          </Button>\r\n          <Button size='sm' variant='outline' onClick={() => setState('error')}>\r\n            Error\r\n          </Button>\r\n          <Button size='sm' variant='outline' onClick={() => setState('empty')}>\r\n            Empty\r\n          </Button>\r\n          <Button size='sm' variant='outline' onClick={() => setState('data')}>\r\n            Data\r\n          </Button>\r\n        </div>\r\n\r\n        {/* Loading Overlay */}\r\n        <WidgetLoadingOverlay\r\n          isLoading={overlayLoading}\r\n          message='Processing...'\r\n          blur={true}\r\n        />\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\n// ================================\r\n// Example 3: 自定義樣式和圖標\r\n// ================================\r\n\r\nexport function ExampleWidgetWithCustomStyles() {\r\n  const [showEmpty, setShowEmpty] = useState(true);\r\n  const [showError, setShowError] = useState(false);\r\n\r\n  return (\r\n    <Card className='h-full'>\r\n      <CardHeader>\r\n        <CardTitle>Custom Styled States</CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {showEmpty && (\r\n          <WidgetEmpty\r\n            message='Custom Empty State'\r\n            description='With custom icon and styling'\r\n            icon={\r\n              <svg\r\n                className='h-8 w-8 text-cyan-400'\r\n                fill='none'\r\n                stroke='currentColor'\r\n                viewBox='0 0 24 24'\r\n              >\r\n                <path\r\n                  strokeLinecap='round'\r\n                  strokeLinejoin='round'\r\n                  strokeWidth={2}\r\n                  d='M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4'\r\n                />\r\n              </svg>\r\n            }\r\n            className='bg-cyan-950/20'\r\n          />\r\n        )}\r\n\r\n        {showError && (\r\n          <WidgetError\r\n            message='Custom Error State'\r\n            icon={\r\n              <svg\r\n                className='h-8 w-8 text-orange-400'\r\n                fill='none'\r\n                stroke='currentColor'\r\n                viewBox='0 0 24 24'\r\n              >\r\n                <path\r\n                  strokeLinecap='round'\r\n                  strokeLinejoin='round'\r\n                  strokeWidth={2}\r\n                  d='M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z'\r\n                />\r\n              </svg>\r\n            }\r\n            className='bg-orange-950/20'\r\n            onRetry={() => alert('Custom retry')}\r\n          />\r\n        )}\r\n\r\n        <div className='mt-4 flex gap-2'>\r\n          <Button\r\n            size='sm'\r\n            variant='outline'\r\n            onClick={() => {\r\n              setShowEmpty(!showEmpty);\r\n              setShowError(false);\r\n            }}\r\n          >\r\n            Toggle Empty\r\n          </Button>\r\n          <Button\r\n            size='sm'\r\n            variant='outline'\r\n            onClick={() => {\r\n              setShowError(!showError);\r\n              setShowEmpty(false);\r\n            }}\r\n          >\r\n            Toggle Error\r\n          </Button>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\n// ================================\r\n// Migration Guide\r\n// ================================\r\n\r\n/**\r\n * Migration from old loading/error states:\r\n * \r\n * Before:\r\n * ```tsx\r\n * {loading ? (\r\n *   <div className='animate-pulse'>\r\n *     <div className='h-8 w-24 rounded bg-slate-700'></div>\r\n *     <div className='mt-2 h-4 w-16 rounded bg-slate-700'></div>\r\n *   </div>\r\n * ) : error ? (\r\n *   <div className='text-sm text-red-400'>{error}</div>\r\n * ) : (\r\n *   <div>Your content</div>\r\n * )}\r\n * ```\r\n * \r\n * After (Option 1 - StateWrapper):\r\n * ```tsx\r\n * <WidgetStateWrapper\r\n *   loading={loading}\r\n *   error={error}\r\n *   empty={data.length === 0}\r\n *   onRetry={handleRetry}\r\n * >\r\n *   <div>Your content</div>\r\n * </WidgetStateWrapper>\r\n * ```\r\n * \r\n * After (Option 2 - Individual components):\r\n * ```tsx\r\n * {loading && <WidgetSkeleton rows={3} />}\r\n * {error && <WidgetError message={error} onRetry={handleRetry} />}\r\n * {!loading && !error && data.length === 0 && <WidgetEmpty />}\r\n * {!loading && !error && data.length > 0 && <div>Your content</div>}\r\n * ```\r\n */","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/common/WidgetStates.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/common/charts/ChartContainer.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1108,1111],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1108,1111],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { motion } from 'framer-motion';\r\nimport { \r\n  Loader2, \r\n  AlertCircle, \r\n  RefreshCw, \r\n  Download,\r\n  LucideIcon\r\n} from 'lucide-react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { cn } from '@/lib/utils';\r\nimport { format } from 'date-fns';\r\nimport { ChartSkeleton } from './ChartSkeleton';\r\n\r\nexport interface ChartContainerProps {\r\n  // Basic configuration\r\n  title: string;\r\n  subtitle?: string;\r\n  icon?: LucideIcon;\r\n  iconColor?: string;\r\n  dateRange?: {\r\n    start: Date;\r\n    end: Date;\r\n  };\r\n  \r\n  // States\r\n  loading?: boolean;\r\n  error?: Error | null;\r\n  isEmpty?: boolean;\r\n  emptyMessage?: string;\r\n  onRetry?: () => void;\r\n  \r\n  // Chart configuration\r\n  height?: string | number;\r\n  showHeader?: boolean;\r\n  showFooter?: boolean;\r\n  className?: string;\r\n  \r\n  // Features\r\n  exportable?: boolean;\r\n  onExport?: () => void;\r\n  onRefresh?: () => void;\r\n  refreshing?: boolean;\r\n  \r\n  // Metadata for analytics\r\n  metadata?: Record<string, any>;\r\n  \r\n  // Performance metrics\r\n  performanceMetrics?: {\r\n    source?: string;\r\n    fetchTime?: number;\r\n    optimized?: boolean;\r\n  };\r\n  \r\n  // Statistics summary\r\n  stats?: Array<{\r\n    label: string;\r\n    value: string | number;\r\n    trend?: 'up' | 'down' | 'neutral';\r\n    className?: string;\r\n  }>;\r\n  \r\n  // Content\r\n  children: React.ReactNode;\r\n  \r\n  // Widget type for specific styling\r\n  widgetType?: string;\r\n  \r\n  // Chart type for skeleton\r\n  chartType?: 'bar' | 'line' | 'area' | 'pie' | 'treemap' | 'heatmap' | 'scatter';\r\n}\r\n\r\nexport const ChartContainer: React.FC<ChartContainerProps> = ({\r\n  title,\r\n  subtitle,\r\n  icon: Icon,\r\n  iconColor = 'from-blue-500 to-cyan-500',\r\n  dateRange,\r\n  loading = false,\r\n  error = null,\r\n  isEmpty = false,\r\n  emptyMessage = \"No data available\",\r\n  onRetry,\r\n  height = 300,\r\n  showHeader = true,\r\n  showFooter = false,\r\n  className,\r\n  exportable = false,\r\n  onExport,\r\n  onRefresh,\r\n  refreshing = false,\r\n  metadata,\r\n  performanceMetrics,\r\n  stats,\r\n  children,\r\n  widgetType,\r\n  chartType = 'bar',\r\n}) => {\r\n  // Format date range for display\r\n  const formatDateRange = () => {\r\n    if (!dateRange) return null;\r\n    return `From ${format(dateRange.start, 'MMM d')} to ${format(dateRange.end, 'MMM d')}`;\r\n  };\r\n\r\n  // Handle export\r\n  const handleExport = () => {\r\n    if (!onExport) {\r\n      console.warn('Export function not provided');\r\n      return;\r\n    }\r\n    onExport();\r\n  };\r\n\r\n  // Loading state\r\n  if (loading) {\r\n    return (\r\n      <Card className={cn('border border-slate-700/50 bg-slate-900/95 shadow-2xl backdrop-blur-xl', className)}>\r\n        {showHeader && (\r\n          <CardHeader className=\"pb-3\">\r\n            <CardTitle className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center gap-2\">\r\n                {Icon && (\r\n                  <div className={cn('h-8 w-8 rounded-lg bg-gradient-to-r flex items-center justify-center', iconColor)}>\r\n                    <Icon className=\"h-5 w-5 text-white\" />\r\n                  </div>\r\n                )}\r\n                <span>{title}</span>\r\n              </div>\r\n            </CardTitle>\r\n            {subtitle && <p className=\"text-xs text-slate-400\">{subtitle}</p>}\r\n          </CardHeader>\r\n        )}\r\n        <CardContent>\r\n          <ChartSkeleton type={chartType} height=\"md\" showHeader={false} />\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  // Error state\r\n  if (error) {\r\n    return (\r\n      <Card className={cn('border border-slate-700/50 bg-slate-900/95 shadow-2xl backdrop-blur-xl', className)}>\r\n        {showHeader && (\r\n          <CardHeader className=\"pb-3\">\r\n            <CardTitle>{title}</CardTitle>\r\n          </CardHeader>\r\n        )}\r\n        <CardContent>\r\n          <div className=\"flex flex-col items-center justify-center py-8\">\r\n            <AlertCircle className=\"mb-2 h-12 w-12 text-red-500\" />\r\n            <p className=\"mb-2 text-sm text-red-400\">Error loading chart</p>\r\n            <p className=\"mb-4 text-xs text-slate-500\">{(error as { message: string }).message}</p>\r\n            {onRetry && (\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={onRetry}\r\n              >\r\n                <RefreshCw className=\"mr-2 h-4 w-4\" />\r\n                Try again\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  // Empty state\r\n  if (isEmpty) {\r\n    return (\r\n      <Card className={cn('border border-slate-700/50 bg-slate-900/95 shadow-2xl backdrop-blur-xl', className)}>\r\n        <CardContent className=\"flex items-center justify-center p-8\" style={{ height }}>\r\n          <div className=\"text-center\">\r\n            <div className=\"mb-2 h-12 w-12 mx-auto text-slate-400\">\r\n              <svg fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\r\n              </svg>\r\n            </div>\r\n            <p className=\"text-sm text-slate-400\">{emptyMessage}</p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className={cn('border border-slate-700/50 bg-slate-900/95 shadow-2xl backdrop-blur-xl', className)}>\r\n      {showHeader && (\r\n        <CardHeader className=\"pb-3\">\r\n          <CardTitle className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-2\">\r\n              {Icon && (\r\n                <div className={cn('h-8 w-8 rounded-lg bg-gradient-to-r flex items-center justify-center', iconColor)}>\r\n                  <Icon className=\"h-5 w-5 text-white\" />\r\n                </div>\r\n              )}\r\n              <span>{title}</span>\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              {performanceMetrics?.optimized && (\r\n                <span className=\"text-xs text-blue-400\">\r\n                  ⚡ {performanceMetrics.source || 'Optimized'}\r\n                </span>\r\n              )}\r\n              {exportable && onExport && (\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  onClick={handleExport}\r\n                  className=\"h-7 px-2\"\r\n                >\r\n                  <Download className=\"h-4 w-4\" />\r\n                </Button>\r\n              )}\r\n              {onRefresh && (\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  onClick={onRefresh}\r\n                  disabled={refreshing}\r\n                  className=\"h-7 px-2\"\r\n                >\r\n                  <RefreshCw className={cn('h-4 w-4', refreshing && 'animate-spin')} />\r\n                </Button>\r\n              )}\r\n            </div>\r\n          </CardTitle>\r\n          {(subtitle || dateRange) && (\r\n            <div className=\"mt-1 flex items-center justify-between text-xs text-slate-400\">\r\n              {subtitle && <span>{subtitle}</span>}\r\n              {dateRange && <span>{formatDateRange()}</span>}\r\n            </div>\r\n          )}\r\n        </CardHeader>\r\n      )}\r\n      \r\n      <CardContent className=\"p-3\">\r\n        {/* Chart content */}\r\n        <div \r\n          className=\"relative w-full\"\r\n          style={{ height: typeof height === 'number' ? `${height}px` : height }}\r\n        >\r\n          {children}\r\n        </div>\r\n\r\n        {/* Statistics footer */}\r\n        {showFooter && stats && stats.length > 0 && (\r\n          <motion.div \r\n            className=\"mt-4 grid gap-2 border-t border-slate-700 pt-3\"\r\n            style={{\r\n              gridTemplateColumns: `repeat(${Math.min(stats.length, 4)}, 1fr)`\r\n            }}\r\n            initial={{ opacity: 0, y: 10 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            transition={{ delay: 0.3 }}\r\n          >\r\n            {stats.map((stat, index) => (\r\n              <div \r\n                key={index} \r\n                className={cn(\r\n                  'text-center',\r\n                  stat.className\r\n                )}\r\n              >\r\n                <p className=\"text-xs text-slate-400\">{stat.label}</p>\r\n                <p className={cn(\r\n                  'text-sm font-medium',\r\n                  stat.trend === 'up' ? 'text-green-400' : \r\n                  stat.trend === 'down' ? 'text-red-400' : \r\n                  'text-white'\r\n                )}>\r\n                  {typeof stat.value === 'number' ? stat.value.toLocaleString() : stat.value}\r\n                </p>\r\n              </div>\r\n            ))}\r\n          </motion.div>\r\n        )}\r\n\r\n        {/* Performance metrics */}\r\n        {performanceMetrics?.fetchTime && (\r\n          <div className=\"mt-2 text-xs text-slate-500\">\r\n            Chart loaded in {performanceMetrics.fetchTime}ms\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\n// Export utility function for charts\r\nexport const exportChartAsImage = async (\r\n  chartElement: HTMLElement,\r\n  filename: string = 'chart'\r\n) => {\r\n  try {\r\n    // Dynamic import to avoid loading html2canvas unless needed\r\n    const html2canvas = (await import('html2canvas')).default;\r\n    \r\n    const canvas = await html2canvas(chartElement, {\r\n      backgroundColor: '#0f172a', // Slate 900\r\n      scale: 2, // Higher quality\r\n    });\r\n    \r\n    const link = document.createElement('a');\r\n    link.download = `${filename}-${format(new Date(), 'yyyy-MM-dd-HHmmss')}.png`;\r\n    link.href = canvas.toDataURL();\r\n    link.click();\r\n  } catch (error) {\r\n    console.error('Error exporting chart:', error);\r\n    throw error;\r\n  }\r\n};","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/common/charts/ChartSkeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/common/charts/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/common/data-display/DataTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[446,449],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[446,449],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[707,710],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[707,710],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1909,1912],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1909,1912],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2853,2856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2853,2856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":320,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":320,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10582,10585],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10582,10585],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState, useCallback } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { \r\n  Loader2, \r\n  AlertCircle, \r\n  RefreshCw, \r\n  LucideIcon,\r\n  ChevronDown\r\n} from 'lucide-react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface DataTableColumn<T = any> {\r\n  key: string;\r\n  header: string;\r\n  icon?: LucideIcon;\r\n  width?: string;\r\n  align?: 'left' | 'center' | 'right';\r\n  render?: (value: unknown, item: T, index: number) => React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nexport interface DataTableProps<T = any> {\r\n  // Data\r\n  data: T[];\r\n  columns: DataTableColumn<T>[];\r\n  keyField?: string;\r\n  \r\n  // Header\r\n  title?: string;\r\n  subtitle?: string;\r\n  icon?: LucideIcon;\r\n  iconColor?: string;\r\n  \r\n  // States\r\n  loading?: boolean;\r\n  error?: Error | null;\r\n  empty?: boolean;\r\n  emptyMessage?: string;\r\n  emptyIcon?: LucideIcon;\r\n  \r\n  // Pagination\r\n  pagination?: {\r\n    enabled: boolean;\r\n    pageSize?: number;\r\n    loadMore?: boolean;\r\n    hasMore?: boolean;\r\n    onLoadMore?: () => void;\r\n    loadingMore?: boolean;\r\n    totalCount?: number;\r\n    remainingCount?: number;\r\n  };\r\n  \r\n  // Features\r\n  onRowClick?: (item: T, index: number) => void;\r\n  onRefresh?: () => void;\r\n  onRetry?: () => void;\r\n  showRefreshButton?: boolean;\r\n  \r\n  // Styling\r\n  className?: string;\r\n  rowClassName?: string | ((item: T, index: number) => string);\r\n  headerClassName?: string;\r\n  animate?: boolean;\r\n  \r\n  // Performance\r\n  performanceMetrics?: {\r\n    source?: string;\r\n    fetchTime?: number;\r\n    optimized?: boolean;\r\n    mode?: string;\r\n  };\r\n  \r\n  // Connection status\r\n  connectionStatus?: {\r\n    type: 'realtime' | 'polling' | 'offline';\r\n    label?: string;\r\n  };\r\n}\r\n\r\nexport function DataTable<T = any>({\r\n  data = [],\r\n  columns = [],\r\n  keyField = 'id',\r\n  title,\r\n  subtitle,\r\n  icon: Icon,\r\n  iconColor = 'from-blue-500 to-cyan-500',\r\n  loading = false,\r\n  error = null,\r\n  empty = false,\r\n  emptyMessage = 'No data available',\r\n  emptyIcon: EmptyIcon = AlertCircle,\r\n  pagination,\r\n  onRowClick,\r\n  onRefresh,\r\n  showRefreshButton = true,\r\n  className,\r\n  rowClassName,\r\n  headerClassName,\r\n  animate = true,\r\n  performanceMetrics,\r\n  connectionStatus,\r\n}: DataTableProps<T>) {\r\n  const [isRefreshing, setIsRefreshing] = useState(false);\r\n\r\n  const handleRefresh = useCallback(async () => {\r\n    if (!onRefresh) return;\r\n    setIsRefreshing(true);\r\n    try {\r\n      await onRefresh();\r\n    } finally {\r\n      setIsRefreshing(false);\r\n    }\r\n  }, [onRefresh]);\r\n\r\n  const getRowKey = (item: T, index: number): string => {\r\n    if (keyField && typeof item === 'object' && item !== null && keyField in item) {\r\n      return String((item as any)[keyField as string]);\r\n    }\r\n    return String(index);\r\n  };\r\n\r\n  const getRowClassName = (item: T, index: number): string => {\r\n    const baseClass = 'rounded-lg bg-black/20 p-2 hover:bg-white/10 transition-colors cursor-pointer';\r\n    if (typeof rowClassName === 'function') {\r\n      return cn(baseClass, rowClassName(item, index));\r\n    }\r\n    return cn(baseClass, rowClassName);\r\n  };\r\n\r\n  // Loading state\r\n  if (loading && data.length === 0) {\r\n    return (\r\n      <Card className={cn('border border-slate-700/50 bg-slate-900/95 shadow-2xl backdrop-blur-xl', className)}>\r\n        {title && (\r\n          <CardHeader className=\"pb-3\">\r\n            <CardTitle className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center gap-2\">\r\n                {Icon && (\r\n                  <div className={cn('h-8 w-8 rounded-lg bg-gradient-to-r flex items-center justify-center', iconColor)}>\r\n                    <Icon className=\"h-5 w-5 text-white\" />\r\n                  </div>\r\n                )}\r\n                <span>{title}</span>\r\n              </div>\r\n            </CardTitle>\r\n          </CardHeader>\r\n        )}\r\n        <CardContent>\r\n          <div className=\"animate-pulse space-y-2\">\r\n            {[...Array(5)].map((_, i) => (\r\n              <div key={i} className=\"h-10 rounded-lg bg-white/10\" />\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  // Error state\r\n  if (error && !data.length) {\r\n    return (\r\n      <Card className={cn('border border-slate-700/50 bg-slate-900/95 shadow-2xl backdrop-blur-xl', className)}>\r\n        {title && (\r\n          <CardHeader className=\"pb-3\">\r\n            <CardTitle>{title}</CardTitle>\r\n          </CardHeader>\r\n        )}\r\n        <CardContent>\r\n          <div className=\"flex flex-col items-center justify-center py-8\">\r\n            <AlertCircle className=\"mb-2 h-12 w-12 text-red-500\" />\r\n            <p className=\"mb-2 text-sm text-red-400\">Error loading data</p>\r\n            <p className=\"mb-4 text-xs text-slate-500\">{(error as { message: string }).message}</p>\r\n            {onRefresh && (\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={handleRefresh}\r\n                disabled={isRefreshing}\r\n              >\r\n                {isRefreshing ? (\r\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                ) : (\r\n                  <RefreshCw className=\"mr-2 h-4 w-4\" />\r\n                )}\r\n                Try again\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  // Empty state\r\n  if ((empty || data.length === 0) && !loading) {\r\n    return (\r\n      <Card className={cn('border border-slate-700/50 bg-slate-900/95 shadow-2xl backdrop-blur-xl', className)}>\r\n        {title && (\r\n          <CardHeader className=\"pb-3\">\r\n            <CardTitle className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center gap-2\">\r\n                {Icon && (\r\n                  <div className={cn('h-8 w-8 rounded-lg bg-gradient-to-r flex items-center justify-center', iconColor)}>\r\n                    <Icon className=\"h-5 w-5 text-white\" />\r\n                  </div>\r\n                )}\r\n                <span>{title}</span>\r\n              </div>\r\n              {showRefreshButton && onRefresh && (\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  onClick={handleRefresh}\r\n                  disabled={isRefreshing}\r\n                >\r\n                  <RefreshCw className={cn('h-4 w-4', isRefreshing && 'animate-spin')} />\r\n                </Button>\r\n              )}\r\n            </CardTitle>\r\n          </CardHeader>\r\n        )}\r\n        <CardContent>\r\n          <div className=\"flex flex-col items-center justify-center py-8\">\r\n            <EmptyIcon className=\"mb-2 h-12 w-12 text-slate-600\" />\r\n            <p className=\"text-sm text-slate-500\">{emptyMessage}</p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className={cn('border border-slate-700/50 bg-slate-900/95 shadow-2xl backdrop-blur-xl', className)}>\r\n      {title && (\r\n        <CardHeader className=\"pb-3\">\r\n          <CardTitle className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-2\">\r\n              {Icon && (\r\n                <div className={cn('h-8 w-8 rounded-lg bg-gradient-to-r flex items-center justify-center', iconColor)}>\r\n                  <Icon className=\"h-5 w-5 text-white\" />\r\n                </div>\r\n              )}\r\n              <span>{title}</span>\r\n              {subtitle && <span className=\"text-xs text-slate-400\">{subtitle}</span>}\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              {connectionStatus && (\r\n                <span className=\"text-xs text-slate-400\">\r\n                  {connectionStatus.label || connectionStatus.type}\r\n                </span>\r\n              )}\r\n              {performanceMetrics?.optimized && (\r\n                <span className=\"text-xs text-blue-400\">\r\n                  ⚡ {performanceMetrics.source || 'Optimized'}\r\n                </span>\r\n              )}\r\n              {showRefreshButton && onRefresh && (\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  onClick={handleRefresh}\r\n                  disabled={isRefreshing || loading}\r\n                >\r\n                  <RefreshCw className={cn('h-4 w-4', (isRefreshing || loading) && 'animate-spin')} />\r\n                </Button>\r\n              )}\r\n            </div>\r\n          </CardTitle>\r\n        </CardHeader>\r\n      )}\r\n      \r\n      <CardContent className=\"p-3\">\r\n        {/* Column headers */}\r\n        {columns.length > 0 && (\r\n          <div className={cn('mb-2 border-b border-slate-700 pb-2', headerClassName)}>\r\n            <div className={`grid grid-cols-${columns.length} gap-2 px-2 text-xs font-medium text-slate-400`}>\r\n              {columns.map((column) => (\r\n                <div\r\n                  key={column.key}\r\n                  className={cn(\r\n                    'flex items-center gap-1',\r\n                    column.align === 'center' && 'justify-center',\r\n                    column.align === 'right' && 'justify-end',\r\n                    column.className\r\n                  )}\r\n                  style={{ width: column.width }}\r\n                >\r\n                  {column.icon && <column.icon className=\"h-3 w-3\" />}\r\n                  <span>{column.header}</span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Data rows */}\r\n        <div className=\"space-y-1 overflow-y-auto\">\r\n          <AnimatePresence mode=\"popLayout\">\r\n            {data.map((item, index) => {\r\n              const rowKey = getRowKey(item, index);\r\n              const rowClass = getRowClassName(item, index);\r\n\r\n              return (\r\n                <motion.div\r\n                  key={rowKey}\r\n                  initial={animate ? { opacity: 0, x: -20 } : undefined}\r\n                  animate={animate ? { opacity: 1, x: 0 } : undefined}\r\n                  exit={animate ? { opacity: 0, x: 20 } : undefined}\r\n                  transition={animate ? { delay: index * 0.02 } : undefined}\r\n                  className={rowClass}\r\n                  onClick={() => onRowClick?.(item, index)}\r\n                >\r\n                  <div className={`grid grid-cols-${columns.length} items-center gap-2 text-sm`}>\r\n                    {columns.map((column) => {\r\n                      const value = (item as any)[column.key];\r\n                      const content = column.render\r\n                        ? column.render(value, item, index)\r\n                        : value;\r\n\r\n                      return (\r\n                        <div\r\n                          key={column.key}\r\n                          className={cn(\r\n                            'truncate',\r\n                            column.align === 'center' && 'text-center',\r\n                            column.align === 'right' && 'text-right',\r\n                            column.className\r\n                          )}\r\n                          style={{ width: column.width }}\r\n                        >\r\n                          {content}\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                </motion.div>\r\n              );\r\n            })}\r\n          </AnimatePresence>\r\n        </div>\r\n\r\n        {/* Pagination / Load More */}\r\n        {pagination?.enabled && (\r\n          <div className=\"mt-3 border-t border-slate-700 pt-3\">\r\n            {pagination.loadMore && pagination.hasMore && (\r\n              <motion.button\r\n                onClick={pagination.onLoadMore}\r\n                disabled={pagination.loadingMore}\r\n                className=\"w-full py-2 text-sm text-cyan-400 hover:text-cyan-300 disabled:opacity-50\"\r\n                whileHover={{ scale: 1.02 }}\r\n                whileTap={{ scale: 0.98 }}\r\n              >\r\n                {pagination.loadingMore ? (\r\n                  <span className=\"flex items-center justify-center gap-2\">\r\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n                    Loading more...\r\n                  </span>\r\n                ) : (\r\n                  <span className=\"flex items-center justify-center gap-1\">\r\n                    <ChevronDown className=\"h-4 w-4\" />\r\n                    Load more\r\n                    {pagination.remainingCount && ` (${pagination.remainingCount} remaining)`}\r\n                  </span>\r\n                )}\r\n              </motion.button>\r\n            )}\r\n            \r\n            {pagination.totalCount && (\r\n              <div className=\"text-center text-xs text-slate-400\">\r\n                Showing {data.length} of {pagination.totalCount} items\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {/* Performance metrics */}\r\n        {performanceMetrics?.fetchTime && (\r\n          <div className=\"mt-2 text-xs text-slate-500\">\r\n            Loaded in {performanceMetrics.fetchTime}ms\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/common/data-display/MetricCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/common/data-display/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/common/filters/DateRangeFilter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/common/filters/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/common/imports.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":138,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3336,3339],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3336,3339],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Common imports for dashboard widgets\r\n * 統一的 dashboard widget 導入\r\n *\r\n * This file provides a single point of import for commonly used dependencies\r\n * across all dashboard widgets to reduce duplication.\r\n */\r\n\r\n// Re-export everything from types\r\nexport * from './types';\r\n\r\n// Widget state components\r\nexport * from './WidgetStates';\r\nexport { default as WidgetStates } from './WidgetStates';\r\n\r\n// Error handling\r\nexport { ErrorHandler } from '@/app/components/qc-label-form/services/ErrorHandler';\r\n\r\n// Dashboard API (client-safe version)\r\nexport { createDashboardAPIClient as createDashboardAPI } from '@/lib/api/admin/DashboardAPI.client';\r\n\r\n// Chart components - REMOVED: Barrel export causes bundle bloat\r\n// Import recharts components directly in your widgets for better tree shaking:\r\n// import { BarChart, Bar, XAxis, YAxis } from 'recharts';\r\n// \r\n// This improves tree shaking and reduces bundle size by ~300-400KB\r\n// \r\n// Example usage in widgets:\r\n// import { \r\n//   BarChart, \r\n//   Bar, \r\n//   XAxis, \r\n//   YAxis, \r\n//   CartesianGrid, \r\n//   Tooltip, \r\n//   Legend,\r\n//   ResponsiveContainer \r\n// } from 'recharts';\r\n\r\n// Form components (for widgets with forms)\r\n// Form components - temporarily commented out until form UI is available\r\n// export {\r\n//   Form,\r\n//   FormControl,\r\n//   FormField,\r\n//   FormItem,\r\n//   FormLabel,\r\n//   FormMessage,\r\n// } from '@/components/ui/form';\r\n\r\nexport { Input } from '@/components/ui/input';\r\nexport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '@/components/ui/select';\r\nexport { Badge } from '@/components/ui/badge';\r\nexport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogTrigger,\r\n} from '@/components/ui/dialog';\r\n\r\n// Form validation\r\nexport { useForm } from 'react-hook-form';\r\nexport { zodResolver } from '@hookform/resolvers/zod';\r\nexport { z } from 'zod';\r\n\r\n/**\r\n * Common utility functions for widgets\r\n * Widget 通用工具函數\r\n */\r\n\r\n/**\r\n * Format number with locale-specific formatting\r\n */\r\nexport const formatNumber = (num: number, options?: Intl.NumberFormatOptions) => {\r\n  return new Intl.NumberFormat('en-US', options).format(num);\r\n};\r\n\r\n/**\r\n * Format currency values\r\n */\r\nexport const formatCurrency = (amount: number, currency = 'USD') => {\r\n  return formatNumber(amount, {\r\n    style: 'currency',\r\n    currency,\r\n    minimumFractionDigits: 2,\r\n  });\r\n};\r\n\r\n/**\r\n * Format percentage values\r\n */\r\nexport const formatPercentage = (value: number, decimals = 1) => {\r\n  return `${(value * 100).toFixed(decimals)}%`;\r\n};\r\n\r\n/**\r\n * Truncate text with ellipsis\r\n */\r\nexport const truncateText = (text: string, maxLength: number) => {\r\n  if (text.length <= maxLength) return text;\r\n  return text.slice(0, maxLength - 3) + '...';\r\n};\r\n\r\n/**\r\n * Generate colors for charts\r\n */\r\nexport const generateChartColors = (count: number) => {\r\n  const colors = [\r\n    '#3b82f6',\r\n    '#ef4444',\r\n    '#10b981',\r\n    '#f59e0b',\r\n    '#8b5cf6',\r\n    '#06b6d4',\r\n    '#84cc16',\r\n    '#f97316',\r\n    '#ec4899',\r\n    '#6366f1',\r\n  ];\r\n\r\n  const result = [];\r\n  for (let i = 0; i < count; i++) {\r\n    result.push(colors[i % colors.length]);\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * Debounce function for widget refresh\r\n */\r\nexport const debounce = <T extends (...args: Record<string, unknown>[]) => any>(\r\n  func: T,\r\n  wait: number\r\n): ((...args: Parameters<T>) => void) => {\r\n  let timeout: NodeJS.Timeout;\r\n  return (...args: Parameters<T>) => {\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(() => func(...args), wait);\r\n  };\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/common/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/dashboard/widgets/common/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/monitoring/AlertManagementCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/monitoring/BusinessMetricsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/monitoring/DatabasePerformanceCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/monitoring/RealtimeMetricsChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/monitoring/SystemHealthCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/performance-monitor/PerformanceMonitor.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2130,2133],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2130,2133],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2248,2251],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2248,2251],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { \r\n  ArrowUpIcon, \r\n  ArrowDownIcon, \r\n  ChartBarIcon,\r\n  ClockIcon,\r\n  ServerIcon,\r\n  CpuChipIcon\r\n} from '@heroicons/react/24/outline';\r\n\r\ninterface PerformanceMetric {\r\n  name: string;\r\n  value: number;\r\n  unit: string;\r\n  target: number;\r\n  improvement?: number;\r\n  icon: React.ComponentType<{ className?: string }>;\r\n}\r\n\r\ninterface PerformanceData {\r\n  metrics: PerformanceMetric[];\r\n  timestamp: Date;\r\n  isOptimized: boolean;\r\n}\r\n\r\nexport function PerformanceMonitor() {\r\n  const [performanceData, setPerformanceData] = useState<PerformanceData | null>(null);\r\n  const [isMonitoring, setIsMonitoring] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!isMonitoring) return;\r\n\r\n    const collectMetrics = () => {\r\n      // Collect Web Vitals\r\n      if ('PerformanceObserver' in window) {\r\n        const observer = new PerformanceObserver((list) => {\r\n          const entries = list.getEntries();\r\n          const metrics: PerformanceMetric[] = [];\r\n\r\n          // Process performance entries\r\n          entries.forEach(entry => {\r\n            if (entry.entryType === 'paint' && entry.name === 'first-contentful-paint') {\r\n              metrics.push({\r\n                name: 'First Contentful Paint',\r\n                value: entry.startTime,\r\n                unit: 'ms',\r\n                target: 1800,\r\n                icon: ClockIcon\r\n              });\r\n            }\r\n            \r\n            if (entry.entryType === 'largest-contentful-paint') {\r\n              metrics.push({\r\n                name: 'Largest Contentful Paint',\r\n                value: entry.startTime,\r\n                unit: 'ms',\r\n                target: 2500,\r\n                icon: ChartBarIcon\r\n              });\r\n            }\r\n          });\r\n\r\n          // Add memory metrics if available\r\n          if ((performance as any).memory) {\r\n            metrics.push({\r\n              name: 'JS Heap Used',\r\n              value: (performance as any).memory.usedJSHeapSize / 1024 / 1024,\r\n              unit: 'MB',\r\n              target: 50,\r\n              icon: CpuChipIcon\r\n            });\r\n          }\r\n\r\n          // Add navigation timing\r\n          const navTiming = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\r\n          if (navTiming) {\r\n            metrics.push({\r\n              name: 'DOM Content Loaded',\r\n              value: navTiming.domContentLoadedEventEnd,\r\n              unit: 'ms',\r\n              target: 2000,\r\n              icon: ServerIcon\r\n            });\r\n          }\r\n\r\n          if (metrics.length > 0) {\r\n            setPerformanceData({\r\n              metrics,\r\n              timestamp: new Date(),\r\n              isOptimized: localStorage.getItem('widget-mode') === 'optimized'\r\n            });\r\n          }\r\n        });\r\n\r\n        observer.observe({ entryTypes: ['paint', 'largest-contentful-paint', 'navigation'] });\r\n\r\n        return () => observer.disconnect();\r\n      }\r\n    };\r\n\r\n    collectMetrics();\r\n    const interval = setInterval(collectMetrics, 5000); // Update every 5 seconds\r\n\r\n    return () => clearInterval(interval);\r\n  }, [isMonitoring]);\r\n\r\n  const getMetricStatus = (metric: PerformanceMetric): 'good' | 'warning' | 'poor' => {\r\n    const ratio = metric.value / metric.target;\r\n    if (ratio <= 1) return 'good';\r\n    if (ratio <= 1.5) return 'warning';\r\n    return 'poor';\r\n  };\r\n\r\n  const getStatusColor = (status: 'good' | 'warning' | 'poor') => {\r\n    switch (status) {\r\n      case 'good': return 'text-green-600';\r\n      case 'warning': return 'text-yellow-600';\r\n      case 'poor': return 'text-red-600';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card className=\"w-full\">\r\n      <CardHeader>\r\n        <div className=\"flex items-center justify-between\">\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <ChartBarIcon className=\"h-5 w-5\" />\r\n            Performance Monitor\r\n          </CardTitle>\r\n          <div className=\"flex items-center gap-2\">\r\n            {performanceData?.isOptimized && (\r\n              <Badge variant=\"default\" className=\"bg-green-500\">\r\n                Optimized Mode\r\n              </Badge>\r\n            )}\r\n            <button\r\n              onClick={() => setIsMonitoring(!isMonitoring)}\r\n              className={`px-3 py-1 rounded-md text-sm font-medium transition-colors ${\r\n                isMonitoring \r\n                  ? 'bg-red-100 text-red-700 hover:bg-red-200' \r\n                  : 'bg-blue-100 text-blue-700 hover:bg-blue-200'\r\n              }`}\r\n            >\r\n              {isMonitoring ? 'Stop Monitoring' : 'Start Monitoring'}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {!performanceData ? (\r\n          <Alert>\r\n            <AlertDescription>\r\n              Click &quot;Start Monitoring&quot; to begin collecting performance metrics\r\n            </AlertDescription>\r\n          </Alert>\r\n        ) : (\r\n          <div className=\"space-y-4\">\r\n            <div className=\"text-sm text-gray-500\">\r\n              Last updated: {performanceData.timestamp.toLocaleTimeString()}\r\n            </div>\r\n            \r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              {performanceData.metrics.map((metric, index) => {\r\n                const status = getMetricStatus(metric);\r\n                const Icon = metric.icon;\r\n                \r\n                return (\r\n                  <div key={index} className=\"space-y-2\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <Icon className=\"h-4 w-4 text-gray-500\" />\r\n                        <span className=\"text-sm font-medium\">{metric.name}</span>\r\n                      </div>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <span className={`text-sm font-bold ${getStatusColor(status)}`}>\r\n                          {metric.value.toFixed(1)} {metric.unit}\r\n                        </span>\r\n                        {metric.improvement && (\r\n                          <div className=\"flex items-center gap-1\">\r\n                            {metric.improvement > 0 ? (\r\n                              <ArrowDownIcon className=\"h-3 w-3 text-green-600\" />\r\n                            ) : (\r\n                              <ArrowUpIcon className=\"h-3 w-3 text-red-600\" />\r\n                            )}\r\n                            <span className=\"text-xs text-gray-500\">\r\n                              {Math.abs(metric.improvement).toFixed(1)}%\r\n                            </span>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"relative\">\r\n                      <Progress \r\n                        value={Math.min((metric.value / metric.target) * 100, 100)} \r\n                        className=\"h-2\"\r\n                      />\r\n                      <div className=\"absolute right-0 -top-5 text-xs text-gray-400\">\r\n                        Target: {metric.target} {metric.unit}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n\r\n            <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\r\n              <h4 className=\"font-medium text-sm mb-2\">Performance Tips</h4>\r\n              <ul className=\"text-xs text-gray-600 space-y-1\">\r\n                <li>• Enable optimized mode for better performance</li>\r\n                <li>• Reduce the number of widgets on screen</li>\r\n                <li>• Use virtualization for large data lists</li>\r\n                <li>• Close unused browser tabs to free memory</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/ui/SpotlightCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/ui/StatCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/ui/WidgetWrapper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/ui/admin-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/components/widgets/BaseWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/config/animations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/config/testConfigs.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[368,371],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[368,371],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 測試頁面配置\n */\n\nimport {\n  Play,\n  Pause,\n  RotateCcw,\n  Download,\n  Zap,\n  CheckCircle,\n  Users,\n  Layers,\n  Package,\n} from 'lucide-react';\n\nexport interface TestConfig {\n  id: string;\n  title: string;\n  description: string;\n  icon: React.ElementType;\n  category: 'performance' | 'migration' | 'verification' | 'system';\n  features: string[];\n  defaultControls?: any;\n}\n\nexport const testConfigs: Record<string, TestConfig> = {\n  'ab-testing': {\n    id: 'ab-testing',\n    title: 'A/B Testing Dashboard',\n    description: 'Manage and monitor A/B tests for gradual widget migration',\n    icon: Users,\n    category: 'migration',\n    features: [\n      'Traffic Split Control',\n      'Performance Monitoring',\n      'Auto Rollback',\n      'Simulation Mode',\n    ],\n    defaultControls: {\n      v2Percentage: 50,\n      autoRollback: true,\n      performanceThreshold: 20,\n      simulationMode: false,\n    },\n  },\n\n  'dual-run': {\n    id: 'dual-run',\n    title: 'Dual Run Verification',\n    description: 'Run and compare old and new widget systems side by side',\n    icon: Layers,\n    category: 'verification',\n    features: ['Single Widget Test', 'Batch Testing', 'Performance Comparison', 'Export Reports'],\n    defaultControls: {\n      parallelRun: true,\n      captureMetrics: true,\n      compareVisual: false,\n    },\n  },\n\n  optimizations: {\n    id: 'optimizations',\n    title: 'Widget Optimization Testing',\n    description: 'Test and validate performance optimizations',\n    icon: Zap,\n    category: 'performance',\n    features: [\n      'Code Splitting Test',\n      'React.memo Verification',\n      'Bundle Analysis',\n      'Route Preloading',\n    ],\n    defaultControls: {\n      enableVirtualization: true,\n      enablePreloading: true,\n      measureRenderTime: true,\n    },\n  },\n\n  'widget-migration': {\n    id: 'widget-migration',\n    title: 'Widget Migration Testing',\n    description: 'Test widget migration status and compatibility',\n    icon: Package,\n    category: 'migration',\n    features: [\n      'Side-by-side Comparison',\n      'Migration Checklist',\n      'Regression Testing',\n      'Performance Delta',\n    ],\n    defaultControls: {\n      showOldVersion: true,\n      showNewVersion: true,\n      highlightDifferences: true,\n    },\n  },\n\n  'widget-registry': {\n    id: 'widget-registry',\n    title: 'Widget Registry Test Suite',\n    description: 'Comprehensive testing for widget registry system',\n    icon: CheckCircle,\n    category: 'system',\n    features: [\n      'Registry Initialization',\n      'Lazy Loading Test',\n      'GraphQL Toggle',\n      'Bundle Size Check',\n    ],\n    defaultControls: {\n      testLazyLoading: true,\n      testPreloading: true,\n      useGraphQL: false,\n      measureBundleSize: true,\n    },\n  },\n};\n\nexport const testCategories = {\n  performance: {\n    label: 'Performance',\n    description: 'Performance optimization and benchmarking tests',\n    color: 'text-green-500',\n  },\n  migration: {\n    label: 'Migration',\n    description: 'Widget migration and compatibility tests',\n    color: 'text-blue-500',\n  },\n  verification: {\n    label: 'Verification',\n    description: 'System verification and comparison tests',\n    color: 'text-purple-500',\n  },\n  system: {\n    label: 'System',\n    description: 'Core system functionality tests',\n    color: 'text-orange-500',\n  },\n};\n\nexport function getTestConfig(testType: string): TestConfig | null {\n  return testConfigs[testType] || null;\n}\n\nexport function getTestsByCategory(category: string): TestConfig[] {\n  return Object.values(testConfigs).filter(config => config.category === category);\n}\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/config/theme-mapping.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/config/theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/contexts/AdminRefreshContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/contexts/DashboardDataContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[758,761],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[758,761],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":117,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3496,3499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3496,3499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3584,3587],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3584,3587],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":217,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":217,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5732,5735],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5732,5735],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { createContext, useContext, useMemo, useCallback, useState, useEffect, useRef } from 'react';\r\nimport { useDashboardConcurrentQuery } from '@/app/admin/hooks/useDashboardConcurrentQuery';\r\nimport type { \r\n  DashboardBatchQueryData, \r\n  DashboardBatchQueryError,\r\n  DashboardDateRange \r\n} from '@/app/admin/types';\r\n\r\ninterface DashboardDataContextValue {\r\n  // 數據\r\n  data: DashboardBatchQueryData | null;\r\n  \r\n  // 狀態\r\n  loading: boolean;\r\n  error: DashboardBatchQueryError | null;\r\n  \r\n  // 日期範圍\r\n  dateRange: DashboardDateRange;\r\n  setDateRange: (range: DashboardDateRange) => void;\r\n  \r\n  // 操作方法\r\n  refetch: () => Promise<void>;\r\n  refetchWidget: (widgetId: string) => Promise<void>;\r\n  \r\n  // 工具方法\r\n  getWidgetData: <T = any>(widgetId: string) => T | null;\r\n  isWidgetLoading: (widgetId: string) => boolean;\r\n  getWidgetError: (widgetId: string) => Error | null;\r\n}\r\n\r\nconst DashboardDataContext = createContext<DashboardDataContextValue | null>(null);\r\n\r\ninterface DashboardDataProviderProps {\r\n  children: React.ReactNode;\r\n  initialDateRange?: DashboardDateRange;\r\n  autoRefreshInterval?: number; // 自動刷新間隔（毫秒）\r\n  prefetchedData?: DashboardBatchQueryData | null; // SSR 預取數據\r\n  ssrMode?: boolean; // 是否為 SSR 模式\r\n}\r\n\r\nexport function DashboardDataProvider({ \r\n  children, \r\n  initialDateRange = { startDate: null, endDate: null },\r\n  autoRefreshInterval,\r\n  prefetchedData = null,\r\n  ssrMode = false\r\n}: DashboardDataProviderProps) {\r\n  console.log('[DEBUG as string] DashboardDataProvider initializing with:', { initialDateRange, ssrMode });\r\n  \r\n  // 添加渲染計數器以監控重新渲染頻率\r\n  const renderCountRef = useRef(0);\r\n  renderCountRef.current += 1;\r\n  console.log('[DEBUG as string] DashboardDataProvider render count:', renderCountRef.current);\r\n  const [dateRange, setDateRange] = useState<DashboardDateRange>(initialDateRange);\r\n  const [isRefetching, setIsRefetching] = useState(false);\r\n  const [hybridData, setHybridData] = useState<DashboardBatchQueryData | null>(prefetchedData);\r\n  \r\n  // 簡化 options 對象\r\n  const stableOptions = useMemo(() => ({\r\n    dateRange,\r\n    enabled: !ssrMode || !prefetchedData\r\n  }), [dateRange, ssrMode, prefetchedData]);\r\n\r\n  const {\r\n    data: queryData,\r\n    loading: queryLoading,\r\n    error,\r\n    refetch: queryRefetch,\r\n    refetchWidget: queryRefetchWidget\r\n  } = useDashboardConcurrentQuery(stableOptions);\r\n\r\n  // 簡化數據合併邏輯\r\n  const data = useMemo(() => {\r\n    return queryData || hybridData;\r\n  }, [queryData, hybridData]);\r\n\r\n  // 更新 hybridData 當預取數據改變\r\n  useEffect(() => {\r\n    if (prefetchedData && !queryData) {\r\n      setHybridData(prefetchedData);\r\n    }\r\n  }, [prefetchedData, queryData]);\r\n\r\n  // 簡化 loading 狀態\r\n  const loading = useMemo(() => {\r\n    if (ssrMode && prefetchedData && !isRefetching) {\r\n      return false;\r\n    }\r\n    return queryLoading || isRefetching;\r\n  }, [ssrMode, prefetchedData, queryLoading, isRefetching]);\r\n\r\n  // 手動 refetch 包裝\r\n  const refetch = useCallback(async () => {\r\n    try {\r\n      setIsRefetching(true);\r\n      await queryRefetch();\r\n    } finally {\r\n      setIsRefetching(false);\r\n    }\r\n  }, [queryRefetch]);\r\n\r\n  // 單個 widget refetch 包裝\r\n  const refetchWidget = useCallback(async (widgetId: string) => {\r\n    try {\r\n      setIsRefetching(true);\r\n      await queryRefetchWidget(widgetId);\r\n    } finally {\r\n      setIsRefetching(false);\r\n    }\r\n  }, [queryRefetchWidget]);\r\n\r\n  // 移除自動刷新功能以簡化系統和減少 API 調用\r\n\r\n  // 工具方法：獲取特定 widget 數據\r\n  const getWidgetData = useCallback(<T = any>(widgetId: string): T | null => {\r\n    if (!data) return null;\r\n    return (data as any)[widgetId as string] || null;\r\n  }, [data]);\r\n\r\n  // 工具方法：檢查特定 widget 是否正在加載\r\n  const isWidgetLoading = useCallback((widgetId: string): boolean => {\r\n    // 如果整體正在加載，所有 widget 都在加載\r\n    if (loading) return true;\r\n    \r\n    // 可以擴展為支持單個 widget 的加載狀態\r\n    return false;\r\n  }, [loading]);\r\n\r\n  // 工具方法：獲取特定 widget 的錯誤\r\n  const getWidgetError = useCallback((widgetId: string): Error | null => {\r\n    if (!error) return null;\r\n    \r\n    // 如果是批量錯誤，返回整體錯誤\r\n    if (error.type === 'batch') return error;\r\n    \r\n    // 如果是特定 widget 錯誤\r\n    if (error.type === 'widget' && error.widgetId === widgetId) {\r\n      return error;\r\n    }\r\n    \r\n    return null;\r\n  }, [error]);\r\n\r\n  // 提取日期時間戳以穩定依賴\r\n  const startTime = dateRange.startDate?.getTime();\r\n  const endTime = dateRange.endDate?.getTime();\r\n\r\n  // 簡化日期範圍改變處理\r\n  useEffect(() => {\r\n    if (ssrMode && prefetchedData && !queryData) {\r\n      return;\r\n    }\r\n    \r\n    if (!startTime && !endTime) {\r\n      return;\r\n    }\r\n    \r\n    const timeoutId = setTimeout(() => {\r\n      console.log('[DEBUG] Date range changed, triggering refetch');\r\n      refetch();\r\n    }, 300); // 300ms 防抖\r\n    \r\n    return () => clearTimeout(timeoutId);\r\n  }, [\r\n    startTime, \r\n    endTime, \r\n    ssrMode,\r\n    prefetchedData,\r\n    queryData,\r\n    refetch\r\n  ]);\r\n\r\n  const contextValue = useMemo<DashboardDataContextValue>(() => ({\r\n    data,\r\n    loading,\r\n    error,\r\n    dateRange,\r\n    setDateRange,\r\n    refetch,\r\n    refetchWidget,\r\n    getWidgetData,\r\n    isWidgetLoading,\r\n    getWidgetError\r\n  }), [\r\n    data,\r\n    loading,\r\n    error,\r\n    dateRange,\r\n    refetch,\r\n    refetchWidget,\r\n    getWidgetData,\r\n    isWidgetLoading,\r\n    getWidgetError\r\n  ]);\r\n\r\n  return (\r\n    <DashboardDataContext.Provider value={contextValue}>\r\n      {children}\r\n    </DashboardDataContext.Provider>\r\n  );\r\n}\r\n\r\n// Custom hook 使用 context\r\nexport function useDashboardData() {\r\n  const context = useContext(DashboardDataContext);\r\n  \r\n  if (!context) {\r\n    throw new Error('useDashboardData must be used within DashboardDataProvider');\r\n  }\r\n  \r\n  return context;\r\n}\r\n\r\n// 專門用於單個 widget 的 hook\r\nexport function useWidgetData<T = any>(widgetId: string) {\r\n  const { getWidgetData, isWidgetLoading, getWidgetError, refetchWidget } = useDashboardData();\r\n  \r\n  return useMemo(() => ({\r\n    data: getWidgetData<T>(widgetId),\r\n    loading: isWidgetLoading(widgetId),\r\n    error: getWidgetError(widgetId),\r\n    refetch: () => refetchWidget(widgetId)\r\n  }), [widgetId, getWidgetData, isWidgetLoading, getWidgetError, refetchWidget]);\r\n}\r\n\r\n// 導出 context 本身（用於測試或高級用法）\r\nexport { DashboardDataContext };","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/contexts/UploadRefreshContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/error-handling-demo/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/examples/dashboard-data-context-usage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":141,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4087,4090],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4087,4090],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React from 'react';\r\nimport { \r\n  DashboardDataProvider, \r\n  useDashboardData,\r\n  useWidgetData \r\n} from '@/app/admin/contexts/DashboardDataContext';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { RefreshCw, AlertCircle } from 'lucide-react';\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\n\r\n// 示例 1: 使用整體 dashboard data\r\nfunction DashboardOverview() {\r\n  const { data, loading, error, refetch } = useDashboardData();\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n        {[1, 2, 3, 4].map((i) => (\r\n          <Card key={i}>\r\n            <CardHeader>\r\n              <Skeleton className=\"h-4 w-[100px]\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <Skeleton className=\"h-8 w-[120px]\" />\r\n            </CardContent>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Alert variant=\"destructive\">\r\n        <AlertCircle className=\"h-4 w-4\" />\r\n        <AlertDescription>\r\n          Error loading dashboard data: {(error as { message: string }).message}\r\n        </AlertDescription>\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  const stats = data?.statsCard;\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <h2 className=\"text-2xl font-bold\">Dashboard Overview</h2>\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          onClick={() => refetch()}\r\n        >\r\n          <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n          Refresh All\r\n        </Button>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"text-sm\">Total Products</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <p className=\"text-2xl font-bold\">{stats?.totalProducts || 0}</p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"text-sm\">Total Stock</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <p className=\"text-2xl font-bold\">{stats?.totalStock || 0}</p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"text-sm\">Low Stock Items</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <p className=\"text-2xl font-bold text-red-600\">\r\n              {stats?.lowStockCount || 0}\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"text-sm\">Average Stock Level</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <p className=\"text-2xl font-bold\">\r\n              {stats?.averageStockLevel?.toFixed(0) || 0}\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// 示例 2: 使用特定 widget 的數據\r\nfunction StockDistributionWidget() {\r\n  const { data, loading, error, refetch } = useWidgetData('stockDistribution');\r\n\r\n  if (loading) {\r\n    return <Skeleton className=\"h-[300px] w-full\" />;\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Alert variant=\"destructive\">\r\n        <AlertCircle className=\"h-4 w-4\" />\r\n        <AlertDescription>\r\n          Error loading stock distribution: {(error as { message: string }).message}\r\n        </AlertDescription>\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader className=\"flex flex-row items-center justify-between\">\r\n        <CardTitle>Stock Distribution</CardTitle>\r\n        <Button\r\n          variant=\"ghost\"\r\n          size=\"icon\"\r\n          onClick={() => refetch()}\r\n        >\r\n          <RefreshCw className=\"h-4 w-4\" />\r\n        </Button>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"space-y-2\">\r\n          {data?.warehouseData?.map((warehouse: any) => (\r\n            <div key={warehouse.warehouse} className=\"flex justify-between\">\r\n              <span>{warehouse.warehouse}</span>\r\n              <span className=\"font-medium\">\r\n                {warehouse.quantity} ({warehouse.percentage}%)\r\n              </span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"mt-4 pt-4 border-t\">\r\n          <div className=\"flex justify-between font-bold\">\r\n            <span>Total</span>\r\n            <span>{data?.totalQuantity || 0}</span>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\n// 示例 3: 日期範圍選擇器整合\r\nfunction DateRangeSelector() {\r\n  const { dateRange, setDateRange } = useDashboardData();\r\n\r\n  const handlePresetClick = (days: number) => {\r\n    const endDate = new Date();\r\n    const startDate = new Date();\r\n    startDate.setDate(startDate.getDate() - days);\r\n    \r\n    setDateRange({ startDate, endDate });\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex gap-2\">\r\n      <Button\r\n        variant=\"outline\"\r\n        size=\"sm\"\r\n        onClick={() => handlePresetClick(7)}\r\n      >\r\n        Last 7 Days\r\n      </Button>\r\n      <Button\r\n        variant=\"outline\"\r\n        size=\"sm\"\r\n        onClick={() => handlePresetClick(30)}\r\n      >\r\n        Last 30 Days\r\n      </Button>\r\n      <Button\r\n        variant=\"outline\"\r\n        size=\"sm\"\r\n        onClick={() => handlePresetClick(90)}\r\n      >\r\n        Last 90 Days\r\n      </Button>\r\n      <Button\r\n        variant=\"outline\"\r\n        size=\"sm\"\r\n        onClick={() => setDateRange({ startDate: null, endDate: null })}\r\n      >\r\n        All Time\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\n// 主應用組件，展示如何使用 Provider\r\nexport default function DashboardExample() {\r\n  return (\r\n    <DashboardDataProvider \r\n      initialDateRange={{ startDate: null, endDate: null }}\r\n      autoRefreshInterval={5 * 60 * 1000} // 5 分鐘自動刷新\r\n    >\r\n      <div className=\"container mx-auto p-6 space-y-6\">\r\n        <div className=\"flex justify-between items-center\">\r\n          <h1 className=\"text-3xl font-bold\">Dashboard</h1>\r\n          <DateRangeSelector />\r\n        </div>\r\n        \r\n        <DashboardOverview />\r\n        \r\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n          <StockDistributionWidget />\r\n          {/* 可以添加更多 widgets */}\r\n        </div>\r\n      </div>\r\n    </DashboardDataProvider>\r\n  );\r\n}\r\n\r\n// 示例 4: 在現有 widget 中使用 context\r\nexport function ExistingWidgetWithContext() {\r\n  const { getWidgetData, isWidgetLoading, refetchWidget } = useDashboardData();\r\n  \r\n  // 獲取多個相關 widget 的數據\r\n  const orderData = getWidgetData('ordersList');\r\n  const progressData = getWidgetData('acoOrderProgress');\r\n  const isLoading = isWidgetLoading('ordersList') || isWidgetLoading('acoOrderProgress');\r\n\r\n  const handleRefresh = async () => {\r\n    // 可以同時刷新多個相關 widgets\r\n    await Promise.all([\r\n      refetchWidget('ordersList'),\r\n      refetchWidget('acoOrderProgress')\r\n    ]);\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <Skeleton className=\"h-[400px] w-full\" />;\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Order Management</CardTitle>\r\n        <Button size=\"sm\" onClick={handleRefresh}>\r\n          Refresh Orders\r\n        </Button>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {/* 使用來自多個 widgets 的數據 */}\r\n        <div className=\"space-y-4\">\r\n          <div>\r\n            <h3 className=\"font-medium\">Total Orders</h3>\r\n            <p className=\"text-2xl\">{progressData?.totalOrders || 0}</p>\r\n          </div>\r\n          \r\n          <div>\r\n            <h3 className=\"font-medium\">Recent Orders</h3>\r\n            <div className=\"space-y-2\">\r\n              {orderData?.orders?.slice(0, 5).map((order: Record<string, unknown>) => (\r\n                <div key={order.id} className=\"flex justify-between\">\r\n                  <span>{order.orderNumber}</span>\r\n                  <span className=\"text-sm text-muted-foreground\">\r\n                    {(order as { status: string }).status}\r\n                  </span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/examples/dashboard-integration-example.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/examples/error-handling-demo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/examples/inventory-analysis-example.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/hooks/__tests__/useWidgetSmartCache.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/hooks/server/prefetch.server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/hooks/useAdminDashboard.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1996,1999],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1996,1999],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2449,2452],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2449,2452],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2747,2750],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2747,2750],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3072,3075],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3072,3075],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":152,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4241,4244],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4241,4244],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":196,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":196,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5463,5466],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5463,5466],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\nimport { DatabaseRecord } from '@/lib/types/database';\r\nimport { createClient } from '@/lib/supabase';\r\nimport { toast } from 'sonner';\r\nimport {\r\n  adminDataService,\r\n  DashboardStats,\r\n  AcoOrderProgress,\r\n  InventorySearchResult,\r\n} from '../services/AdminDataService';\r\nimport { isNotProduction } from '@/lib/utils/env';\r\n\r\n// Cache configuration\r\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\r\nconst cache = new Map<string, { data: DatabaseRecord[]; timestamp: number }>();\r\n\r\nfunction getCachedData<T>(key: string): T | null {\r\n  const cached = cache.get(key);\r\n  if (!cached) return null;\r\n\r\n  if (Date.now() - cached.timestamp > CACHE_DURATION) {\r\n    cache.delete(key);\r\n    return null;\r\n  }\r\n\r\n  return cached.data as T;\r\n}\r\n\r\nfunction setCachedData(key: string, data: DatabaseRecord[]) {\r\n  cache.set(key, { data, timestamp: Date.now() });\r\n}\r\n\r\n// Hook for dashboard statistics\r\nexport function useDashboardStats() {\r\n  const [stats, setStats] = useState<DashboardStats>({\r\n    dailyDonePallets: 0,\r\n    dailyTransferredPallets: 0,\r\n    yesterdayDonePallets: 0,\r\n    yesterdayTransferredPallets: 0,\r\n    past3DaysGenerated: 0,\r\n    past3DaysTransferredPallets: 0,\r\n    past7DaysGenerated: 0,\r\n    past7DaysTransferredPallets: 0,\r\n  });\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const loadStats = useCallback(async (forceRefresh = false) => {\r\n    const cacheKey = 'dashboard-stats';\r\n\r\n    // Check cache first\r\n    if (!forceRefresh) {\r\n      const cachedStats = getCachedData<DashboardStats>(cacheKey);\r\n      if (cachedStats) {\r\n        setStats(cachedStats);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const data = await adminDataService.getDashboardStats();\r\n      setStats(data);\r\n      setCachedData(cacheKey, data);\r\n    } catch (err: any) {\r\n      console.error('Error loading dashboard stats:', err);\r\n      setError(err.message);\r\n      toast.error('Failed to load dashboard statistics');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    loadStats();\r\n  }, [loadStats]);\r\n\r\n  return { stats, loading, error, refresh: () => loadStats(true) };\r\n}\r\n\r\n// Hook for ACO orders\r\nexport function useAcoOrders() {\r\n  const [orders, setOrders] = useState<any[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const loadOrders = useCallback(async (forceRefresh = false) => {\r\n    const cacheKey = 'aco-orders';\r\n\r\n    if (!forceRefresh) {\r\n      const cachedOrders = getCachedData<any[]>(cacheKey);\r\n      if (cachedOrders) {\r\n        setOrders(cachedOrders);\r\n        return;\r\n      }\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const data = await adminDataService.getIncompleteAcoOrders();\r\n      setOrders(data);\r\n      setCachedData(cacheKey, data);\r\n    } catch (err: any) {\r\n      console.error('Error loading ACO orders:', err);\r\n      setError(err.message);\r\n      toast.error('Failed to load ACO orders');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    loadOrders();\r\n  }, [loadOrders]);\r\n\r\n  return { orders, loading, error, refresh: () => loadOrders(true) };\r\n}\r\n\r\n// Hook for ACO order progress\r\nexport function useAcoOrderProgress(orderRef: number | null) {\r\n  const [progress, setProgress] = useState<AcoOrderProgress[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const loadProgress = useCallback(async () => {\r\n    if (!orderRef) {\r\n      setProgress([]);\r\n      return;\r\n    }\r\n\r\n    const cacheKey = `aco-progress-${orderRef}`;\r\n    const cachedProgress = getCachedData<AcoOrderProgress[]>(cacheKey);\r\n    if (cachedProgress) {\r\n      setProgress(cachedProgress);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const data = await adminDataService.getAcoOrderProgress(orderRef);\r\n      setProgress(data);\r\n      setCachedData(cacheKey, data);\r\n    } catch (err: any) {\r\n      console.error('Error loading order progress:', err);\r\n      setError(err.message);\r\n      toast.error('Failed to load order progress');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [orderRef]);\r\n\r\n  useEffect(() => {\r\n    loadProgress();\r\n  }, [loadProgress]);\r\n\r\n  return { progress, loading, error, refresh: loadProgress };\r\n}\r\n\r\n// Hook for inventory search\r\nexport function useInventorySearch() {\r\n  const [result, setResult] = useState<InventorySearchResult | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const search = useCallback(async (productCode: string) => {\r\n    if (!productCode.trim()) {\r\n      setResult(null);\r\n      return;\r\n    }\r\n\r\n    const cacheKey = `inventory-${productCode.toUpperCase()}`;\r\n    const cachedResult = getCachedData<InventorySearchResult>(cacheKey);\r\n    if (cachedResult) {\r\n      setResult(cachedResult);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const data = await adminDataService.searchInventory(productCode);\r\n      setResult(data);\r\n      if (data) {\r\n        setCachedData(cacheKey, data);\r\n      }\r\n    } catch (err: any) {\r\n      console.error('Error searching inventory:', err);\r\n      setError(err.message);\r\n      toast.error('Failed to search inventory');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  return { result, loading, error, search };\r\n}\r\n\r\n// Hook for real-time updates\r\nexport function useRealtimeStats() {\r\n  const supabase = createClient();\r\n  const { refresh: refreshStats } = useDashboardStats();\r\n  const { refresh: refreshOrders } = useAcoOrders();\r\n\r\n  useEffect(() => {\r\n    // Subscribe to palletinfo changes\r\n    const palletChannel = supabase\r\n      .channel('admin-pallets')\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'record_palletinfo',\r\n        },\r\n        () => {\r\n          isNotProduction() &&\r\n            console.log('Pallet data changed, refreshing stats...');\r\n          refreshStats();\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    // Subscribe to transfer changes\r\n    const transferChannel = supabase\r\n      .channel('admin-transfers')\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'record_transfer',\r\n        },\r\n        () => {\r\n          isNotProduction() &&\r\n            console.log('Transfer data changed, refreshing stats...');\r\n          refreshStats();\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    // Subscribe to ACO changes\r\n    const acoChannel = supabase\r\n      .channel('admin-aco')\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'record_aco',\r\n        },\r\n        () => {\r\n          isNotProduction() &&\r\n            console.log('ACO data changed, refreshing orders...');\r\n          refreshOrders();\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    return () => {\r\n      supabase.removeChannel(palletChannel);\r\n      supabase.removeChannel(transferChannel);\r\n      supabase.removeChannel(acoChannel);\r\n    };\r\n  }, [supabase, refreshStats, refreshOrders]);\r\n}\r\n\r\n// Hook for managing time ranges\r\nexport function useTimeRange(defaultRange: string = 'Today') {\r\n  const [timeRange, setTimeRange] = useState(defaultRange);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const getDataForTimeRange = useCallback(\r\n    (stats: DashboardStats, type: 'generated' | 'transferred') => {\r\n      switch (timeRange) {\r\n        case 'Today':\r\n          return type === 'generated' ? stats.dailyDonePallets : stats.dailyTransferredPallets;\r\n        case 'Yesterday':\r\n          return type === 'generated'\r\n            ? stats.yesterdayDonePallets\r\n            : stats.yesterdayTransferredPallets;\r\n        case 'Past 3 days':\r\n          return type === 'generated'\r\n            ? stats.past3DaysGenerated\r\n            : stats.past3DaysTransferredPallets;\r\n        case 'This week':\r\n        case 'Past 7 days':\r\n          return type === 'generated'\r\n            ? stats.past7DaysGenerated\r\n            : stats.past7DaysTransferredPallets;\r\n        default:\r\n          return 0;\r\n      }\r\n    },\r\n    [timeRange]\r\n  );\r\n\r\n  return {\r\n    timeRange,\r\n    setTimeRange,\r\n    isOpen,\r\n    setIsOpen,\r\n    getDataForTimeRange,\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/hooks/useDashboardConcurrentQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/hooks/useInViewport.ts","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useInViewport\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function.","line":255,"column":22,"nodeType":"Identifier","endLine":255,"endColumn":35,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/hooks/useInventoryAnalysis.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/hooks/useMonitoringData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/hooks/useRealtimeOrders.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/hooks/useReportPrinting.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[558,561],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[558,561],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3924,3927],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3924,3927],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":181,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6162,6165],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6162,6165],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":183,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6244,6247],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6244,6247],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useCallback, useEffect, useRef } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { getUnifiedPrintingService, PrintType, PrintRequest } from '@/lib/printing';\r\nimport { getHardwareAbstractionLayer } from '@/lib/hardware/hardware-abstraction-layer';\r\n\r\ninterface UseReportPrintingOptions {\r\n  reportType: 'transaction' | 'inventory' | 'aco-order' | 'grn';\r\n  onSuccess?: () => void;\r\n  onError?: (error: Error) => void;\r\n}\r\n\r\ninterface UseReportPrintingReturn {\r\n  printReport: (data: ArrayBuffer | Blob, metadata?: any) => Promise<void>;\r\n  downloadReport: (data: ArrayBuffer | Blob, filename: string) => void;\r\n  isPrinting: boolean;\r\n  isServiceAvailable: boolean;\r\n}\r\n\r\nexport function useReportPrinting({\r\n  reportType,\r\n  onSuccess,\r\n  onError,\r\n}: UseReportPrintingOptions): UseReportPrintingReturn {\r\n  const [isPrinting, setIsPrinting] = useState(false);\r\n  const printingServiceRef = useRef<ReturnType<typeof getUnifiedPrintingService> | null>(null);\r\n  const halRef = useRef<ReturnType<typeof getHardwareAbstractionLayer> | null>(null);\r\n  const isServiceAvailable = useRef(false);\r\n\r\n  // Initialize printing services\r\n  useEffect(() => {\r\n    console.log('[ReportPrinting] Initializing printing services...');\r\n\r\n    const initServices = async () => {\r\n      try {\r\n        // Try unified printing service first\r\n        const printingService = getUnifiedPrintingService();\r\n        await printingService.initialize();\r\n        printingServiceRef.current = printingService;\r\n        isServiceAvailable.current = true;\r\n        console.log('[ReportPrinting] ✅ Unified printing service initialized');\r\n      } catch (err) {\r\n        console.warn('[ReportPrinting] ⚠️ Unified service failed, trying HAL:', err);\r\n\r\n        // Fallback to HAL\r\n        try {\r\n          const hal = getHardwareAbstractionLayer();\r\n          await hal.initialize();\r\n          halRef.current = hal;\r\n          isServiceAvailable.current = true;\r\n          console.log('[ReportPrinting] ✅ HAL initialized as fallback');\r\n        } catch (halErr) {\r\n          console.error('[ReportPrinting] ❌ Both services failed:', halErr);\r\n          isServiceAvailable.current = false;\r\n        }\r\n      }\r\n    };\r\n\r\n    initServices();\r\n  }, []);\r\n\r\n  // Map report type to print type\r\n  const getPrintType = useCallback((): PrintType => {\r\n    switch (reportType) {\r\n      case 'transaction':\r\n        return PrintType.TRANSACTION_REPORT;\r\n      case 'inventory':\r\n        return PrintType.INVENTORY_REPORT;\r\n      case 'aco-order':\r\n        return PrintType.ACO_ORDER_REPORT;\r\n      case 'grn':\r\n        return PrintType.GRN_REPORT;\r\n      default:\r\n        return PrintType.CUSTOM_DOCUMENT;\r\n    }\r\n  }, [reportType]);\r\n\r\n  // Download report function\r\n  const downloadReport = useCallback(\r\n    (data: ArrayBuffer | Blob, filename: string) => {\r\n      try {\r\n        const blob =\r\n          data instanceof Blob\r\n            ? data\r\n            : new Blob([data], {\r\n                type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n              });\r\n\r\n        const url = window.URL.createObjectURL(blob);\r\n        const link = document.createElement('a');\r\n        link.href = url;\r\n        link.download = filename;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        window.URL.revokeObjectURL(url);\r\n        document.body.removeChild(link);\r\n\r\n        toast.success('Report downloaded successfully');\r\n        onSuccess?.();\r\n      } catch (error) {\r\n        console.error('[ReportPrinting] Download error:', error);\r\n        const err = error instanceof Error ? error : new Error('Download failed');\r\n        toast.error(`Download failed: ${err.message}`);\r\n        onError?.(err);\r\n      }\r\n    },\r\n    [onSuccess, onError]\r\n  );\r\n\r\n  // Print report function\r\n  const printReport = useCallback(\r\n    async (data: ArrayBuffer | Blob, metadata?: any) => {\r\n      if (isPrinting) return;\r\n\r\n      setIsPrinting(true);\r\n\r\n      try {\r\n        let pdfBlob: Blob;\r\n\r\n        // Check if data is already a PDF blob\r\n        if (data instanceof Blob && data.type === 'application/pdf') {\r\n          // Use the provided PDF directly\r\n          pdfBlob = data;\r\n          console.log('[ReportPrinting] Using provided PDF blob');\r\n        } else {\r\n          // Convert to PDF if needed (for Excel or other formats)\r\n          console.log('[ReportPrinting] Converting to PDF...');\r\n          const pdfLib = await import('@/lib/services/unified-pdf-service');\r\n          const { PDFDocument, rgb } = await pdfLib.getPDFLib();\r\n          const pdfDoc = await PDFDocument.create();\r\n          const page = pdfDoc.addPage();\r\n          const { width, height } = page.getSize();\r\n\r\n          // Add report title\r\n          page.drawText(`${reportType.toUpperCase()} REPORT`, {\r\n            x: 50,\r\n            y: height - 50,\r\n            size: 20,\r\n            color: rgb(0, 0, 0),\r\n          });\r\n\r\n          // Add metadata if available\r\n          if (metadata?.dateRange) {\r\n            page.drawText(`Date Range: ${metadata.dateRange}`, {\r\n              x: 50,\r\n              y: height - 80,\r\n              size: 12,\r\n              color: rgb(0.3, 0.3, 0.3),\r\n            });\r\n          }\r\n\r\n          // Add note about full report\r\n          page.drawText(\r\n            'This is a print preview. Please download the full Excel report for detailed data.',\r\n            {\r\n              x: 50,\r\n              y: height - 120,\r\n              size: 10,\r\n              color: rgb(0.5, 0.5, 0.5),\r\n            }\r\n          );\r\n\r\n          const pdfBytes = await pdfDoc.save();\r\n          pdfBlob = new Blob([pdfBytes], { type: 'application/pdf' });\r\n        }\r\n\r\n        // Use printing service\r\n        if (printingServiceRef.current) {\r\n          console.log('[ReportPrinting] Using unified printing service');\r\n\r\n          const printRequest: PrintRequest = {\r\n            type: getPrintType(),\r\n            data: {\r\n              pdfBlob,\r\n              reportType,\r\n              ...metadata,\r\n            },\r\n            options: {\r\n              copies: 1,\r\n              paperSize: 'A4' as any,\r\n              orientation: 'portrait',\r\n              priority: 'normal' as any,\r\n            },\r\n            metadata: {\r\n              userId: metadata?.userId || 'report-user',\r\n              reference: reportType,\r\n              tags: ['report', reportType],\r\n            },\r\n          };\r\n\r\n          const result = await printingServiceRef.current.print(printRequest);\r\n          if (!result.success) {\r\n            throw new Error(result.error || 'Print failed');\r\n          }\r\n\r\n          toast.success('Report sent to print queue');\r\n          onSuccess?.();\r\n        } else if (halRef.current) {\r\n          // Use HAL directly\r\n          console.log('[ReportPrinting] Using HAL directly');\r\n\r\n          const printJob = {\r\n            type: 'report' as const, // HAL only supports 'report', not 'grn-report'\r\n            data: {\r\n              pdfBlob,\r\n              reportType,\r\n              ...metadata,\r\n            },\r\n            copies: 1,\r\n            priority: 'normal' as const,\r\n          };\r\n\r\n          const result = await halRef.current.print(printJob);\r\n          if (!result.success) {\r\n            throw new Error(result.error || 'Print failed');\r\n          }\r\n\r\n          toast.success('Report sent to print queue');\r\n          onSuccess?.();\r\n        } else {\r\n          // Fallback - open PDF in new window\r\n          console.log('[ReportPrinting] Using fallback - opening in new window');\r\n          const pdfUrl = URL.createObjectURL(pdfBlob);\r\n          window.open(pdfUrl, '_blank');\r\n          URL.revokeObjectURL(pdfUrl);\r\n\r\n          toast.info('Report opened in new window for printing');\r\n          onSuccess?.();\r\n        }\r\n      } catch (error) {\r\n        console.error('[ReportPrinting] Print error:', error);\r\n        const err = error instanceof Error ? error : new Error('Print failed');\r\n        toast.error(`Print failed: ${err.message}`);\r\n        onError?.(err);\r\n      } finally {\r\n        setIsPrinting(false);\r\n      }\r\n    },\r\n    [isPrinting, reportType, getPrintType, onSuccess, onError]\r\n  );\r\n\r\n  return {\r\n    printReport,\r\n    downloadReport,\r\n    isPrinting,\r\n    isServiceAvailable: isServiceAvailable.current,\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/hooks/useUnifiedAPI.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[652,655],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[652,655],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":102,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":105,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[674,677],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[674,677],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[962,965],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[962,965],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1517,1520],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1517,1520],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1556,1559],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1556,1559],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":100,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":103,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1578,1581],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1578,1581],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2209,2212],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2209,2212],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":195,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":195,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5795,5798],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5795,5798],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'supabase.auth'. Either include it or remove the dependency array.","line":241,"column":6,"nodeType":"ArrayExpression","endLine":257,"endColumn":4,"suggestions":[{"desc":"Update the dependencies array to be: [skip, contextData, getCachedData, supabase.auth, restMethod, restEndpoint, variables, widgetId, user?.id, apiClient, recordPerformance, onCompleted, setCachedData, apiType, handleFetchError, onError]","fix":{"range":[7091,7353],"text":"[skip, contextData, getCachedData, supabase.auth, restMethod, restEndpoint, variables, widgetId, user?.id, apiClient, recordPerformance, onCompleted, setCachedData, apiType, handleFetchError, onError]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":286,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":286,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7906,7909],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7906,7909],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":286,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":286,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7945,7948],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7945,7948],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":286,"column":97,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":286,"endColumn":100,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7967,7970],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7967,7970],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * useUnifiedAPI Hook - 統一 REST API Hook (v1.7.0)\r\n * \r\n * 統一的 REST API 訪問接口\r\n * 支援緩存、重試和性能監控\r\n */\r\n\r\nimport { useState, useCallback, useEffect, useRef, useMemo, useContext } from 'react';\r\nimport { getAPIClient, APIRequest, APIResponse } from '@/lib/api/unified-api-client';\r\nimport { useAuth } from '@/app/hooks/useAuth';\r\nimport { createClient } from '@/app/utils/supabase/client';\r\nimport { DashboardDataContext } from '../contexts/DashboardDataContext';\r\nimport { useWidgetErrorHandler } from './useWidgetErrorHandler';\r\nimport { logger } from '@/lib/logger';\r\n\r\nexport interface UseUnifiedAPIOptions<TData, TVariables extends Record<string, any> = Record<string, any>> {\r\n  // REST API 配置\r\n  restEndpoint: string;\r\n  restMethod?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\r\n  \r\n  // 通用選項\r\n  variables?: TVariables;\r\n  skip?: boolean;\r\n  onCompleted?: (data: TData) => void;\r\n  onError?: (error: Error) => void;\r\n  extractFromContext?: (contextData: any) => TData | null;\r\n  widgetId?: string;\r\n  \r\n  // 快取和重試\r\n  cacheTime?: number;\r\n  staleTime?: number;\r\n  retryCount?: number;\r\n}\r\n\r\nexport interface UseUnifiedAPIResult<TData> {\r\n  data: TData | undefined;\r\n  loading: boolean;\r\n  error: Error | undefined;\r\n  refetch: () => Promise<void>;\r\n  apiType: 'rest' | 'context';\r\n  performanceMetrics?: {\r\n    queryTime: number;\r\n    dataSource: 'context' | 'rest' | 'cache';\r\n    fallbackUsed: boolean;\r\n  };\r\n}\r\n\r\n/**\r\n * 統一 REST API Hook\r\n * 提供統一的 REST API 訪問接口\r\n */\r\nexport function useUnifiedAPI<TData = any, TVariables extends Record<string, any> = Record<string, any>>({\r\n  restEndpoint,\r\n  restMethod = 'GET',\r\n  variables,\r\n  skip = false,\r\n  onCompleted,\r\n  onError,\r\n  extractFromContext,\r\n  widgetId = 'unified-api',\r\n  cacheTime = 5 * 60 * 1000,\r\n  staleTime = 30 * 1000,\r\n  retryCount = 3,\r\n}: UseUnifiedAPIOptions<TData, TVariables>): UseUnifiedAPIResult<TData> {\r\n  \r\n  // State\r\n  const [data, setData] = useState<TData | undefined>();\r\n  const [loading, setLoading] = useState(!skip);\r\n  const [error, setError] = useState<Error | undefined>();\r\n  const [apiType, setApiType] = useState<'rest' | 'context'>('context');\r\n  const [performanceMetrics, setPerformanceMetrics] = useState<any>();\r\n  \r\n  // Refs\r\n  const startTimeRef = useRef<number>();\r\n  const cacheRef = useRef<Map<string, { data: TData; timestamp: number }>>(new Map());\r\n  \r\n  // Hooks\r\n  const { user } = useAuth();\r\n  const supabase = useMemo(() => createClient(), []);\r\n  const dashboardData = useContext(DashboardDataContext);\r\n  const { handleFetchError } = useWidgetErrorHandler(widgetId, 'system');\r\n  \r\n  // API Client\r\n  const apiClient = useMemo(() => getAPIClient({\r\n    userId: user?.id,\r\n    userEmail: user?.email,\r\n  }), [user?.id, user?.email]);\r\n\r\n  // Extract data from context if available\r\n  const contextData = useMemo(() => {\r\n    if (!extractFromContext || !dashboardData?.data || skip) {\r\n      return null;\r\n    }\r\n    try {\r\n      return extractFromContext(dashboardData.data);\r\n    } catch (error) {\r\n      logger.warn('Error extracting data from context', {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        widgetId,\r\n      });\r\n      return null;\r\n    }\r\n  }, [dashboardData?.data, extractFromContext, skip, widgetId]);\r\n\r\n  // Generate cache key\r\n  const cacheKey = useMemo(() => {\r\n    return JSON.stringify({\r\n      endpoint: restEndpoint,\r\n      method: restMethod,\r\n      variables,\r\n      widgetId,\r\n    });\r\n  }, [restEndpoint, restMethod, variables, widgetId]);\r\n\r\n  // Check cache\r\n  const getCachedData = useCallback((): TData | null => {\r\n    const cached = cacheRef.current.get(cacheKey);\r\n    if (cached && Date.now() - cached.timestamp < staleTime) {\r\n      return cached.data;\r\n    }\r\n    return null;\r\n  }, [cacheKey, staleTime]);\r\n\r\n  // Set cache\r\n  const setCachedData = useCallback((data: TData) => {\r\n    cacheRef.current.set(cacheKey, {\r\n      data,\r\n      timestamp: Date.now(),\r\n    });\r\n    \r\n    // Clean old cache entries\r\n    const cutoff = Date.now() - cacheTime;\r\n    for (const [key, value] of cacheRef.current.entries()) {\r\n      if (value.timestamp < cutoff) {\r\n        cacheRef.current.delete(key);\r\n      }\r\n    }\r\n  }, [cacheKey, cacheTime]);\r\n\r\n  // Record performance metrics\r\n  const recordPerformance = useCallback((dataSource: string, fallbackUsed: boolean) => {\r\n    if (startTimeRef.current) {\r\n      const queryTime = Date.now() - startTimeRef.current;\r\n      setPerformanceMetrics({\r\n        queryTime,\r\n        dataSource,\r\n        fallbackUsed,\r\n      });\r\n      \r\n      logger.debug('API performance metrics recorded', {\r\n        widgetId,\r\n        queryTime,\r\n        dataSource,\r\n        fallbackUsed,\r\n      });\r\n    }\r\n  }, [widgetId]);\r\n\r\n  // Execute API request\r\n  const executeRequest = useCallback(async (): Promise<void> => {\r\n    if (skip) return;\r\n\r\n    setLoading(true);\r\n    setError(undefined);\r\n    startTimeRef.current = Date.now();\r\n\r\n    try {\r\n      // Check context data first\r\n      if (contextData) {\r\n        setData(contextData);\r\n        setApiType('context');\r\n        setLoading(false);\r\n        recordPerformance('context', false);\r\n        onCompleted?.(contextData);\r\n        return;\r\n      }\r\n\r\n      // Check cache\r\n      const cachedData = getCachedData();\r\n      if (cachedData) {\r\n        setData(cachedData);\r\n        setLoading(false);\r\n        recordPerformance('cache', false);\r\n        onCompleted?.(cachedData);\r\n        return;\r\n      }\r\n\r\n      // Get current session for authentication\r\n      const { data: { session } } = await supabase.auth.getSession();\r\n      \r\n      // Prepare REST API request\r\n      const apiRequest: APIRequest = {\r\n        method: restMethod,\r\n        endpoint: restEndpoint,\r\n        params: variables as Record<string, any> | undefined,\r\n        headers: session?.access_token ? {\r\n          'Authorization': `Bearer ${session.access_token}`,\r\n        } : {},\r\n        metadata: {\r\n          widgetId,\r\n          userId: user?.id,\r\n        },\r\n      };\r\n\r\n      setApiType('rest');\r\n\r\n      logger.debug('Executing REST API request', {\r\n        endpoint: restEndpoint,\r\n        method: restMethod,\r\n        widgetId,\r\n      });\r\n\r\n      // Execute request\r\n      const response: APIResponse<TData> = await apiClient.request(apiRequest);\r\n\r\n      if (response.success && response.data) {\r\n        setData(response.data);\r\n        setCachedData(response.data);\r\n        recordPerformance(response.apiType, false);\r\n        onCompleted?.(response.data);\r\n      } else {\r\n        throw new Error(response.error || 'API request failed');\r\n      }\r\n\r\n    } catch (error) {\r\n      const errorInstance = error instanceof Error ? error : new Error('Unknown error');\r\n      \r\n      logger.error('API request failed', {\r\n        error: errorInstance.message,\r\n        widgetId,\r\n        apiType,\r\n      });\r\n\r\n      setError(errorInstance);\r\n      handleFetchError(errorInstance, 'api-request');\r\n      recordPerformance(apiType, true);\r\n      onError?.(errorInstance);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [\r\n    skip,\r\n    contextData,\r\n    getCachedData,\r\n    user,\r\n    restEndpoint,\r\n    restMethod,\r\n    variables,\r\n    widgetId,\r\n    apiClient,\r\n    setCachedData,\r\n    recordPerformance,\r\n    onCompleted,\r\n    handleFetchError,\r\n    onError,\r\n    apiType,\r\n  ]);\r\n\r\n  // Refetch function\r\n  const refetch = useCallback(async (): Promise<void> => {\r\n    // Clear cache for this key\r\n    cacheRef.current.delete(cacheKey);\r\n    return executeRequest();\r\n  }, [cacheKey, executeRequest]);\r\n\r\n  // Execute request on mount and dependencies change\r\n  useEffect(() => {\r\n    executeRequest();\r\n  }, [executeRequest]);\r\n\r\n  return {\r\n    data,\r\n    loading,\r\n    error,\r\n    refetch,\r\n    apiType,\r\n    performanceMetrics,\r\n  };\r\n}\r\n\r\n// 便利 hooks\r\n\r\n/**\r\n * REST API Hook - 簡化版本\r\n */\r\nexport function useRestAPI<TData = any, TVariables extends Record<string, any> = Record<string, any>>(\r\n  endpoint: string,\r\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' = 'GET',\r\n  options?: Omit<UseUnifiedAPIOptions<TData, TVariables>, 'restEndpoint' | 'restMethod'>\r\n) {\r\n  return useUnifiedAPI<TData, TVariables>({\r\n    ...options,\r\n    restEndpoint: endpoint,\r\n    restMethod: method,\r\n  });\r\n}","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/hooks/useWidgetData.ts","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'memoizedLoadFunction'. Either include it or remove the dependency array.","line":35,"column":6,"nodeType":"ArrayExpression","endLine":35,"endColumn":51,"suggestions":[{"desc":"Update the dependencies array to be: [refreshTrigger, isEditMode, memoizedLoadFunction]","fix":{"range":[1071,1116],"text":"[refreshTrigger, isEditMode, memoizedLoadFunction]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a spread element in its dependency array. This means we can't statically verify whether you've passed the correct dependencies.","line":35,"column":35,"nodeType":"SpreadElement","endLine":35,"endColumn":50,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/hooks/useWidgetErrorHandler.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[854,857],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[854,857],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2713,2716],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2713,2716],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":136,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3491,3494],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3491,3494],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unified Error Handler Hook for Widgets\n * 提供統一嘅錯誤處理機制，整合 ErrorHandler service\n */\n\n'use client';\n\nimport { useCallback, useRef } from 'react';\nimport { toast } from 'sonner';\nimport {\n  errorHandler as globalErrorHandler,\n  ErrorContext,\n} from '@/app/components/qc-label-form/services/ErrorHandler';\nimport { TransactionLogService } from '@/app/services/transactionLog.service';\n\nexport interface WidgetErrorOptions {\n  showToast?: boolean;\n  logToDatabase?: boolean;\n  transactionId?: string;\n  customMessage?: string;\n}\n\nexport function useWidgetErrorHandler(widgetName: string, userId?: string) {\n  const transactionLog = useRef(new TransactionLogService());\n\n  /**\n   * Handle generic widget errors\n   */\n  const handleError = useCallback(\n    async (\n      error: Error | unknown,\n      action: string,\n      additionalData?: Record<string, any>,\n      options: WidgetErrorOptions = {}\n    ) => {\n      const { showToast = true, logToDatabase = true, transactionId, customMessage } = options;\n\n      // Convert unknown error to Error object\n      const err =\n        error instanceof Error\n          ? error\n          : new Error(typeof error === 'string' ? error : 'Unknown error occurred');\n\n      // Create error context\n      const context: ErrorContext = {\n        component: `Widget.${widgetName}`,\n        action,\n        userId,\n        additionalData: {\n          ...additionalData,\n          timestamp: new Date().toISOString(),\n          widget: widgetName,\n        },\n      };\n\n      // Log to console for debugging\n      console.error(`[${widgetName}] Error in ${action}:`, err, additionalData);\n\n      // Use global error handler\n      if (logToDatabase) {\n        globalErrorHandler.handleApiError(err, context, customMessage);\n      } else if (showToast) {\n        const userMessage = customMessage || generateUserMessage(err, action);\n        toast.error(userMessage);\n      }\n\n      // Record in transaction log if transaction ID provided\n      if (transactionId) {\n        await transactionLog.current.recordError(transactionId, err, action);\n      }\n\n      return {\n        error: err,\n        handled: true,\n        context,\n      };\n    },\n    [widgetName, userId]\n  );\n\n  /**\n   * Handle data fetching errors\n   */\n  const handleFetchError = useCallback(\n    (error: Error | unknown, endpoint?: string) => {\n      return handleError(\n        error,\n        'data_fetch',\n        { endpoint },\n        {\n          customMessage: 'Failed to load data. Please try refreshing the page.',\n        }\n      );\n    },\n    [handleError]\n  );\n\n  /**\n   * Handle form submission errors\n   */\n  const handleSubmitError = useCallback(\n    (error: Error | unknown, formData?: Record<string, any>) => {\n      return handleError(\n        error,\n        'form_submit',\n        { formData },\n        {\n          customMessage: 'Failed to save changes. Please check your input and try again.',\n        }\n      );\n    },\n    [handleError]\n  );\n\n  /**\n   * Handle file operation errors\n   */\n  const handleFileError = useCallback(\n    (error: Error | unknown, operation: string, fileName?: string) => {\n      return handleError(\n        error,\n        `file_${operation}`,\n        { fileName },\n        {\n          customMessage: `Failed to ${operation} file. Please try again.`,\n        }\n      );\n    },\n    [handleError]\n  );\n\n  /**\n   * Handle successful operations\n   */\n  const handleSuccess = useCallback(\n    (message: string, action: string, details?: Record<string, any>) => {\n      const context: ErrorContext = {\n        component: `Widget.${widgetName}`,\n        action,\n        userId,\n        additionalData: details,\n      };\n\n      globalErrorHandler.handleSuccess(message, context);\n    },\n    [widgetName, userId]\n  );\n\n  /**\n   * Handle warnings\n   */\n  const handleWarning = useCallback(\n    (message: string, action: string, showToast = true) => {\n      const context: ErrorContext = {\n        component: `Widget.${widgetName}`,\n        action,\n        userId,\n      };\n\n      globalErrorHandler.handleWarning(message, context, showToast);\n    },\n    [widgetName, userId]\n  );\n\n  /**\n   * Handle validation errors\n   */\n  const handleValidationError = useCallback(\n    (fieldName: string, errorMessage: string) => {\n      const context: ErrorContext = {\n        component: `Widget.${widgetName}`,\n        action: 'validation',\n        userId,\n      };\n\n      globalErrorHandler.handleValidationError(fieldName, errorMessage, context);\n    },\n    [widgetName, userId]\n  );\n\n  return {\n    handleError,\n    handleFetchError,\n    handleSubmitError,\n    handleFileError,\n    handleSuccess,\n    handleWarning,\n    handleValidationError,\n    errorHandler: globalErrorHandler,\n  };\n}\n\n/**\n * Generate user-friendly error messages based on error type\n */\nfunction generateUserMessage(error: Error, action: string): string {\n  const errorMessage = error.message.toLowerCase();\n\n  // Network errors\n  if (errorMessage.includes('network') || errorMessage.includes('fetch')) {\n    return 'Network connection issue. Please check your internet connection.';\n  }\n\n  // Authentication errors\n  if (errorMessage.includes('auth') || errorMessage.includes('unauthorized')) {\n    return 'Authentication required. Please log in again.';\n  }\n\n  // Not found errors\n  if (errorMessage.includes('not found') || errorMessage.includes('404')) {\n    return 'The requested information was not found.';\n  }\n\n  // Timeout errors\n  if (errorMessage.includes('timeout')) {\n    return 'The operation timed out. Please try again.';\n  }\n\n  // Database errors\n  if (errorMessage.includes('database') || errorMessage.includes('supabase')) {\n    return 'Database error occurred. Please try again later.';\n  }\n\n  // Action-specific messages\n  switch (action) {\n    case 'data_fetch':\n      return 'Failed to load data. Please refresh the page.';\n    case 'form_submit':\n      return 'Failed to save changes. Please try again.';\n    case 'file_upload':\n      return 'File upload failed. Please try again.';\n    case 'file_download':\n      return 'File download failed. Please try again.';\n    default:\n      return 'An error occurred. Please try again.';\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/hooks/useWidgetPerformanceTracking.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[847,850],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[847,850],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1070,1073],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1070,1073],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1087,1090],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1087,1090],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":264,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":264,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7795,7798],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7795,7798],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'trackError'. Either include it or remove the dependency array.","line":127,"column":6,"nodeType":"ArrayExpression","endLine":127,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [trackError, widgetId]","fix":{"range":[3914,3924],"text":"[trackError, widgetId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * React Hook for Widget Performance Tracking\r\n * \r\n * Integrates enhanced performance monitoring:\r\n * - Automatic performance tracking\r\n * - Error monitoring\r\n * - A/B testing support\r\n * - Real-time metrics\r\n */\r\n\r\nimport { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { usePathname } from 'next/navigation';\r\nimport { simplePerformanceMonitor, recordMetric, PerformanceTimer } from '@/lib/performance/SimplePerformanceMonitor';\r\nimport { \r\n  enhancedPerformanceMonitor,\r\n  type ErrorMetrics,\r\n  type ABTestConfig \r\n} from '@/lib/widgets/enhanced-performance-monitor';\r\n\r\nexport interface UseWidgetPerformanceTrackingOptions {\r\n  widgetId: string;\r\n  variant?: 'v2' | 'legacy';\r\n  enableAutoTracking?: boolean;\r\n  abTest?: {\r\n    testId: string;\r\n    variant: 'control' | 'test';\r\n  };\r\n  customMetrics?: Record<string, any>;\r\n}\r\n\r\nexport interface UseWidgetPerformanceTrackingResult {\r\n  // Performance tracking\r\n  startTracking: () => void;\r\n  stopTracking: () => void;\r\n  trackRender: () => void;\r\n  trackDataFetch: (fetchFn: () => Promise<any>) => Promise<any>;\r\n  \r\n  // Error tracking\r\n  trackError: (error: Error, errorType?: ErrorMetrics['errorType']) => void;\r\n  \r\n  // Metrics\r\n  getMetrics: () => {\r\n    loadTime?: number;\r\n    renderTime?: number;\r\n    dataFetchTime?: number;\r\n    errorCount: number;\r\n  };\r\n  \r\n  // A/B testing\r\n  isTestVariant: boolean;\r\n  trackConversion: (conversionType: string) => void;\r\n}\r\n\r\n/**\r\n * Performance tracking hook for widgets\r\n */\r\nexport function useWidgetPerformanceTracking({\r\n  widgetId,\r\n  variant = 'v2',\r\n  enableAutoTracking = true,\r\n  abTest,\r\n  customMetrics,\r\n}: UseWidgetPerformanceTrackingOptions): UseWidgetPerformanceTrackingResult {\r\n  const pathname = usePathname();\r\n  const timerRef = useRef<PerformanceTimer | null>(null);\r\n  const errorCountRef = useRef(0);\r\n  const sessionIdRef = useRef(generateSessionId());\r\n  const renderStartTimeRef = useRef<number | null>(null);\r\n  const metricsRef = useRef({\r\n    loadTime: undefined as number | undefined,\r\n    renderTime: undefined as number | undefined,\r\n    dataFetchTime: undefined as number | undefined,\r\n  });\r\n  \r\n  // Start performance tracking\r\n  const startTracking = useCallback(() => {\r\n    if (!timerRef.current) {\r\n      timerRef.current = simplePerformanceMonitor.startMonitoring(widgetId, variant);\r\n      console.log(`[PerformanceTracking] Started tracking for ${widgetId}`);\r\n    }\r\n  }, [widgetId, variant]);\r\n  \r\n  // Stop tracking and record metrics\r\n  const stopTracking = useCallback(() => {\r\n    if (timerRef.current) {\r\n      timerRef.current.complete({\r\n        route: pathname,\r\n        sessionId: sessionIdRef.current,\r\n        userId: customMetrics?.userId,\r\n      });\r\n      \r\n      console.log(`[PerformanceTracking] Completed tracking for ${widgetId}`);\r\n      timerRef.current = null;\r\n    }\r\n  }, [widgetId, pathname, customMetrics?.userId]);\r\n  \r\n  // Track render phase\r\n  const trackRender = useCallback(() => {\r\n    if (timerRef.current) {\r\n      timerRef.current.startRender();\r\n      renderStartTimeRef.current = performance.now();\r\n    }\r\n  }, []);\r\n  \r\n  // Track data fetching with timing\r\n  const trackDataFetch = useCallback(async <T,>(fetchFn: () => Promise<T>): Promise<T> => {\r\n    if (!timerRef.current) {\r\n      return fetchFn();\r\n    }\r\n    \r\n    timerRef.current.startDataFetch();\r\n    const startTime = performance.now();\r\n    \r\n    try {\r\n      const result = await fetchFn();\r\n      const fetchTime = performance.now() - startTime;\r\n      metricsRef.current.dataFetchTime = fetchTime;\r\n      \r\n      console.log(`[PerformanceTracking] Data fetch completed for ${widgetId}: ${fetchTime.toFixed(2)}ms`);\r\n      return result;\r\n    } catch (error) {\r\n      // Track fetch errors\r\n      trackError(error as Error, 'data-fetch');\r\n      throw error;\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [widgetId]);\r\n  \r\n  // Track errors\r\n  const trackError = useCallback((error: Error, errorType: ErrorMetrics['errorType'] = 'runtime') => {\r\n    errorCountRef.current++;\r\n    \r\n    const errorMetric: ErrorMetrics = {\r\n      widgetId,\r\n      timestamp: Date.now(),\r\n      errorType,\r\n      errorMessage: error.message,\r\n      errorStack: error.stack,\r\n      severity: determineSeverity(error, errorType),\r\n      userImpact: 1, // Single user impact\r\n      context: {\r\n        route: pathname,\r\n        variant,\r\n        sessionId: sessionIdRef.current,\r\n        userId: customMetrics?.userId,\r\n      },\r\n    };\r\n    \r\n    enhancedPerformanceMonitor.recordError(errorMetric);\r\n    console.error(`[PerformanceTracking] Error in ${widgetId}:`, error);\r\n  }, [widgetId, pathname, variant, customMetrics?.userId]);\r\n  \r\n  // Get current metrics\r\n  const getMetrics = useCallback(() => {\r\n    return {\r\n      loadTime: metricsRef.current.loadTime,\r\n      renderTime: metricsRef.current.renderTime,\r\n      dataFetchTime: metricsRef.current.dataFetchTime,\r\n      errorCount: errorCountRef.current,\r\n    };\r\n  }, []);\r\n  \r\n  // Track conversion for A/B testing\r\n  const trackConversion = useCallback((conversionType: string) => {\r\n    if (abTest) {\r\n      console.log(`[PerformanceTracking] Conversion tracked for ${abTest.testId}: ${conversionType}`);\r\n      // In production, this would send conversion data to analytics\r\n    }\r\n  }, [abTest]);\r\n  \r\n  // Auto-tracking effect\r\n  useEffect(() => {\r\n    if (enableAutoTracking) {\r\n      startTracking();\r\n      \r\n      // Track initial render\r\n      trackRender();\r\n      \r\n      // Complete tracking on unmount\r\n      return () => {\r\n        stopTracking();\r\n      };\r\n    }\r\n  }, [enableAutoTracking, startTracking, stopTracking, trackRender]);\r\n  \r\n  // Setup error boundary\r\n  useEffect(() => {\r\n    const handleError = (event: ErrorEvent) => {\r\n      if (event.error) {\r\n        trackError(event.error, 'runtime');\r\n      }\r\n    };\r\n    \r\n    window.addEventListener('error', handleError);\r\n    return () => window.removeEventListener('error', handleError);\r\n  }, [trackError]);\r\n  \r\n  // A/B test setup\r\n  useEffect(() => {\r\n    if (abTest) {\r\n      const config: ABTestConfig = {\r\n        testId: abTest.testId,\r\n        widgetId,\r\n        variants: {\r\n          control: 'v2',\r\n          test: 'v2-test',\r\n        },\r\n        metrics: ['loadTime', 'errorRate', 'conversionRate'],\r\n        startDate: new Date(),\r\n        splitRatio: 0.5,\r\n      };\r\n      \r\n      enhancedPerformanceMonitor.setupABTest(config);\r\n    }\r\n  }, [abTest, widgetId]);\r\n  \r\n  return {\r\n    startTracking,\r\n    stopTracking,\r\n    trackRender,\r\n    trackDataFetch,\r\n    trackError,\r\n    getMetrics,\r\n    isTestVariant: abTest?.variant === 'test',\r\n    trackConversion,\r\n  };\r\n}\r\n\r\n/**\r\n * Hook to access performance reports\r\n */\r\nexport function usePerformanceReports() {\r\n  const generateReport = useCallback((\r\n    type: 'daily' | 'weekly' | 'monthly',\r\n    customRange?: { start: Date; end: Date }\r\n  ) => {\r\n    return enhancedPerformanceMonitor.generateReport(type, customRange);\r\n  }, []);\r\n  \r\n  const getABTestResults = useCallback((testId: string) => {\r\n    return enhancedPerformanceMonitor.analyzeABTest(testId);\r\n  }, []);\r\n  \r\n  const exportPerformanceData = useCallback((format: 'json' | 'csv' = 'json') => {\r\n    return enhancedPerformanceMonitor.exportData(format);\r\n  }, []);\r\n  \r\n  const detectAnomalies = useCallback((widgetId: string, sensitivity?: number) => {\r\n    return enhancedPerformanceMonitor.detectAnomalies(widgetId, sensitivity);\r\n  }, []);\r\n  \r\n  return {\r\n    generateReport,\r\n    getABTestResults,\r\n    exportPerformanceData,\r\n    detectAnomalies,\r\n  };\r\n}\r\n\r\n/**\r\n * Hook for real-time performance monitoring\r\n */\r\nexport function useRealtimePerformanceMonitor(widgetId?: string) {\r\n  const [metrics, setMetrics] = useState<any>(null);\r\n  const [isMonitoring, setIsMonitoring] = useState(false);\r\n  \r\n  const startMonitoring = useCallback(() => {\r\n    setIsMonitoring(true);\r\n  }, []);\r\n  \r\n  const stopMonitoring = useCallback(() => {\r\n    setIsMonitoring(false);\r\n  }, []);\r\n  \r\n  useEffect(() => {\r\n    if (!isMonitoring) return;\r\n    \r\n    const updateMetrics = () => {\r\n      const realtimeData = simplePerformanceMonitor.getRealtimeMetrics();\r\n      \r\n      if (widgetId) {\r\n        const widgetReport = simplePerformanceMonitor.getWidgetReport(widgetId);\r\n        const errorRate = enhancedPerformanceMonitor.getErrorRate(widgetId);\r\n        \r\n        setMetrics({\r\n          widget: {\r\n            id: widgetId,\r\n            loadTime: widgetReport.v2Performance?.loadTime.mean || 0,\r\n            renderTime: widgetReport.v2Performance?.renderTime.mean || 0,\r\n            errorRate,\r\n            sampleSize: widgetReport.v2Performance?.sampleCount || 0,\r\n          },\r\n          global: realtimeData,\r\n        });\r\n      } else {\r\n        setMetrics({ global: realtimeData });\r\n      }\r\n    };\r\n    \r\n    // Update every 5 seconds\r\n    const interval = setInterval(updateMetrics, 5000);\r\n    updateMetrics(); // Initial update\r\n    \r\n    return () => clearInterval(interval);\r\n  }, [isMonitoring, widgetId]);\r\n  \r\n  return {\r\n    metrics,\r\n    isMonitoring,\r\n    startMonitoring,\r\n    stopMonitoring,\r\n  };\r\n}\r\n\r\n// Helper functions\r\nfunction generateSessionId(): string {\r\n  return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n}\r\n\r\nfunction determineSeverity(\r\n  error: Error,\r\n  errorType: ErrorMetrics['errorType']\r\n): ErrorMetrics['severity'] {\r\n  // Critical errors\r\n  if (error.message.includes('Cannot read') || error.message.includes('undefined')) {\r\n    return 'critical';\r\n  }\r\n  \r\n  // High severity for data fetch errors\r\n  if (errorType === 'data-fetch') {\r\n    return 'high';\r\n  }\r\n  \r\n  // Medium severity for render errors\r\n  if (errorType === 'render') {\r\n    return 'medium';\r\n  }\r\n  \r\n  // Default to low\r\n  return 'low';\r\n}\r\n\r\n// Re-export types for convenience\r\nexport type { ErrorMetrics, ABTestResults, AutomatedPerformanceReport } from '@/lib/widgets/enhanced-performance-monitor';","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/hooks/useWidgetSmartCache.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1102,1105],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1102,1105],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":276,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":276,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8080,8083],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8080,8083],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * React Hook for Widget Smart Cache System\r\n * \r\n * Integrates intelligent caching with widgets:\r\n * - Date range aware caching\r\n * - Stale-while-revalidate support\r\n * - Predictive preloading\r\n * - Smart TTL management\r\n */\r\n\r\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { useQuery, type UseQueryOptions } from '@tanstack/react-query';\r\nimport {\r\n  type WidgetCacheConfig,\r\n  type CacheEntry,\r\n  type CacheKeyParams,\r\n  createWidgetCacheConfig,\r\n  SmartTTLManager,\r\n  predictivePreloader,\r\n  cachePerformanceTracker,\r\n} from '@/lib/widgets/smart-cache-strategy';\r\nimport { type WidgetDataSource, type WidgetPriority } from '@/lib/widgets/unified-config';\r\nimport { type WidgetDataMode } from '@/lib/widgets/widget-data-classification';\r\n\r\nexport interface UseWidgetSmartCacheOptions<T> {\r\n  widgetId: string;\r\n  dataSource: WidgetDataSource;\r\n  dataMode: WidgetDataMode;\r\n  priority: WidgetPriority;\r\n  fetchFn: (params: QueryParams) => Promise<T>;\r\n  params?: {\r\n    dateRange?: {\r\n      from: Date;\r\n      to: Date;\r\n    };\r\n    filters?: Record<string, any>;\r\n  };\r\n  enabled?: boolean;\r\n  customCacheConfig?: Partial<WidgetCacheConfig>;\r\n  onDataUpdate?: (data: T) => void;\r\n  predictiveConfig?: {\r\n    enabled: boolean;\r\n    predictor: () => { probability: number; timeUntilNeeded: number };\r\n  };\r\n}\r\n\r\nexport interface UseWidgetSmartCacheResult<T> {\r\n  data: T | undefined;\r\n  isLoading: boolean;\r\n  isError: boolean;\r\n  error: Error | null;\r\n  isStale: boolean;\r\n  isFetching: boolean;\r\n  refetch: () => void;\r\n  invalidate: () => void;\r\n  cacheMetrics: {\r\n    hitRate: number;\r\n    avgLoadTime: number;\r\n    lastUpdated: Date | null;\r\n  };\r\n}\r\n\r\n/**\r\n * Smart cache hook for widgets\r\n */\r\nexport function useWidgetSmartCache<T>({\r\n  widgetId,\r\n  dataSource,\r\n  dataMode,\r\n  priority,\r\n  fetchFn,\r\n  params,\r\n  enabled = true,\r\n  customCacheConfig,\r\n  onDataUpdate,\r\n  predictiveConfig,\r\n}: UseWidgetSmartCacheOptions<T>): UseWidgetSmartCacheResult<T> {\r\n  const [isStale, setIsStale] = useState(false);\r\n  const lastUpdateRef = useRef<Date | null>(null);\r\n  const accessCountRef = useRef(0);\r\n  const errorRateRef = useRef(0);\r\n  const totalFetchesRef = useRef(0);\r\n  \r\n  // Create cache configuration\r\n  const cacheConfig = useMemo(\r\n    () =>\r\n      createWidgetCacheConfig(widgetId, {\r\n        dataSource,\r\n        dataMode,\r\n        priority,\r\n        customStrategy: customCacheConfig,\r\n      }),\r\n    [widgetId, dataSource, dataMode, priority, customCacheConfig]\r\n  );\r\n  \r\n  // Generate cache key\r\n  const cacheKey = useMemo(() => {\r\n    const keyParams: CacheKeyParams = {\r\n      widgetId,\r\n      dateRange: params?.dateRange,\r\n      filters: params?.filters,\r\n    };\r\n    return cacheConfig.generateKey(keyParams);\r\n  }, [widgetId, params, cacheConfig]);\r\n  \r\n  // Calculate dynamic TTL\r\n  const dynamicTTL = useMemo(() => {\r\n    const ttlParams = {\r\n      baseTTL: cacheConfig.baseTTL,\r\n      dataSource,\r\n      priority,\r\n      dateRange: params?.dateRange,\r\n      lastAccessTime: lastUpdateRef.current?.getTime(),\r\n      accessFrequency: accessCountRef.current,\r\n      errorRate: errorRateRef.current / Math.max(1, totalFetchesRef.current),\r\n    };\r\n    return SmartTTLManager.calculateTTL(ttlParams);\r\n  }, [cacheConfig.baseTTL, dataSource, priority, params?.dateRange]);\r\n  \r\n  // Enhanced fetch function with caching logic\r\n  const enhancedFetchFn = useCallback(async () => {\r\n    const startTime = Date.now();\r\n    totalFetchesRef.current++;\r\n    \r\n    try {\r\n      // Record cache miss\r\n      cachePerformanceTracker.recordMiss(widgetId);\r\n      \r\n      // Fetch data\r\n      const data = await fetchFn(params);\r\n      \r\n      // Update metrics\r\n      lastUpdateRef.current = new Date();\r\n      accessCountRef.current++;\r\n      cachePerformanceTracker.recordLoadTime(widgetId, Date.now() - startTime);\r\n      \r\n      // Call update callback if provided\r\n      if (onDataUpdate) {\r\n        onDataUpdate(data);\r\n      }\r\n      \r\n      // Reset stale state\r\n      setIsStale(false);\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      errorRateRef.current++;\r\n      cachePerformanceTracker.recordError(widgetId);\r\n      throw error;\r\n    }\r\n  }, [widgetId, fetchFn, params, onDataUpdate]);\r\n  \r\n  // Configure React Query\r\n  const queryOptions: UseQueryOptions<T, Error, T, readonly unknown[]> = {\r\n    queryKey: [cacheKey] as readonly unknown[],\r\n    queryFn: enhancedFetchFn,\r\n    enabled: enabled,\r\n    staleTime: dynamicTTL * 1000, // Convert to milliseconds\r\n    gcTime: cacheConfig.enableSWR\r\n      ? (dynamicTTL + (cacheConfig.swrWindow || 60)) * 1000\r\n      : dynamicTTL * 1000,\r\n    refetchOnWindowFocus: priority === 'critical',\r\n    refetchOnReconnect: true,\r\n    retry: dataMode === 'real-time' ? false : 3,\r\n    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),\r\n  };\r\n  \r\n  const query = useQuery(queryOptions);\r\n  \r\n  // Track cache hits\r\n  useEffect(() => {\r\n    if (query.data && !query.isFetching) {\r\n      cachePerformanceTracker.recordHit(widgetId, isStale);\r\n    }\r\n  }, [widgetId, query.data, query.isFetching, isStale]);\r\n  \r\n  // Handle stale-while-revalidate\r\n  useEffect(() => {\r\n    if (cacheConfig.enableSWR && query.isStale && !query.isFetching) {\r\n      setIsStale(true);\r\n      // Trigger background refetch\r\n      query.refetch();\r\n    }\r\n  }, [cacheConfig.enableSWR, query.isStale, query.isFetching, query]);\r\n  \r\n  // Setup predictive preloading\r\n  useEffect(() => {\r\n    if (predictiveConfig?.enabled && cacheConfig.enablePreload) {\r\n      const checkPreload = () => {\r\n        const prediction = predictiveConfig.predictor();\r\n        \r\n        if (prediction.probability > 0) {\r\n          predictivePreloader.schedulePreload(\r\n            widgetId,\r\n            () => query.refetch(),\r\n            {\r\n              ...prediction,\r\n              priority,\r\n            }\r\n          );\r\n          cachePerformanceTracker.recordPreload(widgetId);\r\n        }\r\n      };\r\n      \r\n      // Check periodically\r\n      const interval = setInterval(checkPreload, 30000); // Every 30 seconds\r\n      checkPreload(); // Initial check\r\n      \r\n      return () => {\r\n        clearInterval(interval);\r\n        predictivePreloader.cancelPreload(widgetId);\r\n      };\r\n    }\r\n  }, [widgetId, predictiveConfig, cacheConfig.enablePreload, priority, query]);\r\n  \r\n  // Calculate cache metrics\r\n  const cacheMetrics = useMemo(() => {\r\n    const metrics = cachePerformanceTracker.getMetrics(widgetId);\r\n    if (!metrics) {\r\n      return {\r\n        hitRate: 0,\r\n        avgLoadTime: 0,\r\n        lastUpdated: lastUpdateRef.current,\r\n      };\r\n    }\r\n    \r\n    const totalRequests = metrics.hits + metrics.misses;\r\n    return {\r\n      hitRate: totalRequests > 0 ? metrics.hits / totalRequests : 0,\r\n      avgLoadTime: metrics.avgLoadTime,\r\n      lastUpdated: lastUpdateRef.current,\r\n    };\r\n  }, [widgetId]);\r\n  \r\n  return {\r\n    data: query.data,\r\n    isLoading: query.isLoading,\r\n    isError: query.isError,\r\n    error: query.error,\r\n    isStale: isStale || query.isStale,\r\n    isFetching: query.isFetching,\r\n    refetch: () => query.refetch(),\r\n    invalidate: () => query.refetch(),\r\n    cacheMetrics,\r\n  };\r\n}\r\n\r\n/**\r\n * Hook for batch cache invalidation by date range\r\n */\r\nexport function useWidgetCacheInvalidation() {\r\n  const invalidateByDateRange = useCallback(\r\n    async (dateRange: { from: Date; to: Date }, widgetIds?: string[]) => {\r\n      // This would integrate with React Query's invalidation\r\n      // Implementation depends on your query client setup\r\n      console.log('Invalidating cache for date range:', dateRange, 'widgets:', widgetIds);\r\n    },\r\n    []\r\n  );\r\n  \r\n  const invalidateAll = useCallback(async () => {\r\n    // Invalidate all widget caches\r\n    console.log('Invalidating all widget caches');\r\n  }, []);\r\n  \r\n  return {\r\n    invalidateByDateRange,\r\n    invalidateAll,\r\n  };\r\n}\r\n\r\n/**\r\n * Hook to monitor overall cache performance\r\n */\r\nexport function useCachePerformanceMonitor() {\r\n  const [metrics, setMetrics] = useState<Map<string, any>>(new Map());\r\n  \r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setMetrics(new Map(cachePerformanceTracker.getAllMetrics()));\r\n    }, 5000); // Update every 5 seconds\r\n    \r\n    return () => clearInterval(interval);\r\n  }, []);\r\n  \r\n  const overallStats = useMemo(() => {\r\n    let totalHits = 0;\r\n    let totalMisses = 0;\r\n    let totalErrors = 0;\r\n    let totalPreloads = 0;\r\n    let avgLoadTime = 0;\r\n    let count = 0;\r\n    \r\n    for (const metric of metrics.values()) {\r\n      totalHits += metric.hits;\r\n      totalMisses += metric.misses;\r\n      totalErrors += metric.errors;\r\n      totalPreloads += metric.preloads;\r\n      avgLoadTime += metric.avgLoadTime;\r\n      count++;\r\n    }\r\n    \r\n    return {\r\n      totalHits,\r\n      totalMisses,\r\n      totalErrors,\r\n      totalPreloads,\r\n      overallHitRate: totalHits + totalMisses > 0 ? totalHits / (totalHits + totalMisses) : 0,\r\n      avgLoadTime: count > 0 ? avgLoadTime / count : 0,\r\n      widgetCount: count,\r\n    };\r\n  }, [metrics]);\r\n  \r\n  return {\r\n    widgetMetrics: metrics,\r\n    overallStats,\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/hooks/useWidgetToast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/monitoring/__tests__/monitoring.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/monitoring/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/product-update-demo/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/services/AdminDataService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/stock-count/components/ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/stock-count/components/ManualInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/stock-count/components/NumberPad.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2695,2698],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2695,2698],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { motion } from 'framer-motion';\nimport { CheckIcon, XMarkIcon, BackspaceIcon } from '@heroicons/react/24/outline';\n\ninterface NumberPadProps {\n  onConfirm: (value: number) => void;\n  onCancel: () => void;\n  isLoading?: boolean;\n}\n\nexport default function NumberPad({ onConfirm, onCancel, isLoading = false }: NumberPadProps) {\n  const [value, setValue] = useState('');\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // 處理數字輸入\n  const handleNumberClick = useCallback(\n    (num: string) => {\n      if (value.length < 10) {\n        // 限制最大長度\n        setValue(prev => prev + num);\n      }\n    },\n    [value.length]\n  );\n\n  // 處理退格\n  const handleBackspace = useCallback(() => {\n    setValue(prev => prev.slice(0, -1));\n  }, []);\n\n  // 處理確認\n  const handleConfirm = useCallback(() => {\n    const numValue = parseInt(value);\n    if (!isNaN(numValue) && numValue >= 0) {\n      onConfirm(numValue);\n    }\n  }, [value, onConfirm]);\n\n  // 處理清除\n  const handleClear = useCallback(() => {\n    setValue('');\n  }, []);\n\n  // Focus 輸入框當組件載入\n  useEffect(() => {\n    // 延遲一下確保動畫完成\n    setTimeout(() => {\n      inputRef.current?.focus();\n    }, 100);\n  }, []);\n\n  // 鍵盤事件處理器已移除\n\n  // 處理輸入框變更\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value.replace(/\\D/g, ''); // 只允許數字\n    if (newValue.length <= 10) {\n      setValue(newValue);\n    }\n  };\n\n  // 數字按鈕\n  const numbers = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      exit={{ opacity: 0, scale: 0.9 }}\n      className='mx-auto w-full max-w-sm p-6'\n    >\n      {/* 標題 */}\n      <div className='mb-6 text-center'>\n        <h3 className='mb-2 text-xl font-bold text-white'>Enter Counted Quantity</h3>\n        <p className='text-sm text-slate-400'>Input the actual quantity for this pallet</p>\n        {/* 快捷鍵提示已移除 */}\n      </div>\n\n      {/* 顯示區域 - 可輸入的文字框 */}\n      <div className='mb-6 rounded-lg border border-slate-600 bg-slate-900 p-4'>\n        <input\n          ref={inputRef}\n          type='text'\n          inputMode='numeric'\n          pattern='[0-9]*'\n          value={value}\n          onChange={handleInputChange}\n          placeholder='0'\n          className='w-full rounded bg-transparent text-right font-mono text-2xl text-white outline-none focus:ring-2 focus:ring-blue-500'\n          disabled={isLoading}\n          autoComplete='off'\n        />\n      </div>\n\n      {/* 數字鍵盤 */}\n      <div className='mb-6 grid grid-cols-3 gap-3'>\n        {numbers.slice(0, 9).map((num: any) => (\n          <motion.button\n            key={num}\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={() => handleNumberClick(num)}\n            className='touch-manipulation select-none rounded-lg bg-slate-700 py-4 text-lg font-semibold text-white transition-colors hover:bg-slate-600 active:bg-slate-500'\n            disabled={isLoading}\n          >\n            {num}\n          </motion.button>\n        ))}\n\n        {/* 清除按鈕 */}\n        <motion.button\n          whileHover={{ scale: 1.05 }}\n          whileTap={{ scale: 0.95 }}\n          onClick={handleClear}\n          className='touch-manipulation select-none rounded-lg bg-slate-700 py-4 text-lg font-semibold text-white transition-colors hover:bg-slate-600 active:bg-slate-500'\n          disabled={isLoading}\n        >\n          C\n        </motion.button>\n\n        {/* 0 按鈕 */}\n        <motion.button\n          whileHover={{ scale: 1.05 }}\n          whileTap={{ scale: 0.95 }}\n          onClick={() => handleNumberClick('0')}\n          className='touch-manipulation select-none rounded-lg bg-slate-700 py-4 text-lg font-semibold text-white transition-colors hover:bg-slate-600 active:bg-slate-500'\n          disabled={isLoading}\n        >\n          0\n        </motion.button>\n\n        {/* 退格按鈕 */}\n        <motion.button\n          whileHover={{ scale: 1.05 }}\n          whileTap={{ scale: 0.95 }}\n          onClick={handleBackspace}\n          className='flex touch-manipulation select-none items-center justify-center rounded-lg bg-slate-700 py-4 text-lg font-semibold text-white transition-colors hover:bg-slate-600 active:bg-slate-500'\n          disabled={isLoading}\n        >\n          <BackspaceIcon className='h-6 w-6' />\n        </motion.button>\n      </div>\n\n      {/* 操作按鈕 */}\n      <div className='flex gap-3'>\n        <motion.button\n          whileHover={{ scale: 1.02 }}\n          whileTap={{ scale: 0.98 }}\n          onClick={onCancel}\n          className='flex flex-1 items-center justify-center gap-2 rounded-lg bg-red-600 px-4 py-3 font-semibold text-white transition-colors hover:bg-red-700'\n          disabled={isLoading}\n        >\n          <XMarkIcon className='h-5 w-5' />\n          Cancel\n        </motion.button>\n\n        <motion.button\n          whileHover={{ scale: 1.02 }}\n          whileTap={{ scale: 0.98 }}\n          onClick={handleConfirm}\n          className='flex flex-1 items-center justify-center gap-2 rounded-lg bg-green-600 px-4 py-3 font-semibold text-white transition-colors hover:bg-green-700 disabled:cursor-not-allowed disabled:opacity-50'\n          disabled={isLoading || !value}\n        >\n          {isLoading ? (\n            <div className='h-5 w-5 animate-spin rounded-full border-2 border-white border-t-transparent' />\n          ) : (\n            <CheckIcon className='h-5 w-5' />\n          )}\n          Confirm\n        </motion.button>\n      </div>\n    </motion.div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/stock-count/components/RemainToCount.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/stock-count/components/ScanToStart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/stock-count/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/stock-count/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":331,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":331,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10219,10222],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10219,10222],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState, useCallback } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { toast } from 'sonner';\r\nimport ScanToStart from './components/ScanToStart';\r\nimport RemainToCount from './components/RemainToCount';\r\nimport NumberPad from './components/NumberPad';\r\nimport ErrorBoundary from './components/ErrorBoundary';\r\nimport {\r\n  ClipboardDocumentCheckIcon,\r\n  QueueListIcon,\r\n  CheckCircleIcon,\r\n  XCircleIcon,\r\n  ClockIcon,\r\n} from '@heroicons/react/24/outline';\r\nimport { UniversalBackground } from '@/app/components/UniversalBackground';\r\n\r\n// 定義狀態類型\r\ntype CountState = 'initial' | 'scanning' | 'counting' | 'need_input' | 'batch_mode';\r\n\r\n// 定義盤點數據類型\r\ninterface CountData {\r\n  plt_num: string;\r\n  product_code: string;\r\n  product_desc: string;\r\n  remain_qty: number;\r\n  current_remain_qty?: number;\r\n}\r\n\r\n// 批量掃描記錄\r\ninterface BatchScanRecord {\r\n  plt_num: string;\r\n  product_code: string;\r\n  product_desc: string;\r\n  counted_qty: number;\r\n  timestamp: string;\r\n  status: 'success' | 'error' | 'pending';\r\n  error?: string;\r\n  current_remain_qty?: number; // 當前剩餘數量\r\n}\r\n\r\nexport default function AdminStockCountPage() {\r\n  const [state, setState] = useState<CountState>('initial');\r\n  const [countData, setCountData] = useState<CountData | null>(null);\r\n  const [showNumberPad, setShowNumberPad] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [batchMode, setBatchMode] = useState(false);\r\n  const [batchScans, setBatchScans] = useState<BatchScanRecord[]>([]);\r\n  const [sessionId, setSessionId] = useState<string | null>(null);\r\n  const [pendingBatchItem, setPendingBatchItem] = useState<Partial<BatchScanRecord> | null>(null);\r\n  const [editingIndex, setEditingIndex] = useState<number | null>(null);\r\n\r\n  // 處理 QR 掃描成功\r\n  const handleScanSuccess = async (qrCode: string) => {\r\n    setIsLoading(true);\r\n    setState('scanning');\r\n\r\n    try {\r\n      // 調用掃描 API\r\n      const scanResponse = await fetch('/api/stock-count/scan', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ qrCode }),\r\n      });\r\n\r\n      const scanResult = await scanResponse.json();\r\n\r\n      if (!scanResult.success) {\r\n        toast.error(scanResult.error || 'Scan failed');\r\n        setState(batchMode ? 'batch_mode' : 'initial');\r\n        return;\r\n      }\r\n\r\n      // 批量模式處理\r\n      if (batchMode) {\r\n        // 檢查是否已經在批量列表中\r\n        const existingItem = batchScans.find(item => item.plt_num === scanResult.data.plt_num);\r\n        if (existingItem && (existingItem as { status: string }).status === 'pending') {\r\n          toast.error('This pallet is already in the batch list');\r\n          setState('batch_mode');\r\n          return;\r\n        }\r\n\r\n        // 獲取產品的當前剩餘數量（如果今日已經有盤點記錄）\r\n        const processResponse = await fetch('/api/stock-count/process', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            plt_num: scanResult.data.plt_num,\r\n            product_code: scanResult.data.product_code,\r\n            check_only: true, // 只檢查，不處理\r\n          }),\r\n        });\r\n\r\n        const processResult = await processResponse.json();\r\n\r\n        // 準備批量項目，等待輸入數量\r\n        setPendingBatchItem({\r\n          plt_num: scanResult.data.plt_num,\r\n          product_code: scanResult.data.product_code,\r\n          product_desc:\r\n            processResult.data?.product_desc ||\r\n            scanResult.data.product_desc ||\r\n            `Product ${scanResult.data.product_code}`,\r\n          timestamp: new Date().toISOString(),\r\n          status: 'pending',\r\n          current_remain_qty: processResult.data?.current_remain_qty,\r\n        });\r\n\r\n        // 如果是第一次盤點，顯示提示\r\n        if (processResult.data?.is_first_count) {\r\n          toast.info(\r\n            `First count for ${scanResult.data.product_code}. Current stock: ${processResult.data?.current_remain_qty || 0}`\r\n          );\r\n        }\r\n\r\n        setShowNumberPad(true);\r\n        setState('need_input');\r\n        return;\r\n      }\r\n\r\n      // 調用處理 API\r\n      const processResponse = await fetch('/api/stock-count/process', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          plt_num: scanResult.data.plt_num,\r\n          product_code: scanResult.data.product_code,\r\n        }),\r\n      });\r\n\r\n      const processResult = await processResponse.json();\r\n\r\n      if (!processResult.success) {\r\n        if (processResult.data?.already_counted) {\r\n          toast.error(processResult.error);\r\n          setState('initial');\r\n          return;\r\n        }\r\n        toast.error(processResult.error || 'Process failed');\r\n        setState('initial');\r\n        return;\r\n      }\r\n\r\n      // 檢查是否需要用戶輸入（包括第一次盤點）\r\n      if (processResult.data.need_input || processResult.data.is_first_count) {\r\n        setCountData({\r\n          plt_num: scanResult.data.plt_num,\r\n          product_code: scanResult.data.product_code,\r\n          product_desc:\r\n            processResult.data.product_desc || `Product ${scanResult.data.product_code}`,\r\n          remain_qty: 0,\r\n          current_remain_qty: processResult.data.current_remain_qty,\r\n        });\r\n        setState('need_input');\r\n        setShowNumberPad(true);\r\n\r\n        // 如果是第一次盤點，顯示提示\r\n        if (processResult.data.is_first_count) {\r\n          toast.info(\r\n            `First count for ${scanResult.data.product_code}. Current stock: ${processResult.data.current_remain_qty}`\r\n          );\r\n        }\r\n      } else {\r\n        // 處理完成\r\n        setCountData({\r\n          plt_num: scanResult.data.plt_num,\r\n          product_code: scanResult.data.product_code,\r\n          product_desc:\r\n            processResult.data.product_desc || `Product ${scanResult.data.product_code}`,\r\n          remain_qty: processResult.data.remain_qty,\r\n        });\r\n        setState('counting');\r\n\r\n        toast.success('Count updated successfully!');\r\n      }\r\n    } catch (error) {\r\n      console.error('Scan processing error:', error);\r\n      toast.error('An error occurred during processing');\r\n      setState('initial');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // 處理數字鍵盤確認\r\n  const handleNumberPadConfirm = async (countedQty: number) => {\r\n    // 批量模式處理\r\n    if (batchMode && pendingBatchItem) {\r\n      // 如果是編輯模式\r\n      if (editingIndex !== null) {\r\n        const updatedScans = [...batchScans];\r\n        updatedScans[editingIndex] = {\r\n          ...updatedScans[editingIndex],\r\n          counted_qty: countedQty,\r\n        };\r\n        setBatchScans(updatedScans);\r\n        setEditingIndex(null);\r\n        setShowNumberPad(false);\r\n        setState('batch_mode');\r\n        toast.success('Quantity updated');\r\n        return;\r\n      }\r\n\r\n      // 數據驗證\r\n      const validation = await validateQuantity(pendingBatchItem.product_code!, countedQty);\r\n      if (!validation.is_valid) {\r\n        toast.error((validation as { message: string }).message || 'Invalid quantity');\r\n\r\n        // 如果有警告但允許繼續，顯示確認對話框\r\n        if (validation.warnings && validation.warnings.length > 0) {\r\n          const confirmed = window.confirm(\r\n            `Warning: ${validation.warnings.join('\\n')}\\n\\nDo you want to continue?`\r\n          );\r\n          if (!confirmed) return;\r\n        } else {\r\n          return; // 如果有錯誤，直接返回\r\n        }\r\n      }\r\n\r\n      // 添加到批量掃描列表\r\n      addBatchScanRecord({\r\n        ...(pendingBatchItem as BatchScanRecord),\r\n        counted_qty: countedQty,\r\n      });\r\n\r\n      setPendingBatchItem(null);\r\n      setShowNumberPad(false);\r\n      setState('batch_mode');\r\n      toast.success(`Added ${pendingBatchItem.product_code} to batch`);\r\n      return;\r\n    }\r\n\r\n    if (!countData) return;\r\n\r\n    // 數據驗證\r\n    const validation = await validateQuantity(countData.product_code, countedQty);\r\n    if (!validation.is_valid) {\r\n      toast.error((validation as { message: string }).message || 'Invalid quantity');\r\n\r\n      // 如果有警告但允許繼續，顯示確認對話框\r\n      if (validation.warnings && validation.warnings.length > 0) {\r\n        const confirmed = window.confirm(\r\n          `Warning: ${validation.warnings.join('\\n')}\\n\\nDo you want to continue?`\r\n        );\r\n        if (!confirmed) return;\r\n      } else {\r\n        return; // 如果有錯誤，直接返回\r\n      }\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const response = await fetch('/api/stock-count/process', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          plt_num: countData.plt_num,\r\n          product_code: countData.product_code,\r\n          counted_qty: countedQty,\r\n        }),\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (!result.success) {\r\n        toast.error(result.error || 'Count submission failed');\r\n        return;\r\n      }\r\n\r\n      // 更新數據\r\n      setCountData(prev =>\r\n        prev\r\n          ? {\r\n              ...prev,\r\n              remain_qty: result.data.remain_qty,\r\n              product_desc: result.data.product_desc || prev.product_desc,\r\n            }\r\n          : null\r\n      );\r\n\r\n      setState('counting');\r\n      setShowNumberPad(false);\r\n      toast.success('Count recorded successfully!');\r\n    } catch (error) {\r\n      console.error('Count submission error:', error);\r\n      toast.error('An error occurred during count submission');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // 處理數字鍵盤取消\r\n  const handleNumberPadCancel = () => {\r\n    setShowNumberPad(false);\r\n    setPendingBatchItem(null);\r\n    setEditingIndex(null);\r\n\r\n    if (batchMode) {\r\n      setState('batch_mode');\r\n    } else {\r\n      setState('initial');\r\n      setCountData(null);\r\n    }\r\n  };\r\n\r\n  // 重置到初始狀態\r\n  const resetToInitial = () => {\r\n    setState('initial');\r\n    setCountData(null);\r\n    setShowNumberPad(false);\r\n  };\r\n\r\n  // 添加批量掃描記錄\r\n  const addBatchScanRecord = (record: BatchScanRecord) => {\r\n    setBatchScans(prev => [...prev, record]);\r\n  };\r\n\r\n  // 數據驗證函數\r\n  const validateQuantity = useCallback(\r\n    async (productCode: string, quantity: number): Promise<any> => {\r\n      try {\r\n        const response = await fetch('/api/stock-count/validate', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            product_code: productCode,\r\n            counted_qty: quantity,\r\n          }),\r\n        });\r\n\r\n        const result = await response.json();\r\n        return result.data || { is_valid: true };\r\n      } catch (error) {\r\n        console.error('Validation error:', error);\r\n        return { is_valid: true }; // 驗證失敗時允許繼續\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  // 處理批量掃描提交\r\n  const handleBatchSubmit = async () => {\r\n    if (batchScans.length === 0) {\r\n      toast.error('No items to submit');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const response = await fetch('/api/stock-count/batch-process', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          session_id: sessionId,\r\n          scans: batchScans.filter((s: Record<string, unknown>) => (s as { status: string }).status === 'pending'),\r\n        }),\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (result.success) {\r\n        toast.success(`Processed ${result.data.success_count} items successfully`);\r\n        if (result.data.error_count > 0) {\r\n          toast.error(`${result.data.error_count} items failed`);\r\n        }\r\n        // 清空批量掃描列表\r\n        setBatchScans([]);\r\n        setBatchMode(false);\r\n        setState('initial');\r\n      } else {\r\n        toast.error('Batch processing failed');\r\n      }\r\n    } catch (error) {\r\n      console.error('Batch submit error:', error);\r\n      toast.error('An error occurred during batch submission');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // 切換批量模式\r\n  const toggleBatchMode = () => {\r\n    setBatchMode(!batchMode);\r\n    if (!batchMode) {\r\n      // 進入批量模式時生成會話ID\r\n      setSessionId(crypto.randomUUID());\r\n      setState('batch_mode');\r\n      toast.info('Batch mode enabled. Scan multiple items before submitting.');\r\n    } else {\r\n      // 退出批量模式\r\n      setBatchScans([]);\r\n      setSessionId(null);\r\n      setPendingBatchItem(null);\r\n      setEditingIndex(null);\r\n      setState('initial');\r\n    }\r\n  };\r\n\r\n  // 編輯批量項目數量\r\n  const handleEditBatchItem = (index: number) => {\r\n    const item = batchScans[index];\r\n    if ((item as { status: string }).status !== 'pending') return;\r\n\r\n    setEditingIndex(index);\r\n    setPendingBatchItem(item);\r\n    setShowNumberPad(true);\r\n  };\r\n\r\n  // 刪除批量項目\r\n  const handleDeleteBatchItem = (index: number) => {\r\n    const updatedScans = batchScans.filter((_, i) => i !== index);\r\n    setBatchScans(updatedScans);\r\n    toast.info('Item removed from batch');\r\n  };\r\n\r\n  return (\r\n    <UniversalBackground>\r\n      <ErrorBoundary>\r\n        <div className='text-white'>\r\n          <div className='mx-auto max-w-7xl px-4 py-8 sm:px-6 lg:px-8'>\r\n            <div className='space-y-8'>\r\n              {/* Batch Mode Toggle */}\r\n              <div className='mb-6 flex flex-col items-center'>\r\n                <button\r\n                  onClick={toggleBatchMode}\r\n                  className={`flex items-center gap-2 rounded-lg px-6 py-3 font-semibold transition-all ${\r\n                    batchMode\r\n                      ? 'bg-green-600 text-white hover:bg-green-700'\r\n                      : 'bg-slate-700 text-white hover:bg-slate-600'\r\n                  }`}\r\n                >\r\n                  <QueueListIcon className='h-5 w-5' />\r\n                  {batchMode ? 'Exit Batch Mode' : 'Enable Batch Mode'}\r\n                </button>\r\n                {batchMode && (\r\n                  <motion.p\r\n                    initial={{ opacity: 0, y: -10 }}\r\n                    animate={{ opacity: 1, y: 0 }}\r\n                    className='mt-3 flex items-center gap-2 text-sm text-green-400'\r\n                  >\r\n                    <svg className='h-4 w-4' fill='none' stroke='currentColor' viewBox='0 0 24 24'>\r\n                      <path\r\n                        strokeLinecap='round'\r\n                        strokeLinejoin='round'\r\n                        strokeWidth={2}\r\n                        d='M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z'\r\n                      />\r\n                    </svg>\r\n                    Batch mode active - Scan multiple pallets and enter quantities before submitting\r\n                  </motion.p>\r\n                )}\r\n              </div>\r\n\r\n              {/* Batch Mode List */}\r\n              <AnimatePresence>\r\n                {batchMode && batchScans.length > 0 && (\r\n                  <motion.div\r\n                    initial={{ opacity: 0, y: -20 }}\r\n                    animate={{ opacity: 1, y: 0 }}\r\n                    exit={{ opacity: 0, y: -20 }}\r\n                    className='rounded-2xl border border-slate-700/50 bg-slate-800/30 p-6 shadow-xl backdrop-blur-xl'\r\n                  >\r\n                    <h3 className='mb-4 flex items-center gap-2 text-lg font-semibold text-white'>\r\n                      <QueueListIcon className='h-5 w-5 text-blue-400' />\r\n                      Batch Scan List ({batchScans.length} items)\r\n                    </h3>\r\n\r\n                    <div className='max-h-60 space-y-2 overflow-y-auto'>\r\n                      {batchScans.map((scan, index) => (\r\n                        <motion.div\r\n                          key={`${scan.plt_num}-${index}`}\r\n                          initial={{ opacity: 0, x: -20 }}\r\n                          animate={{ opacity: 1, x: 0 }}\r\n                          transition={{ delay: index * 0.05 }}\r\n                          className={`flex items-center justify-between rounded-lg p-3 ${\r\n                            (scan as { status: string }).status === 'error'\r\n                              ? 'border border-red-700/50 bg-red-900/20'\r\n                              : (scan as { status: string }).status === 'success'\r\n                                ? 'border border-green-700/50 bg-green-900/20'\r\n                                : 'border border-slate-600/50 bg-slate-700/30'\r\n                          }`}\r\n                        >\r\n                          <div className='flex items-center gap-3'>\r\n                            {(scan as { status: string }).status === 'error' ? (\r\n                              <XCircleIcon className='h-5 w-5 text-red-400' />\r\n                            ) : (scan as { status: string }).status === 'success' ? (\r\n                              <CheckCircleIcon className='h-5 w-5 text-green-400' />\r\n                            ) : (\r\n                              <ClockIcon className='h-5 w-5 text-yellow-400' />\r\n                            )}\r\n                            <div>\r\n                              <p className='text-sm font-medium text-white'>\r\n                                {scan.product_code} - {scan.plt_num}\r\n                              </p>\r\n                              <p className='text-xs text-slate-400'>\r\n                                {scan.product_desc || 'No description'}\r\n                              </p>\r\n                              {scan.current_remain_qty !== undefined && (\r\n                                <p className='mt-1 text-xs text-slate-500'>\r\n                                  Current Stock: {scan.current_remain_qty} →{' '}\r\n                                  {scan.current_remain_qty - scan.counted_qty}\r\n                                </p>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                          <div className='flex items-center gap-2'>\r\n                            <div className='text-right'>\r\n                              <p className='text-sm font-medium text-white'>\r\n                                Qty: {scan.counted_qty}\r\n                              </p>\r\n                              {scan.error && <p className='text-xs text-red-400'>{scan.error}</p>}\r\n                            </div>\r\n                            {(scan as { status: string }).status === 'pending' && (\r\n                              <div className='flex gap-1'>\r\n                                <button\r\n                                  onClick={() => handleEditBatchItem(index)}\r\n                                  className='rounded bg-blue-600 p-1.5 text-white transition-colors hover:bg-blue-700'\r\n                                  title='Edit quantity'\r\n                                >\r\n                                  <svg\r\n                                    className='h-4 w-4'\r\n                                    fill='none'\r\n                                    stroke='currentColor'\r\n                                    viewBox='0 0 24 24'\r\n                                  >\r\n                                    <path\r\n                                      strokeLinecap='round'\r\n                                      strokeLinejoin='round'\r\n                                      strokeWidth={2}\r\n                                      d='M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z'\r\n                                    />\r\n                                  </svg>\r\n                                </button>\r\n                                <button\r\n                                  onClick={() => handleDeleteBatchItem(index)}\r\n                                  className='rounded bg-red-600 p-1.5 text-white transition-colors hover:bg-red-700'\r\n                                  title='Remove from batch'\r\n                                >\r\n                                  <svg\r\n                                    className='h-4 w-4'\r\n                                    fill='none'\r\n                                    stroke='currentColor'\r\n                                    viewBox='0 0 24 24'\r\n                                  >\r\n                                    <path\r\n                                      strokeLinecap='round'\r\n                                      strokeLinejoin='round'\r\n                                      strokeWidth={2}\r\n                                      d='M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16'\r\n                                    />\r\n                                  </svg>\r\n                                </button>\r\n                              </div>\r\n                            )}\r\n                          </div>\r\n                        </motion.div>\r\n                      ))}\r\n                    </div>\r\n\r\n                    <div className='mt-4 flex gap-4'>\r\n                      <button\r\n                        onClick={handleBatchSubmit}\r\n                        disabled={\r\n                          isLoading || batchScans.filter((s: Record<string, unknown>) => (s as { status: string }).status === 'pending').length === 0\r\n                        }\r\n                        className='flex-1 rounded-lg bg-blue-600 px-4 py-2 font-semibold text-white transition-colors hover:bg-blue-700 disabled:cursor-not-allowed disabled:bg-slate-600'\r\n                      >\r\n                        Submit Batch ({batchScans.filter((s: Record<string, unknown>) => (s as { status: string }).status === 'pending').length} items)\r\n                      </button>\r\n                      <button\r\n                        onClick={() => setBatchScans([])}\r\n                        className='rounded-lg bg-slate-700 px-4 py-2 font-semibold text-white transition-colors hover:bg-slate-600'\r\n                      >\r\n                        Clear All\r\n                      </button>\r\n                    </div>\r\n                  </motion.div>\r\n                )}\r\n              </AnimatePresence>\r\n\r\n              {/* Scan To Start 區域 */}\r\n              <AnimatePresence mode='wait'>\r\n                {(state === 'initial' || state === 'scanning' || state === 'batch_mode') && (\r\n                  <ScanToStart onScanSuccess={handleScanSuccess} isLoading={isLoading} />\r\n                )}\r\n              </AnimatePresence>\r\n\r\n              {/* Remain To Count 區域 */}\r\n              <AnimatePresence>\r\n                {countData && state === 'counting' && (\r\n                  <RemainToCount\r\n                    remainQty={countData.remain_qty}\r\n                    productCode={countData.product_code}\r\n                    productDesc={countData.product_desc}\r\n                    visible={true}\r\n                  />\r\n                )}\r\n              </AnimatePresence>\r\n\r\n              {/* 重新開始按鈕 */}\r\n              {state === 'counting' && (\r\n                <div className='flex justify-center'>\r\n                  <motion.button\r\n                    whileHover={{ scale: 1.05 }}\r\n                    whileTap={{ scale: 0.95 }}\r\n                    onClick={resetToInitial}\r\n                    className='rounded-lg bg-slate-700 px-6 py-3 font-semibold text-white transition-colors hover:bg-slate-600'\r\n                  >\r\n                    Scan Next Pallet\r\n                  </motion.button>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* 數字鍵盤 */}\r\n          <AnimatePresence>\r\n            {showNumberPad && (\r\n              <motion.div\r\n                initial={{ opacity: 0 }}\r\n                animate={{ opacity: 1 }}\r\n                exit={{ opacity: 0 }}\r\n                className='fixed inset-0 z-50 bg-black/50 backdrop-blur-sm'\r\n              >\r\n                <div className='fixed inset-0 flex items-center justify-center p-4'>\r\n                  <div className='w-full max-w-md rounded-2xl bg-slate-800 shadow-2xl'>\r\n                    {pendingBatchItem && (\r\n                      <div className='border-b border-slate-700 p-6'>\r\n                        <h3 className='mb-2 text-lg font-semibold text-white'>\r\n                          {editingIndex !== null ? 'Edit Quantity' : 'Enter Quantity for Pallet'}\r\n                        </h3>\r\n                        <div className='space-y-2'>\r\n                          <p className='text-sm text-slate-300'>\r\n                            Product:{' '}\r\n                            <span className='font-medium text-white'>\r\n                              {pendingBatchItem.product_code}\r\n                            </span>\r\n                          </p>\r\n                          <p className='text-sm text-slate-300'>\r\n                            Pallet:{' '}\r\n                            <span className='font-medium text-white'>\r\n                              {pendingBatchItem.plt_num}\r\n                            </span>\r\n                          </p>\r\n                          {pendingBatchItem.product_desc && (\r\n                            <p className='text-sm text-slate-300'>\r\n                              Description:{' '}\r\n                              <span className='font-medium text-white'>\r\n                                {pendingBatchItem.product_desc}\r\n                              </span>\r\n                            </p>\r\n                          )}\r\n                          {pendingBatchItem.current_remain_qty !== undefined && (\r\n                            <p className='text-sm text-slate-300'>\r\n                              Current Stock:{' '}\r\n                              <span className='font-medium text-white'>\r\n                                {pendingBatchItem.current_remain_qty}\r\n                              </span>\r\n                            </p>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                    <NumberPad\r\n                      onConfirm={handleNumberPadConfirm}\r\n                      onCancel={handleNumberPadCancel}\r\n                      isLoading={isLoading}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </motion.div>\r\n            )}\r\n          </AnimatePresence>\r\n        </div>\r\n      </ErrorBoundary>\r\n    </UniversalBackground>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/types/dashboard.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":197,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3800,3803],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3800,3803],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":204,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3975,3978],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3975,3978],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Dashboard 相關類型定義\r\n\r\n// 通用 Widget Props\r\nexport interface WidgetProps {\r\n  className?: string;\r\n}\r\n\r\nexport interface DashboardDateRange {\r\n  startDate: Date | null;\r\n  endDate: Date | null;\r\n}\r\n\r\nexport interface DashboardBatchQueryData {\r\n  // 基礎統計數據\r\n  statsCard?: {\r\n    totalProducts: number;\r\n    totalStock: number;\r\n    lowStockCount: number;\r\n    averageStockLevel: number;\r\n  };\r\n  \r\n  // 棧板總數（用於測試）\r\n  total_pallets?: number | {\r\n    value: number;\r\n    label?: string;\r\n    trend?: number;\r\n  };\r\n  \r\n  // 庫存相關數據\r\n  stockDistribution?: {\r\n    warehouseData: Array<{\r\n      warehouse: string;\r\n      quantity: number;\r\n      percentage: number;\r\n    }>;\r\n    totalQuantity: number;\r\n  };\r\n  \r\n  stockLevelHistory?: {\r\n    history: Array<{\r\n      date: string;\r\n      totalStock: number;\r\n      changeFromPrevious: number;\r\n    }>;\r\n  };\r\n  \r\n  topProducts?: {\r\n    products: Array<{\r\n      productCode: string;\r\n      productName: string;\r\n      quantity: number;\r\n      percentage: number;\r\n    }>;\r\n  };\r\n  \r\n  // 訂單相關數據\r\n  acoOrderProgress?: {\r\n    states: Array<{\r\n      state: string;\r\n      count: number;\r\n      percentage: number;\r\n    }>;\r\n    totalOrders: number;\r\n  };\r\n  \r\n  ordersList?: {\r\n    orders: Array<{\r\n      id: string;\r\n      orderNumber: string;\r\n      customer: string;\r\n      status: string;\r\n      date: string;\r\n      items: number;\r\n    }>;\r\n    totalCount: number;\r\n  };\r\n  \r\n  // 生產相關數據\r\n  injectionProductionStats?: {\r\n    todayProduction: number;\r\n    weeklyAverage: number;\r\n    monthlyTotal: number;\r\n    efficiency: number;\r\n  };\r\n  \r\n  productionDetails?: {\r\n    lines: Array<{\r\n      lineId: string;\r\n      lineName: string;\r\n      currentProduct: string;\r\n      quantity: number;\r\n      status: 'running' | 'stopped' | 'maintenance';\r\n    }>;\r\n  };\r\n  \r\n  staffWorkload?: {\r\n    staff: Array<{\r\n      staffId: string;\r\n      name: string;\r\n      completedTasks: number;\r\n      pendingTasks: number;\r\n      efficiency: number;\r\n    }>;\r\n  };\r\n  \r\n  // 倉庫相關數據\r\n  warehouseTransferList?: {\r\n    transfers: Array<{\r\n      id: string;\r\n      fromLocation: string;\r\n      toLocation: string;\r\n      quantity: number;\r\n      status: string;\r\n      date: string;\r\n    }>;\r\n    pendingCount: number;\r\n    completedCount: number;\r\n  };\r\n  \r\n  warehouseWorkLevel?: {\r\n    workLevels: Array<{\r\n      hour: number;\r\n      inbound: number;\r\n      outbound: number;\r\n      transfers: number;\r\n    }>;\r\n    peakHour: number;\r\n    averageActivity: number;\r\n  };\r\n  \r\n  // GRN 相關數據\r\n  grnReport?: {\r\n    recentGrns: Array<{\r\n      id: string;\r\n      supplierName: string;\r\n      date: string;\r\n      itemsCount: number;\r\n      status: string;\r\n    }>;\r\n    pendingCount: number;\r\n    completedToday: number;\r\n  };\r\n  \r\n  // 其他數據\r\n  availableSoon?: {\r\n    items: Array<{\r\n      productCode: string;\r\n      productName: string;\r\n      expectedDate: string;\r\n      quantity: number;\r\n      supplier: string;\r\n    }>;\r\n    totalExpected: number;\r\n  };\r\n  \r\n  awaitLocationQty?: {\r\n    records: Array<{\r\n      location: string;\r\n      quantity: number;\r\n    }>;\r\n    value: number;\r\n    trend?: {\r\n      value: number;\r\n      isPositive: boolean;\r\n    };\r\n    // Legacy fields for compatibility\r\n    locations?: Array<{\r\n      location: string;\r\n      quantity: number;\r\n      lastUpdated: string;\r\n    }>;\r\n    totalAwaitingQty?: number;\r\n  };\r\n  \r\n  historyTree?: {\r\n    nodes: Array<{\r\n      id: string;\r\n      type: string;\r\n      description: string;\r\n      timestamp: string;\r\n      user: string;\r\n      children?: string[];\r\n    }>;\r\n  };\r\n  \r\n  yesterdayTransferCount?: {\r\n    count: number;\r\n    trend: number;\r\n    dateRange: {\r\n      start: string;\r\n      end: string;\r\n    };\r\n    optimized?: boolean;\r\n  };\r\n  \r\n  // 可以根據需要擴展更多 widget 數據類型\r\n  [key: string]: any; // 允許動態添加新的 widget 數據\r\n}\r\n\r\nexport interface DashboardBatchQueryError extends Error {\r\n  type: 'batch' | 'widget';\r\n  message: string;\r\n  widgetId?: string;\r\n  details?: any;\r\n  timestamp: Date;\r\n}\r\n\r\nexport interface DashboardWidgetConfig {\r\n  id: string;\r\n  title: string;\r\n  enabled: boolean;\r\n  refreshInterval?: number;\r\n  dependencies?: string[]; // 依賴其他 widget 的數據\r\n}\r\n\r\nexport interface DashboardBatchQueryOptions {\r\n  dateRange: DashboardDateRange;\r\n  enabledWidgets?: string[];\r\n  batchSize?: number;\r\n  timeout?: number;\r\n}","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/utils/clearAdminDashboard.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[548,551],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[548,551],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Utility to clear admin dashboard layout\r\n * This file is kept for compatibility but no longer uses localStorage\r\n */\r\n\r\nimport { isNotProduction } from '@/lib/utils/env';\r\n\r\nexport function clearAdminDashboardLayout() {\r\n  if (typeof window !== 'undefined') {\r\n    isNotProduction() &&\r\n      console.log(\r\n        'Admin dashboard uses database storage only. Use the Reset button in Edit Dashboard mode to clear widgets.'\r\n      );\r\n  }\r\n}\r\n\r\n// Make it available globally for debugging\r\nif (typeof window !== 'undefined') {\r\n  (window as any).clearAdminDashboard = clearAdminDashboardLayout;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/utils/fixWidgetHooks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/utils/performance-test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/utils/performanceBenchmark.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2273,2276],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2273,2276],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 性能基準測試工具\n * 用於測量 Admin Dashboard 優化效果\n */\n\nimport React from 'react';\n\ninterface PerformanceMetrics {\n  bundleSize: number;\n  initialLoadTime: number;\n  widgetRenderTimes: Map<string, number>;\n  rerenderCount: Map<string, number>;\n  memoryUsage: {\n    usedJSHeapSize: number;\n    totalJSHeapSize: number;\n  };\n  networkMetrics: {\n    requestCount: number;\n    totalSize: number;\n    cachedRequests: number;\n  };\n}\n\nexport class PerformanceBenchmark {\n  private static instance: PerformanceBenchmark;\n  private metrics: PerformanceMetrics;\n  private observer: PerformanceObserver | null = null;\n  private renderStartTimes: Map<string, number> = new Map();\n\n  private constructor() {\n    this.metrics = {\n      bundleSize: 0,\n      initialLoadTime: 0,\n      widgetRenderTimes: new Map(),\n      rerenderCount: new Map(),\n      memoryUsage: {\n        usedJSHeapSize: 0,\n        totalJSHeapSize: 0,\n      },\n      networkMetrics: {\n        requestCount: 0,\n        totalSize: 0,\n        cachedRequests: 0,\n      },\n    };\n  }\n\n  static getInstance(): PerformanceBenchmark {\n    if (!PerformanceBenchmark.instance) {\n      PerformanceBenchmark.instance = new PerformanceBenchmark();\n    }\n    return PerformanceBenchmark.instance;\n  }\n\n  // 開始性能監測\n  startMonitoring(): void {\n    // 監測資源加載\n    this.observer = new PerformanceObserver(list => {\n      for (const entry of list.getEntries()) {\n        if (entry.entryType === 'resource') {\n          const resourceEntry = entry as PerformanceResourceTiming;\n          this.metrics.networkMetrics.requestCount++;\n          this.metrics.networkMetrics.totalSize += resourceEntry.transferSize || 0;\n\n          if (resourceEntry.transferSize === 0) {\n            this.metrics.networkMetrics.cachedRequests++;\n          }\n        }\n      }\n    });\n\n    this.observer.observe({ entryTypes: ['resource', 'measure'] });\n\n    // 記錄初始加載時間\n    if (typeof window !== 'undefined' && window.performance) {\n      const navigation = performance.getEntriesByType(\n        'navigation'\n      )[0] as PerformanceNavigationTiming;\n      this.metrics.initialLoadTime = navigation.loadEventEnd - navigation.fetchStart;\n    }\n\n    // 監測內存使用 (如果支援)\n    if ('memory' in performance) {\n      setInterval(() => {\n        const memory = (performance as any).memory;\n        this.metrics.memoryUsage = {\n          usedJSHeapSize: memory.usedJSHeapSize,\n          totalJSHeapSize: memory.totalJSHeapSize,\n        };\n      }, 1000);\n    }\n  }\n\n  // 記錄 Widget 渲染開始\n  startWidgetRender(widgetId: string): void {\n    this.renderStartTimes.set(widgetId, performance.now());\n  }\n\n  // 記錄 Widget 渲染結束\n  endWidgetRender(widgetId: string): void {\n    const startTime = this.renderStartTimes.get(widgetId);\n    if (startTime) {\n      const renderTime = performance.now() - startTime;\n\n      // 更新渲染時間\n      const currentTime = this.metrics.widgetRenderTimes.get(widgetId) || 0;\n      this.metrics.widgetRenderTimes.set(widgetId, Math.max(currentTime, renderTime));\n\n      // 更新重渲染次數\n      const currentCount = this.metrics.rerenderCount.get(widgetId) || 0;\n      this.metrics.rerenderCount.set(widgetId, currentCount + 1);\n\n      this.renderStartTimes.delete(widgetId);\n    }\n  }\n\n  // 測量 Bundle Size\n  async measureBundleSize(): Promise<void> {\n    try {\n      const resources = performance.getEntriesByType('resource') as PerformanceResourceTiming[];\n      const jsResources = resources.filter(r => r.name.endsWith('.js'));\n\n      this.metrics.bundleSize = jsResources.reduce((total, resource) => {\n        return total + (resource.transferSize || 0);\n      }, 0);\n    } catch (error) {\n      console.error('Failed to measure bundle size:', error);\n    }\n  }\n\n  // 獲取性能報告\n  getReport(): {\n    summary: string;\n    details: PerformanceMetrics;\n    recommendations: string[];\n  } {\n    const bundleSizeKB = Math.round(this.metrics.bundleSize / 1024);\n    const loadTimeSeconds = (this.metrics.initialLoadTime / 1000).toFixed(2);\n    const avgRenderTime = this.calculateAverageRenderTime();\n    const totalRerenders = this.calculateTotalRerenders();\n\n    const summary = `\n性能測試報告：\n- Bundle Size: ${bundleSizeKB}KB ${bundleSizeKB < 350 ? '✅' : '❌'} (目標: <350KB)\n- 初始加載時間: ${loadTimeSeconds}s ${parseFloat(loadTimeSeconds) < 1 ? '✅' : '❌'} (目標: <1s)\n- 平均 Widget 渲染時間: ${avgRenderTime.toFixed(2)}ms\n- 總重渲染次數: ${totalRerenders}\n- 內存使用: ${Math.round(this.metrics.memoryUsage.usedJSHeapSize / 1024 / 1024)}MB\n- 網絡請求: ${this.metrics.networkMetrics.requestCount} (${this.metrics.networkMetrics.cachedRequests} cached)\n    `.trim();\n\n    const recommendations = this.generateRecommendations();\n\n    return {\n      summary,\n      details: this.metrics,\n      recommendations,\n    };\n  }\n\n  // 計算平均渲染時間\n  private calculateAverageRenderTime(): number {\n    const times = Array.from(this.metrics.widgetRenderTimes.values());\n    if (times.length === 0) return 0;\n    return times.reduce((sum, time) => sum + time, 0) / times.length;\n  }\n\n  // 計算總重渲染次數\n  private calculateTotalRerenders(): number {\n    return Array.from(this.metrics.rerenderCount.values()).reduce((sum, count) => sum + count, 0);\n  }\n\n  // 生成優化建議\n  private generateRecommendations(): string[] {\n    const recommendations: string[] = [];\n\n    if (this.metrics.bundleSize > 350 * 1024) {\n      recommendations.push('Bundle size 超過 350KB，建議進一步 code splitting');\n    }\n\n    if (this.metrics.initialLoadTime > 1000) {\n      recommendations.push('初始加載時間超過 1 秒，建議優化關鍵渲染路徑');\n    }\n\n    // 檢查高重渲染的組件\n    this.metrics.rerenderCount.forEach((count, widgetId) => {\n      if (count > 5) {\n        recommendations.push(`Widget ${widgetId} 重渲染 ${count} 次，建議檢查依賴項`);\n      }\n    });\n\n    // 檢查慢渲染的組件\n    this.metrics.widgetRenderTimes.forEach((time, widgetId) => {\n      if (time > 100) {\n        recommendations.push(`Widget ${widgetId} 渲染時間 ${time.toFixed(2)}ms，建議優化`);\n      }\n    });\n\n    return recommendations;\n  }\n\n  // 清理資源\n  cleanup(): void {\n    if (this.observer) {\n      this.observer.disconnect();\n      this.observer = null;\n    }\n    this.renderStartTimes.clear();\n  }\n}\n\n// 導出便捷函數\nexport const performanceBenchmark = PerformanceBenchmark.getInstance();\n\n// React Hook 用於組件性能測量\nexport function useWidgetPerformance(widgetId: string) {\n  const benchmark = PerformanceBenchmark.getInstance();\n\n  // 組件掛載時開始測量\n  React.useEffect(() => {\n    benchmark.startWidgetRender(widgetId);\n\n    // 使用 RAF 確保渲染完成後結束測量\n    const rafId = requestAnimationFrame(() => {\n      benchmark.endWidgetRender(widgetId);\n    });\n\n    return () => {\n      cancelAnimationFrame(rafId);\n    };\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/utils/performanceTestBatchQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/ccohen/Documents/NewPennine/online-stock-control-system/app/admin/utils/removeAutoRefresh.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
