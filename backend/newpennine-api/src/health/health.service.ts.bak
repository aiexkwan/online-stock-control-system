import { Injectable } from '@nestjs/common';
import { SupabaseService } from '../supabase/supabase.service';
import { SupabaseClient } from '@supabase/supabase-js';
import {
  HealthResponseDto,
  DetailedHealthResponseDto,
} from './dto/health-response.dto';

@Injectable()
export class HealthService {
  private supabase: SupabaseClient;

  constructor(private readonly supabaseService: SupabaseService) {
    this.supabase = this.supabaseService.getClient();
  }

  async checkHealth(): Promise<HealthResponseDto> {
    return {
      status: 'ok',
      timestamp: new Date().toISOString(),
      service: 'newpennine-api',
      version: process.env.API_VERSION || '1.0.0',
    };
  }

  async checkDetailedHealth(): Promise<DetailedHealthResponseDto> {
    const basicHealth = await this.checkHealth();

    let databaseStatus = 'unavailable';
    let databaseLatency = 0;

    if (this.supabase) {
      try {
        const startTime = Date.now();
        const { error } = await this.supabase
          .from('data_code')
          .select('code')
          .limit(1);

        const endTime = Date.now();
        databaseLatency = endTime - startTime;
        databaseStatus = error ? 'error' : 'connected';
      } catch (error) {
        databaseStatus = 'error';
      }
    }

    return {
      ...basicHealth,
      database: {
        status: databaseStatus,
        latency: databaseLatency ? `${databaseLatency}ms` : null,
      },
      environment: process.env.NODE_ENV || 'development',
      uptime: process.uptime(),
      memory: {
        used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024) + 'MB',
        total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024) + 'MB',
      },
    };
  }
}
