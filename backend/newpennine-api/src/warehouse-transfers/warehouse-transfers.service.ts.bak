import { Injectable, Logger } from '@nestjs/common';
import { SupabaseService } from '../supabase/supabase.service';
import { TransferListQueryDto } from './dto/transfer-list-query.dto';
import { TransferListResponseDto } from './dto/transfer-responses.dto';

@Injectable()
export class WarehouseTransfersService {
  private readonly logger = new Logger(WarehouseTransfersService.name);

  constructor(private readonly supabaseService: SupabaseService) {}

  /**
   * 獲取倉庫轉移列表
   */
  async getTransferList(
    query: TransferListQueryDto,
  ): Promise<TransferListResponseDto> {
    try {
      // 首先嘗試使用 RPC 函數
      const { data: rpcData, error: rpcError } = await this.supabaseService
        .getClient()
        .rpc('get_warehouse_transfers', {
          start_date: query.startDate,
          end_date: query.endDate,
          from_location: query.fromLocation,
          to_location: query.toLocation,
          transfer_status: query.status,
          limit_count: query.limit,
          offset_count: query.offset,
        });

      if (!rpcError && rpcData) {
        this.logger.debug('Using RPC function for warehouse transfers');
        return {
          transfers: rpcData,
          total_records: rpcData.length,
          offset: query.offset || 0,
          limit: query.limit || 50,
          filters: {
            ...(query.startDate && { startDate: query.startDate }),
            ...(query.endDate && { endDate: query.endDate }),
            ...(query.fromLocation && { fromLocation: query.fromLocation }),
            ...(query.toLocation && { toLocation: query.toLocation }),
            ...(query.status && { status: query.status }),
          },
        };
      }

      // Fallback to direct query
      this.logger.debug('Using direct query for warehouse transfers');
      let transferQuery = this.supabaseService
        .getClient()
        .from('record_transfer')
        .select(
          `
          transfer_id,
          pallet_ref,
          product_code,
          product_description,
          from_location,
          to_location,
          quantity,
          transfer_date,
          status,
          transferred_by,
          notes,
          created_at,
          updated_at
        `,
          { count: 'exact' },
        )
        .order('transfer_date', { ascending: false });

      // 應用篩選條件
      if (query.startDate) {
        transferQuery = transferQuery.gte('transfer_date', query.startDate);
      }

      if (query.endDate) {
        transferQuery = transferQuery.lte('transfer_date', query.endDate);
      }

      if (query.fromLocation) {
        transferQuery = transferQuery.eq('from_location', query.fromLocation);
      }

      if (query.toLocation) {
        transferQuery = transferQuery.eq('to_location', query.toLocation);
      }

      if (query.status) {
        transferQuery = transferQuery.eq('status', query.status);
      }

      // 應用分頁
      transferQuery = transferQuery.range(
        query.offset || 0,
        (query.offset || 0) + (query.limit || 50) - 1,
      );

      const { data, error, count } = await transferQuery;

      if (error) {
        throw new Error(
          `Failed to fetch warehouse transfers: ${error.message}`,
        );
      }

      return {
        transfers: data || [],
        total_records: count || 0,
        offset: query.offset || 0,
        limit: query.limit || 50,
        filters: {
          ...(query.startDate && { startDate: query.startDate }),
          ...(query.endDate && { endDate: query.endDate }),
          ...(query.fromLocation && { fromLocation: query.fromLocation }),
          ...(query.toLocation && { toLocation: query.toLocation }),
          ...(query.status && { status: query.status }),
        },
      };
    } catch (error) {
      this.logger.error(
        'Error fetching warehouse transfers:',
        (error as Error).message,
      );
      throw error;
    }
  }
}
