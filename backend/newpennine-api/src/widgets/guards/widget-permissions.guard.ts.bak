import {
  Injectable,
  CanActivate,
  ExecutionContext,
  ForbiddenException,
  SetMetadata,
} from '@nestjs/common';
import { Request } from 'express';

export interface UserPayload {
  sub: string;
  email: string;
  role?: string;
  permissions?: string[];
}

export interface AuthenticatedRequest extends Request {
  user: UserPayload;
}

export const WIDGET_PERMISSIONS_KEY = 'widget_permissions';

export const WidgetPermissions = (permissions: string[]) =>
  SetMetadata(WIDGET_PERMISSIONS_KEY, permissions);

@Injectable()
export class WidgetPermissionsGuard implements CanActivate {
  canActivate(context: ExecutionContext): boolean {
    // For now, allow all authenticated requests
    // In production, implement proper permission checking
    const request = context.switchToHttp().getRequest<AuthenticatedRequest>();
    const user = request.user;

    if (!user) {
      throw new ForbiddenException('User not authenticated');
    }

    return true;
  }
}

// Common widget permissions
export const WIDGET_PERMISSION_CONSTANTS = {
  VIEW_DASHBOARD: 'widget:dashboard:view',
  VIEW_INVENTORY: 'widget:inventory:view',
  VIEW_ANALYTICS: 'widget:analytics:view',
  VIEW_REPORTS: 'widget:reports:view',
  VIEW_ADMIN: 'widget:admin:view',
} as const;
