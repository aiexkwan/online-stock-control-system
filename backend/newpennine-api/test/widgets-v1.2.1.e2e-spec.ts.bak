import { Test, TestingModule } from '@nestjs/testing';
import { INestApplication } from '@nestjs/common';
import request from 'supertest';
import { AppModule } from '../src/app.module';

describe('Widgets v1.2.1 E2E Tests', () => {
  let app: INestApplication;

  beforeEach(async () => {
    const moduleFixture: TestingModule = await Test.createTestingModule({
      imports: [AppModule],
    }).compile();

    app = moduleFixture.createNestApplication();

    // Apply same configuration as main.ts
    app.setGlobalPrefix('api/v1');
    app.enableCors({
      origin: '*',
      credentials: true,
      methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
      allowedHeaders: ['Content-Type', 'Authorization'],
    });

    await app.init();
  });

  afterEach(async () => {
    await app.close();
  });

  describe('Health Check', () => {
    it('/api/v1/health (GET) should return health status', () => {
      return request(app.getHttpServer())
        .get('/api/v1/health')
        .expect(200)
        .expect((res) => {
          expect(res.body).toHaveProperty('status', 'ok');
          expect(res.body).toHaveProperty('timestamp');
          expect(res.body).toHaveProperty('service', 'newpennine-api');
          expect(res.body).toHaveProperty('version');
        });
    });

    it('/api/v1/health/detailed (GET) should return detailed health status', () => {
      return request(app.getHttpServer())
        .get('/api/v1/health/detailed')
        .expect(200)
        .expect((res) => {
          expect(res.body).toHaveProperty('status', 'ok');
          expect(res.body).toHaveProperty('timestamp');
          expect(res.body).toHaveProperty('service', 'newpennine-api');
          expect(res.body).toHaveProperty('database');
          expect(res.body).toHaveProperty('memory');
          expect(res.body).toHaveProperty('uptime');
        });
    });
  });

  describe('Widgets API Authentication', () => {
    it('/api/v1/widgets/stats (GET) should require authentication', () => {
      return request(app.getHttpServer())
        .get('/api/v1/widgets/stats')
        .expect(401)
        .expect((res) => {
          expect(res.body).toHaveProperty('statusCode', 401);
          expect(res.body).toHaveProperty('message', 'Authentication required');
        });
    });

    it('/api/v1/widgets/inventory (GET) should require authentication', () => {
      return request(app.getHttpServer())
        .get('/api/v1/widgets/inventory')
        .expect(401);
    });

    it('/api/v1/widgets/dashboard-stats (GET) should require authentication', () => {
      return request(app.getHttpServer())
        .get('/api/v1/widgets/dashboard-stats')
        .expect(401);
    });

    it('/api/v1/widgets/inventory-analysis (GET) should require authentication', () => {
      return request(app.getHttpServer())
        .get('/api/v1/widgets/inventory-analysis')
        .expect(401);
    });
  });

  describe('API Endpoints Structure', () => {
    it('should have all expected widget endpoints', async () => {
      const expectedEndpoints = [
        '/api/v1/widgets/stats',
        '/api/v1/widgets/inventory',
        '/api/v1/widgets/dashboard-stats',
        '/api/v1/widgets/inventory-analysis',
      ];

      for (const endpoint of expectedEndpoints) {
        const response = await request(app.getHttpServer())
          .get(endpoint)
          .expect(401); // Should require auth

        expect(response.body.statusCode).toBe(401);
      }
    });
  });

  describe('Error Handling', () => {
    it('should handle invalid routes gracefully', () => {
      return request(app.getHttpServer())
        .get('/api/v1/widgets/nonexistent')
        .expect(404);
    });

    it('should handle invalid HTTP methods', () => {
      return request(app.getHttpServer())
        .post('/api/v1/widgets/stats')
        .expect(404);
    });
  });

  describe('CORS Configuration', () => {
    it('should handle OPTIONS requests', () => {
      return request(app.getHttpServer())
        .options('/api/v1/widgets/stats')
        .expect(204);
    });
  });
});
